
/Users/steve_black_spare/Dropbox/PhotonDnD-Receiver-NeoPixelRing/target/1.4.4/photon/PhotonDnD-Receiver-NeoPixelRing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002a64  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a2a80  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  20000000  080a2a84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005b4  2000006c  2000006c  0003006c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a2af0  080a2af0  00022af0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a2b18  080a2b18  00022b18  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000a33a7  00000000  00000000  00022b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000eb37  00000000  00000000  000c5ec3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00013f55  00000000  00000000  000d49fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001eb8  00000000  00000000  000e894f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003168  00000000  00000000  000ea807  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00022f8c  00000000  00000000  000ed96f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00021d12  00000000  00000000  001108fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a5d76  00000000  00000000  0013260d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b814  00000000  00000000  001d8384  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fb47 	bl	80a26c0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fb4c 	bl	80a26d6 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a2a84 	.word	0x080a2a84
 80a004c:	2000006c 	.word	0x2000006c
 80a0050:	2000006c 	.word	0x2000006c
 80a0054:	20000620 	.word	0x20000620
 80a0058:	20000620 	.word	0x20000620

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 f8fb 	bl	80a2258 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a2a48 	.word	0x080a2a48
 80a0084:	080a2a80 	.word	0x080a2a80

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b8e8 	b.w	80a025c <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f8b8 	bl	80a0202 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f002 b8a1 	b.w	80a21dc <_post_loop>

080a009a <_Znwj>:
 80a009a:	f001 bc45 	b.w	80a1928 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f001 bc4b 	b.w	80a1938 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZNSt14_Function_base13_Base_managerIPFv6StringS1_EE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a00b2:	2a01      	cmp	r2, #1
 80a00b4:	d002      	beq.n	80a00bc <_ZNSt14_Function_base13_Base_managerIPFv6StringS1_EE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xa>
 80a00b6:	2a02      	cmp	r2, #2
 80a00b8:	d002      	beq.n	80a00c0 <_ZNSt14_Function_base13_Base_managerIPFv6StringS1_EE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
 80a00ba:	e004      	b.n	80a00c6 <_ZNSt14_Function_base13_Base_managerIPFv6StringS1_EE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a00bc:	6001      	str	r1, [r0, #0]
	      break;
 80a00be:	e002      	b.n	80a00c6 <_ZNSt14_Function_base13_Base_managerIPFv6StringS1_EE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80a00c0:	680b      	ldr	r3, [r1, #0]
 80a00c2:	b100      	cbz	r0, 80a00c6 <_ZNSt14_Function_base13_Base_managerIPFv6StringS1_EE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
 80a00c4:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a00c6:	2000      	movs	r0, #0
 80a00c8:	4770      	bx	lr

080a00ca <_ZNSt17_Function_handlerIFvPKcS1_EPFv6StringS3_EE9_M_invokeERKSt9_Any_dataOS1_SA_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a00ca:	b530      	push	{r4, r5, lr}
 80a00cc:	4615      	mov	r5, r2
 80a00ce:	b089      	sub	sp, #36	; 0x24
      {
	(*_Base::_M_get_pointer(__functor))(
 80a00d0:	6804      	ldr	r4, [r0, #0]
 80a00d2:	6809      	ldr	r1, [r1, #0]
 80a00d4:	4668      	mov	r0, sp
 80a00d6:	f001 fe39 	bl	80a1d4c <_ZN6StringC1EPK19__FlashStringHelper>
 80a00da:	6829      	ldr	r1, [r5, #0]
 80a00dc:	a804      	add	r0, sp, #16
 80a00de:	f001 fe35 	bl	80a1d4c <_ZN6StringC1EPK19__FlashStringHelper>
 80a00e2:	a904      	add	r1, sp, #16
 80a00e4:	4668      	mov	r0, sp
 80a00e6:	47a0      	blx	r4
 80a00e8:	a804      	add	r0, sp, #16
 80a00ea:	f001 fde8 	bl	80a1cbe <_ZN6StringD1Ev>
 80a00ee:	4668      	mov	r0, sp
 80a00f0:	f001 fde5 	bl	80a1cbe <_ZN6StringD1Ev>
	    std::forward<_ArgTypes>(__args)...);
      }
 80a00f4:	b009      	add	sp, #36	; 0x24
 80a00f6:	bd30      	pop	{r4, r5, pc}

080a00f8 <_Z9onHandler6StringS_>:
    Particle.subscribe("MasterPower", onMasterHandler, MY_DEVICES);
}


void onHandler(String event, String data)
{
 80a00f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a00fa:	460d      	mov	r5, r1
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a00fc:	491a      	ldr	r1, [pc, #104]	; (80a0168 <_Z9onHandler6StringS_+0x70>)
 80a00fe:	4628      	mov	r0, r5
 80a0100:	f001 fe62 	bl	80a1dc8 <_ZNK6String6equalsEPKc>
    if(data == "green") {
 80a0104:	b928      	cbnz	r0, 80a0112 <_Z9onHandler6StringS_+0x1a>
 80a0106:	4919      	ldr	r1, [pc, #100]	; (80a016c <_Z9onHandler6StringS_+0x74>)
 80a0108:	4628      	mov	r0, r5
 80a010a:	f001 fe5d 	bl	80a1dc8 <_ZNK6String6equalsEPKc>
            memoryState = "green";  // save the colour so that when the user turns master status back to 'on' we know what colour to resume to
        }
        
    }
        
    if(data == "red") {
 80a010e:	b980      	cbnz	r0, 80a0132 <_Z9onHandler6StringS_+0x3a>
 80a0110:	e01e      	b.n	80a0150 <_Z9onHandler6StringS_+0x58>
 80a0112:	2400      	movs	r4, #0
void onHandler(String event, String data)
{
    if(data == "green") {
        for(int i = 0; i < PIXEL_COUNT; i ++)
        {
            ring.setPixelColor(i, 0, 220, 0); 
 80a0114:	2200      	movs	r2, #0
 80a0116:	b2a1      	uxth	r1, r4
 80a0118:	9200      	str	r2, [sp, #0]
 80a011a:	23dc      	movs	r3, #220	; 0xdc
 80a011c:	4814      	ldr	r0, [pc, #80]	; (80a0170 <_Z9onHandler6StringS_+0x78>)
 80a011e:	f001 fa21 	bl	80a1564 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>


void onHandler(String event, String data)
{
    if(data == "green") {
        for(int i = 0; i < PIXEL_COUNT; i ++)
 80a0122:	3401      	adds	r4, #1
        {
            ring.setPixelColor(i, 0, 220, 0); 
            memoryState = "green";  // save the colour so that when the user turns master status back to 'on' we know what colour to resume to
 80a0124:	4910      	ldr	r1, [pc, #64]	; (80a0168 <_Z9onHandler6StringS_+0x70>)
 80a0126:	4813      	ldr	r0, [pc, #76]	; (80a0174 <_Z9onHandler6StringS_+0x7c>)
 80a0128:	f001 fe3d 	bl	80a1da6 <_ZN6StringaSEPKc>


void onHandler(String event, String data)
{
    if(data == "green") {
        for(int i = 0; i < PIXEL_COUNT; i ++)
 80a012c:	2c0c      	cmp	r4, #12
 80a012e:	d1f1      	bne.n	80a0114 <_Z9onHandler6StringS_+0x1c>
 80a0130:	e7e9      	b.n	80a0106 <_Z9onHandler6StringS_+0xe>
 80a0132:	2400      	movs	r4, #0
    }
        
    if(data == "red") {
       for(int i = 0; i < PIXEL_COUNT; i ++)
        {
            ring.setPixelColor(i, 220, 0, 0); 
 80a0134:	2300      	movs	r3, #0
 80a0136:	b2a1      	uxth	r1, r4
 80a0138:	9300      	str	r3, [sp, #0]
 80a013a:	22dc      	movs	r2, #220	; 0xdc
 80a013c:	480c      	ldr	r0, [pc, #48]	; (80a0170 <_Z9onHandler6StringS_+0x78>)
 80a013e:	f001 fa11 	bl	80a1564 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        
    }
        
    if(data == "red") {
       for(int i = 0; i < PIXEL_COUNT; i ++)
 80a0142:	3401      	adds	r4, #1
        {
            ring.setPixelColor(i, 220, 0, 0); 
            memoryState = "red";
 80a0144:	4909      	ldr	r1, [pc, #36]	; (80a016c <_Z9onHandler6StringS_+0x74>)
 80a0146:	480b      	ldr	r0, [pc, #44]	; (80a0174 <_Z9onHandler6StringS_+0x7c>)
 80a0148:	f001 fe2d 	bl	80a1da6 <_ZN6StringaSEPKc>
        }
        
    }
        
    if(data == "red") {
       for(int i = 0; i < PIXEL_COUNT; i ++)
 80a014c:	2c0c      	cmp	r4, #12
 80a014e:	d1f1      	bne.n	80a0134 <_Z9onHandler6StringS_+0x3c>
            memoryState = "red";
        } 
    }

     // Update the NeoPixel only if power is on
    if(overrideDisplay == false) {
 80a0150:	4b09      	ldr	r3, [pc, #36]	; (80a0178 <_Z9onHandler6StringS_+0x80>)
 80a0152:	781b      	ldrb	r3, [r3, #0]
 80a0154:	b92b      	cbnz	r3, 80a0162 <_Z9onHandler6StringS_+0x6a>
            ring.show();     
 80a0156:	4806      	ldr	r0, [pc, #24]	; (80a0170 <_Z9onHandler6StringS_+0x78>)
    }
}  
 80a0158:	b003      	add	sp, #12
 80a015a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        } 
    }

     // Update the NeoPixel only if power is on
    if(overrideDisplay == false) {
            ring.show();     
 80a015e:	f000 b947 	b.w	80a03f0 <_ZN17Adafruit_NeoPixel4showEv>
    }
}  
 80a0162:	b003      	add	sp, #12
 80a0164:	bd30      	pop	{r4, r5, pc}
 80a0166:	bf00      	nop
 80a0168:	080a2770 	.word	0x080a2770
 80a016c:	080a2776 	.word	0x080a2776
 80a0170:	20000080 	.word	0x20000080
 80a0174:	20000070 	.word	0x20000070
 80a0178:	20000000 	.word	0x20000000

080a017c <_Z15onMasterHandler6StringS_>:

//used where we have a switch that overrides colours and sets a master on/off event
void onMasterHandler(String event, String data) 
{
 80a017c:	b510      	push	{r4, lr}
 80a017e:	460c      	mov	r4, r1
 80a0180:	b088      	sub	sp, #32
 80a0182:	4915      	ldr	r1, [pc, #84]	; (80a01d8 <_Z15onMasterHandler6StringS_+0x5c>)
 80a0184:	4620      	mov	r0, r4
 80a0186:	f001 fe1f 	bl	80a1dc8 <_ZNK6String6equalsEPKc>
    if(data == "MasterOn"){
 80a018a:	b1a0      	cbz	r0, 80a01b6 <_Z15onMasterHandler6StringS_+0x3a>
        overrideDisplay = false;
 80a018c:	4b13      	ldr	r3, [pc, #76]	; (80a01dc <_Z15onMasterHandler6StringS_+0x60>)
 80a018e:	2200      	movs	r2, #0
        onHandler("callIt",memoryState);
 80a0190:	4913      	ldr	r1, [pc, #76]	; (80a01e0 <_Z15onMasterHandler6StringS_+0x64>)
 80a0192:	4668      	mov	r0, sp

//used where we have a switch that overrides colours and sets a master on/off event
void onMasterHandler(String event, String data) 
{
    if(data == "MasterOn"){
        overrideDisplay = false;
 80a0194:	701a      	strb	r2, [r3, #0]
        onHandler("callIt",memoryState);
 80a0196:	f001 fdd9 	bl	80a1d4c <_ZN6StringC1EPK19__FlashStringHelper>
 80a019a:	4912      	ldr	r1, [pc, #72]	; (80a01e4 <_Z15onMasterHandler6StringS_+0x68>)
 80a019c:	a804      	add	r0, sp, #16
 80a019e:	f001 fdf7 	bl	80a1d90 <_ZN6StringC1ERKS_>
 80a01a2:	a904      	add	r1, sp, #16
 80a01a4:	4668      	mov	r0, sp
 80a01a6:	f7ff ffa7 	bl	80a00f8 <_Z9onHandler6StringS_>
 80a01aa:	a804      	add	r0, sp, #16
 80a01ac:	f001 fd87 	bl	80a1cbe <_ZN6StringD1Ev>
 80a01b0:	4668      	mov	r0, sp
 80a01b2:	f001 fd84 	bl	80a1cbe <_ZN6StringD1Ev>
 80a01b6:	490c      	ldr	r1, [pc, #48]	; (80a01e8 <_Z15onMasterHandler6StringS_+0x6c>)
 80a01b8:	4620      	mov	r0, r4
 80a01ba:	f001 fe05 	bl	80a1dc8 <_ZNK6String6equalsEPKc>
    }
    
    if(data == "MasterOff") {
 80a01be:	b140      	cbz	r0, 80a01d2 <_Z15onMasterHandler6StringS_+0x56>
        //clear the colour and update the NeoPixel
        ring.clear();
 80a01c0:	480a      	ldr	r0, [pc, #40]	; (80a01ec <_Z15onMasterHandler6StringS_+0x70>)
 80a01c2:	f001 fa24 	bl	80a160e <_ZN17Adafruit_NeoPixel5clearEv>
        ring.show();   
 80a01c6:	4809      	ldr	r0, [pc, #36]	; (80a01ec <_Z15onMasterHandler6StringS_+0x70>)
 80a01c8:	f000 f912 	bl	80a03f0 <_ZN17Adafruit_NeoPixel4showEv>
        overrideDisplay = true;
 80a01cc:	4b03      	ldr	r3, [pc, #12]	; (80a01dc <_Z15onMasterHandler6StringS_+0x60>)
 80a01ce:	2201      	movs	r2, #1
 80a01d0:	701a      	strb	r2, [r3, #0]
    }
}
 80a01d2:	b008      	add	sp, #32
 80a01d4:	bd10      	pop	{r4, pc}
 80a01d6:	bf00      	nop
 80a01d8:	080a277a 	.word	0x080a277a
 80a01dc:	20000000 	.word	0x20000000
 80a01e0:	080a2783 	.word	0x080a2783
 80a01e4:	20000070 	.word	0x20000070
 80a01e8:	080a278a 	.word	0x080a278a
 80a01ec:	20000080 	.word	0x20000080

080a01f0 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a01f0:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a01f2:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a01f4:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a01f6:	b113      	cbz	r3, 80a01fe <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a01f8:	2203      	movs	r2, #3
 80a01fa:	4601      	mov	r1, r0
 80a01fc:	4798      	blx	r3
    }
 80a01fe:	4620      	mov	r0, r4
 80a0200:	bd10      	pop	{r4, pc}

080a0202 <loop>:

 
void loop() 
{
 80a0202:	4770      	bx	lr

080a0204 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0204:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0206:	2300      	movs	r3, #0
 80a0208:	6083      	str	r3, [r0, #8]
 80a020a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a020c:	4604      	mov	r4, r0
 80a020e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a0210:	b12b      	cbz	r3, 80a021e <_ZNSt8functionIFvPKcS1_EEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0212:	2202      	movs	r2, #2
 80a0214:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0216:	68eb      	ldr	r3, [r5, #12]
 80a0218:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a021a:	68ab      	ldr	r3, [r5, #8]
 80a021c:	60a3      	str	r3, [r4, #8]
	}
    }
 80a021e:	4620      	mov	r0, r4
 80a0220:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0224 <_ZN10CloudClass16subscribe_wiringEPKcSt8functionIFvS1_S1_EE32Spark_Subscription_Scope_TypeDefS1_.isra.3.constprop.12>:
    static ProtocolFacade* sp()
    {
        return spark_protocol_instance();
    }

    bool subscribe_wiring(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope, const char *deviceID = NULL)
 80a0224:	b573      	push	{r0, r1, r4, r5, r6, lr}
    {
#ifdef SPARK_NO_CLOUD
        return false;
#else
        bool success = false;
        if (handler) // if the call-wrapper has wrapped a callable object
 80a0226:	688b      	ldr	r3, [r1, #8]
    static ProtocolFacade* sp()
    {
        return spark_protocol_instance();
    }

    bool subscribe_wiring(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope, const char *deviceID = NULL)
 80a0228:	4605      	mov	r5, r0
 80a022a:	460c      	mov	r4, r1
    {
#ifdef SPARK_NO_CLOUD
        return false;
#else
        bool success = false;
        if (handler) // if the call-wrapper has wrapped a callable object
 80a022c:	b90b      	cbnz	r3, 80a0232 <_ZN10CloudClass16subscribe_wiringEPKcSt8functionIFvS1_S1_EE32Spark_Subscription_Scope_TypeDefS1_.isra.3.constprop.12+0xe>
    bool subscribe_wiring(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope, const char *deviceID = NULL)
    {
#ifdef SPARK_NO_CLOUD
        return false;
#else
        bool success = false;
 80a022e:	2000      	movs	r0, #0
 80a0230:	e010      	b.n	80a0254 <_ZN10CloudClass16subscribe_wiringEPKcSt8functionIFvS1_S1_EE32Spark_Subscription_Scope_TypeDefS1_.isra.3.constprop.12+0x30>
        if (handler) // if the call-wrapper has wrapped a callable object
        {
            auto wrapper = new wiring_event_handler_t(handler);
 80a0232:	2010      	movs	r0, #16
 80a0234:	f7ff ff31 	bl	80a009a <_Znwj>
 80a0238:	4606      	mov	r6, r0
 80a023a:	2800      	cmp	r0, #0
 80a023c:	d0f7      	beq.n	80a022e <_ZN10CloudClass16subscribe_wiringEPKcSt8functionIFvS1_S1_EE32Spark_Subscription_Scope_TypeDefS1_.isra.3.constprop.12+0xa>
 80a023e:	4621      	mov	r1, r4
 80a0240:	f7ff ffe0 	bl	80a0204 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
            if (wrapper) {
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
 80a0244:	2300      	movs	r3, #0
 80a0246:	9301      	str	r3, [sp, #4]
 80a0248:	9300      	str	r3, [sp, #0]
 80a024a:	4632      	mov	r2, r6
 80a024c:	4902      	ldr	r1, [pc, #8]	; (80a0258 <_ZN10CloudClass16subscribe_wiringEPKcSt8functionIFvS1_S1_EE32Spark_Subscription_Scope_TypeDefS1_.isra.3.constprop.12+0x34>)
 80a024e:	4628      	mov	r0, r5
 80a0250:	f001 fb0a 	bl	80a1868 <spark_subscribe>
            }
        }
        return success;
#endif
    }
 80a0254:	b002      	add	sp, #8
 80a0256:	bd70      	pop	{r4, r5, r6, pc}
 80a0258:	080a1969 	.word	0x080a1969

080a025c <setup>:
String memoryState;
bool overrideDisplay = true;


void setup() 
{
 80a025c:	b530      	push	{r4, r5, lr}
    // Start the NeoPixel object
    ring.begin();       
 80a025e:	4c18      	ldr	r4, [pc, #96]	; (80a02c0 <setup+0x64>)
String memoryState;
bool overrideDisplay = true;


void setup() 
{
 80a0260:	b089      	sub	sp, #36	; 0x24
    // Start the NeoPixel object
    ring.begin();       
 80a0262:	4620      	mov	r0, r4
 80a0264:	f000 f88e 	bl	80a0384 <_ZN17Adafruit_NeoPixel5beginEv>
    ring.setBrightness(5);                      	// Turn the brightness way down!!!
 80a0268:	4620      	mov	r0, r4
 80a026a:	2105      	movs	r1, #5
 80a026c:	f001 f9a9 	bl	80a15c2 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0270:	4d14      	ldr	r5, [pc, #80]	; (80a02c4 <setup+0x68>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80a0272:	4b15      	ldr	r3, [pc, #84]	; (80a02c8 <setup+0x6c>)

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
 80a0274:	4c15      	ldr	r4, [pc, #84]	; (80a02cc <setup+0x70>)
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, MY_DEVICES, deviceID, NULL), false);
    }

    bool subscribe(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return subscribe_wiring(eventName, handler, scope);
 80a0276:	4669      	mov	r1, sp
 80a0278:	a804      	add	r0, sp, #16
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80a027a:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a027c:	9503      	str	r5, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a027e:	9402      	str	r4, [sp, #8]
 80a0280:	f7ff ffc0 	bl	80a0204 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
 80a0284:	a904      	add	r1, sp, #16
 80a0286:	4812      	ldr	r0, [pc, #72]	; (80a02d0 <setup+0x74>)
 80a0288:	f7ff ffcc 	bl	80a0224 <_ZN10CloudClass16subscribe_wiringEPKcSt8functionIFvS1_S1_EE32Spark_Subscription_Scope_TypeDefS1_.isra.3.constprop.12>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a028c:	a804      	add	r0, sp, #16
 80a028e:	f7ff ffaf 	bl	80a01f0 <_ZNSt14_Function_baseD1Ev>
 80a0292:	4668      	mov	r0, sp
 80a0294:	f7ff ffac 	bl	80a01f0 <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80a0298:	4b0e      	ldr	r3, [pc, #56]	; (80a02d4 <setup+0x78>)
 80a029a:	4669      	mov	r1, sp
 80a029c:	a804      	add	r0, sp, #16
 80a029e:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a02a0:	9503      	str	r5, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a02a2:	9402      	str	r4, [sp, #8]
 80a02a4:	f7ff ffae 	bl	80a0204 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
 80a02a8:	a904      	add	r1, sp, #16
 80a02aa:	480b      	ldr	r0, [pc, #44]	; (80a02d8 <setup+0x7c>)
 80a02ac:	f7ff ffba 	bl	80a0224 <_ZN10CloudClass16subscribe_wiringEPKcSt8functionIFvS1_S1_EE32Spark_Subscription_Scope_TypeDefS1_.isra.3.constprop.12>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a02b0:	a804      	add	r0, sp, #16
 80a02b2:	f7ff ff9d 	bl	80a01f0 <_ZNSt14_Function_baseD1Ev>
 80a02b6:	4668      	mov	r0, sp
 80a02b8:	f7ff ff9a 	bl	80a01f0 <_ZNSt14_Function_baseD1Ev>
    Particle.subscribe("LedColor", onHandler, MY_DEVICES);
    Particle.subscribe("MasterPower", onMasterHandler, MY_DEVICES);
}
 80a02bc:	b009      	add	sp, #36	; 0x24
 80a02be:	bd30      	pop	{r4, r5, pc}
 80a02c0:	20000080 	.word	0x20000080
 80a02c4:	080a00cb 	.word	0x080a00cb
 80a02c8:	080a00f9 	.word	0x080a00f9
 80a02cc:	080a00b3 	.word	0x080a00b3
 80a02d0:	080a2794 	.word	0x080a2794
 80a02d4:	080a017d 	.word	0x080a017d
 80a02d8:	080a279d 	.word	0x080a279d

080a02dc <_GLOBAL__sub_I_ring>:

 
void loop() 
{
    //nothing needed here as it only acts on events it has suscribed to      
 80a02dc:	b538      	push	{r3, r4, r5, lr}
 
#define PIXEL_COUNT 12// 24 Pixels on our ring
#define PIXEL_PIN D5						// Ring uses D5 as default pin
#define PIXEL_TYPE WS2812B					// Ring uses WS2812 Pixels
 
Adafruit_NeoPixel ring(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);	// Create our “ring” object	
 80a02de:	4c0d      	ldr	r4, [pc, #52]	; (80a0314 <_GLOBAL__sub_I_ring+0x38>)
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a02e0:	f001 f9c4 	bl	80a166c <HAL_Pin_Map>
 80a02e4:	4d0c      	ldr	r5, [pc, #48]	; (80a0318 <_GLOBAL__sub_I_ring+0x3c>)
 80a02e6:	2302      	movs	r3, #2
 80a02e8:	2205      	movs	r2, #5
 80a02ea:	210c      	movs	r1, #12
 80a02ec:	4620      	mov	r0, r4
 80a02ee:	f000 f86e 	bl	80a03ce <_ZN17Adafruit_NeoPixelC1Ethh>
 80a02f2:	4620      	mov	r0, r4
 
int pixelCounter = 0;  // Can be used for choosing a specific LED in the ring
int toggle = 0;
String memoryState;
 80a02f4:	4c09      	ldr	r4, [pc, #36]	; (80a031c <_GLOBAL__sub_I_ring+0x40>)
 
#define PIXEL_COUNT 12// 24 Pixels on our ring
#define PIXEL_PIN D5						// Ring uses D5 as default pin
#define PIXEL_TYPE WS2812B					// Ring uses WS2812 Pixels
 
Adafruit_NeoPixel ring(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);	// Create our “ring” object	
 80a02f6:	462a      	mov	r2, r5
 80a02f8:	4909      	ldr	r1, [pc, #36]	; (80a0320 <_GLOBAL__sub_I_ring+0x44>)
 80a02fa:	f002 f881 	bl	80a2400 <__aeabi_atexit>
 
int pixelCounter = 0;  // Can be used for choosing a specific LED in the ring
int toggle = 0;
String memoryState;
 80a02fe:	4909      	ldr	r1, [pc, #36]	; (80a0324 <_GLOBAL__sub_I_ring+0x48>)
 80a0300:	4620      	mov	r0, r4
 80a0302:	f001 fd23 	bl	80a1d4c <_ZN6StringC1EPK19__FlashStringHelper>
 80a0306:	462a      	mov	r2, r5
 80a0308:	4620      	mov	r0, r4

 
void loop() 
{
    //nothing needed here as it only acts on events it has suscribed to      
 80a030a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 
Adafruit_NeoPixel ring(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);	// Create our “ring” object	
 
int pixelCounter = 0;  // Can be used for choosing a specific LED in the ring
int toggle = 0;
String memoryState;
 80a030e:	4906      	ldr	r1, [pc, #24]	; (80a0328 <_GLOBAL__sub_I_ring+0x4c>)
 80a0310:	f002 b876 	b.w	80a2400 <__aeabi_atexit>
 80a0314:	20000080 	.word	0x20000080
 80a0318:	2000006c 	.word	0x2000006c
 80a031c:	20000070 	.word	0x20000070
 80a0320:	080a0331 	.word	0x080a0331
 80a0324:	080a28a6 	.word	0x080a28a6
 80a0328:	080a1cbf 	.word	0x080a1cbf

080a032c <micros>:

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a032c:	f001 b98e 	b.w	80a164c <HAL_Timer_Get_Micro_Seconds>

080a0330 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a0330:	b510      	push	{r4, lr}
 80a0332:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a0334:	68c0      	ldr	r0, [r0, #12]
 80a0336:	b108      	cbz	r0, 80a033c <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a0338:	f001 fafe 	bl	80a1938 <free>
  if (begun) pinMode(pin, INPUT);
 80a033c:	7823      	ldrb	r3, [r4, #0]
 80a033e:	b11b      	cbz	r3, 80a0348 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a0340:	2100      	movs	r1, #0
 80a0342:	79e0      	ldrb	r0, [r4, #7]
 80a0344:	f001 ffd8 	bl	80a22f8 <pinMode>
}
 80a0348:	4620      	mov	r0, r4
 80a034a:	bd10      	pop	{r4, pc}

080a034c <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a034c:	b538      	push	{r3, r4, r5, lr}
 80a034e:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a0350:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a0352:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a0354:	b108      	cbz	r0, 80a035a <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a0356:	f001 faef 	bl	80a1938 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a035a:	79a3      	ldrb	r3, [r4, #6]
 80a035c:	2b06      	cmp	r3, #6
 80a035e:	bf0c      	ite	eq
 80a0360:	2004      	moveq	r0, #4
 80a0362:	2003      	movne	r0, #3
 80a0364:	4368      	muls	r0, r5
 80a0366:	b280      	uxth	r0, r0
 80a0368:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a036a:	f001 fadd 	bl	80a1928 <malloc>
 80a036e:	60e0      	str	r0, [r4, #12]
 80a0370:	b128      	cbz	r0, 80a037e <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a0372:	88a2      	ldrh	r2, [r4, #4]
 80a0374:	2100      	movs	r1, #0
 80a0376:	f002 f9ae 	bl	80a26d6 <memset>
    numLEDs = n;
 80a037a:	8065      	strh	r5, [r4, #2]
 80a037c:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
 80a037e:	80a0      	strh	r0, [r4, #4]
 80a0380:	8060      	strh	r0, [r4, #2]
 80a0382:	bd38      	pop	{r3, r4, r5, pc}

080a0384 <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
 80a0384:	b510      	push	{r4, lr}
 80a0386:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a0388:	2101      	movs	r1, #1
 80a038a:	79c0      	ldrb	r0, [r0, #7]
 80a038c:	f001 ffb4 	bl	80a22f8 <pinMode>
  digitalWrite(pin, LOW);
 80a0390:	2100      	movs	r1, #0
 80a0392:	79e0      	ldrb	r0, [r4, #7]
 80a0394:	f001 ffc1 	bl	80a231a <digitalWrite>
  begun = true;
 80a0398:	2301      	movs	r3, #1
 80a039a:	7023      	strb	r3, [r4, #0]
 80a039c:	bd10      	pop	{r4, pc}

080a039e <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a039e:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a03a0:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a03a2:	4605      	mov	r5, r0
 80a03a4:	460c      	mov	r4, r1
    if (begun) {
 80a03a6:	b11b      	cbz	r3, 80a03b0 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a03a8:	2100      	movs	r1, #0
 80a03aa:	79c0      	ldrb	r0, [r0, #7]
 80a03ac:	f001 ffa4 	bl	80a22f8 <pinMode>
    }
    pin = p;
    if (begun) {
 80a03b0:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
 80a03b2:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a03b4:	b153      	cbz	r3, 80a03cc <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a03b6:	b2a4      	uxth	r4, r4
 80a03b8:	4620      	mov	r0, r4
 80a03ba:	2101      	movs	r1, #1
 80a03bc:	f001 ff9c 	bl	80a22f8 <pinMode>
        digitalWrite(p, LOW);
 80a03c0:	4620      	mov	r0, r4
    }
}
 80a03c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
 80a03c6:	2100      	movs	r1, #0
 80a03c8:	f001 bfa7 	b.w	80a231a <digitalWrite>
 80a03cc:	bd38      	pop	{r3, r4, r5, pc}

080a03ce <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a03ce:	b570      	push	{r4, r5, r6, lr}
 80a03d0:	4604      	mov	r4, r0
 80a03d2:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a03d4:	2500      	movs	r5, #0
 80a03d6:	7183      	strb	r3, [r0, #6]
 80a03d8:	7005      	strb	r5, [r0, #0]
 80a03da:	7205      	strb	r5, [r0, #8]
 80a03dc:	60c5      	str	r5, [r0, #12]
 80a03de:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
 80a03e0:	f7ff ffb4 	bl	80a034c <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a03e4:	4620      	mov	r0, r4
 80a03e6:	4631      	mov	r1, r6
 80a03e8:	f7ff ffd9 	bl	80a039e <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a03ec:	4620      	mov	r0, r4
 80a03ee:	bd70      	pop	{r4, r5, r6, pc}

080a03f0 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a03f0:	68c3      	ldr	r3, [r0, #12]
 80a03f2:	2b00      	cmp	r3, #0
 80a03f4:	f000 858e 	beq.w	80a0f14 <_ZN17Adafruit_NeoPixel4showEv+0xb24>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
 80a03f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a03fc:	4604      	mov	r4, r0
 80a03fe:	7983      	ldrb	r3, [r0, #6]
 80a0400:	b086      	sub	sp, #24
 80a0402:	3b02      	subs	r3, #2
 80a0404:	b2db      	uxtb	r3, r3
 80a0406:	2b04      	cmp	r3, #4
 80a0408:	bf96      	itet	ls
 80a040a:	4a29      	ldrls	r2, [pc, #164]	; (80a04b0 <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a040c:	2532      	movhi	r5, #50	; 0x32
 80a040e:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a0412:	f7ff ff8b 	bl	80a032c <micros>
 80a0416:	6923      	ldr	r3, [r4, #16]
 80a0418:	1ac0      	subs	r0, r0, r3
 80a041a:	42a8      	cmp	r0, r5
 80a041c:	d3f9      	bcc.n	80a0412 <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a041e:	b672      	cpsid	i
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0420:	79a1      	ldrb	r1, [r4, #6]
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0422:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0424:	2902      	cmp	r1, #2
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0426:	f8ad 300a 	strh.w	r3, [sp, #10]
  volatile uint8_t
    j,              // 8-bit inner loop counter
   *ptr = pixels,   // Pointer to next byte
 80a042a:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a042e:	f000 8272 	beq.w	80a0916 <_ZN17Adafruit_NeoPixel4showEv+0x526>
 80a0432:	2907      	cmp	r1, #7
 80a0434:	f000 826f 	beq.w	80a0916 <_ZN17Adafruit_NeoPixel4showEv+0x526>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a0438:	2906      	cmp	r1, #6
 80a043a:	f000 8432 	beq.w	80a0ca2 <_ZN17Adafruit_NeoPixel4showEv+0x8b2>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a043e:	2905      	cmp	r1, #5
 80a0440:	f000 83ab 	beq.w	80a0b9a <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
 80a0444:	2908      	cmp	r1, #8
 80a0446:	f000 83a8 	beq.w	80a0b9a <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a044a:	2900      	cmp	r1, #0
 80a044c:	f040 8563 	bne.w	80a0f16 <_ZN17Adafruit_NeoPixel4showEv+0xb26>
 80a0450:	4a18      	ldr	r2, [pc, #96]	; (80a04b4 <_ZN17Adafruit_NeoPixel4showEv+0xc4>)
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0452:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0456:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a045a:	b29b      	uxth	r3, r3
 80a045c:	2b00      	cmp	r3, #0
 80a045e:	f000 8395 	beq.w	80a0b8c <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0462:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0464:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0468:	f10e 0503 	add.w	r5, lr, #3
 80a046c:	3b03      	subs	r3, #3
 80a046e:	b29b      	uxth	r3, r3
 80a0470:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0474:	f89e 3000 	ldrb.w	r3, [lr]
 80a0478:	b2db      	uxtb	r3, r3
 80a047a:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a047e:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0482:	b2db      	uxtb	r3, r3
 80a0484:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0488:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a048c:	b2db      	uxtb	r3, r3
 80a048e:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0492:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a0496:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a049a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a049e:	021b      	lsls	r3, r3, #8
 80a04a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a04a4:	4303      	orrs	r3, r0
 80a04a6:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a04a8:	f88d 1005 	strb.w	r1, [sp, #5]
 80a04ac:	e11b      	b.n	80a06e6 <_ZN17Adafruit_NeoPixel4showEv+0x2f6>
 80a04ae:	bf00      	nop
 80a04b0:	080a27ac 	.word	0x080a27ac
 80a04b4:	20000094 	.word	0x20000094
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a04b8:	4600      	mov	r0, r0
 80a04ba:	bf00      	nop
 80a04bc:	bf00      	nop
 80a04be:	bf00      	nop
 80a04c0:	bf00      	nop
 80a04c2:	bf00      	nop
 80a04c4:	bf00      	nop
 80a04c6:	bf00      	nop
 80a04c8:	bf00      	nop
 80a04ca:	bf00      	nop
 80a04cc:	bf00      	nop
 80a04ce:	bf00      	nop
 80a04d0:	bf00      	nop
 80a04d2:	bf00      	nop
 80a04d4:	bf00      	nop
 80a04d6:	bf00      	nop
 80a04d8:	bf00      	nop
 80a04da:	bf00      	nop
 80a04dc:	bf00      	nop
 80a04de:	bf00      	nop
 80a04e0:	bf00      	nop
 80a04e2:	bf00      	nop
 80a04e4:	bf00      	nop
 80a04e6:	bf00      	nop
 80a04e8:	bf00      	nop
 80a04ea:	bf00      	nop
 80a04ec:	bf00      	nop
 80a04ee:	bf00      	nop
 80a04f0:	bf00      	nop
 80a04f2:	bf00      	nop
 80a04f4:	bf00      	nop
 80a04f6:	bf00      	nop
 80a04f8:	bf00      	nop
 80a04fa:	bf00      	nop
 80a04fc:	bf00      	nop
 80a04fe:	bf00      	nop
 80a0500:	bf00      	nop
 80a0502:	bf00      	nop
 80a0504:	bf00      	nop
 80a0506:	bf00      	nop
 80a0508:	bf00      	nop
 80a050a:	bf00      	nop
 80a050c:	bf00      	nop
 80a050e:	bf00      	nop
 80a0510:	bf00      	nop
 80a0512:	bf00      	nop
 80a0514:	bf00      	nop
 80a0516:	bf00      	nop
 80a0518:	bf00      	nop
 80a051a:	bf00      	nop
 80a051c:	bf00      	nop
 80a051e:	bf00      	nop
 80a0520:	bf00      	nop
 80a0522:	bf00      	nop
 80a0524:	bf00      	nop
 80a0526:	bf00      	nop
 80a0528:	bf00      	nop
 80a052a:	bf00      	nop
 80a052c:	bf00      	nop
 80a052e:	bf00      	nop
 80a0530:	bf00      	nop
 80a0532:	bf00      	nop
 80a0534:	bf00      	nop
 80a0536:	bf00      	nop
 80a0538:	bf00      	nop
 80a053a:	bf00      	nop
 80a053c:	bf00      	nop
 80a053e:	bf00      	nop
 80a0540:	bf00      	nop
 80a0542:	bf00      	nop
 80a0544:	bf00      	nop
 80a0546:	bf00      	nop
 80a0548:	bf00      	nop
 80a054a:	bf00      	nop
 80a054c:	bf00      	nop
 80a054e:	bf00      	nop
 80a0550:	bf00      	nop
 80a0552:	bf00      	nop
 80a0554:	bf00      	nop
 80a0556:	bf00      	nop
 80a0558:	bf00      	nop
 80a055a:	bf00      	nop
 80a055c:	bf00      	nop
 80a055e:	bf00      	nop
 80a0560:	bf00      	nop
 80a0562:	bf00      	nop
 80a0564:	bf00      	nop
 80a0566:	bf00      	nop
 80a0568:	bf00      	nop
 80a056a:	bf00      	nop
 80a056c:	bf00      	nop
 80a056e:	bf00      	nop
 80a0570:	bf00      	nop
 80a0572:	bf00      	nop
 80a0574:	bf00      	nop
 80a0576:	bf00      	nop
 80a0578:	bf00      	nop
 80a057a:	bf00      	nop
 80a057c:	bf00      	nop
 80a057e:	bf00      	nop
 80a0580:	bf00      	nop
 80a0582:	bf00      	nop
 80a0584:	bf00      	nop
 80a0586:	bf00      	nop
 80a0588:	bf00      	nop
 80a058a:	bf00      	nop
 80a058c:	bf00      	nop
 80a058e:	bf00      	nop
 80a0590:	bf00      	nop
 80a0592:	bf00      	nop
 80a0594:	bf00      	nop
 80a0596:	bf00      	nop
 80a0598:	bf00      	nop
 80a059a:	bf00      	nop
 80a059c:	bf00      	nop
 80a059e:	bf00      	nop
 80a05a0:	bf00      	nop
 80a05a2:	bf00      	nop
 80a05a4:	bf00      	nop
 80a05a6:	bf00      	nop
 80a05a8:	bf00      	nop
 80a05aa:	bf00      	nop
 80a05ac:	bf00      	nop
 80a05ae:	bf00      	nop
 80a05b0:	bf00      	nop
 80a05b2:	bf00      	nop
 80a05b4:	bf00      	nop
 80a05b6:	bf00      	nop
 80a05b8:	bf00      	nop
 80a05ba:	bf00      	nop
 80a05bc:	bf00      	nop
 80a05be:	bf00      	nop
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a05c0:	79e3      	ldrb	r3, [r4, #7]
 80a05c2:	6810      	ldr	r0, [r2, #0]
 80a05c4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a05c8:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a05cc:	88bf      	ldrh	r7, [r7, #4]
 80a05ce:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a05d2:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a05d4:	4600      	mov	r0, r0
 80a05d6:	bf00      	nop
 80a05d8:	bf00      	nop
 80a05da:	bf00      	nop
 80a05dc:	bf00      	nop
 80a05de:	bf00      	nop
 80a05e0:	bf00      	nop
 80a05e2:	bf00      	nop
 80a05e4:	bf00      	nop
 80a05e6:	bf00      	nop
 80a05e8:	bf00      	nop
 80a05ea:	bf00      	nop
 80a05ec:	bf00      	nop
 80a05ee:	bf00      	nop
 80a05f0:	bf00      	nop
 80a05f2:	bf00      	nop
 80a05f4:	bf00      	nop
 80a05f6:	bf00      	nop
 80a05f8:	bf00      	nop
 80a05fa:	bf00      	nop
 80a05fc:	bf00      	nop
 80a05fe:	bf00      	nop
 80a0600:	bf00      	nop
 80a0602:	bf00      	nop
 80a0604:	bf00      	nop
 80a0606:	bf00      	nop
 80a0608:	bf00      	nop
 80a060a:	bf00      	nop
 80a060c:	bf00      	nop
 80a060e:	bf00      	nop
 80a0610:	bf00      	nop
 80a0612:	bf00      	nop
 80a0614:	bf00      	nop
 80a0616:	bf00      	nop
 80a0618:	bf00      	nop
 80a061a:	bf00      	nop
 80a061c:	bf00      	nop
 80a061e:	bf00      	nop
 80a0620:	bf00      	nop
 80a0622:	bf00      	nop
 80a0624:	bf00      	nop
 80a0626:	bf00      	nop
 80a0628:	bf00      	nop
 80a062a:	bf00      	nop
 80a062c:	bf00      	nop
 80a062e:	bf00      	nop
 80a0630:	bf00      	nop
 80a0632:	bf00      	nop
 80a0634:	bf00      	nop
 80a0636:	bf00      	nop
 80a0638:	bf00      	nop
 80a063a:	bf00      	nop
 80a063c:	bf00      	nop
 80a063e:	bf00      	nop
 80a0640:	bf00      	nop
 80a0642:	bf00      	nop
 80a0644:	bf00      	nop
 80a0646:	bf00      	nop
 80a0648:	bf00      	nop
 80a064a:	bf00      	nop
 80a064c:	bf00      	nop
 80a064e:	bf00      	nop
 80a0650:	bf00      	nop
 80a0652:	bf00      	nop
 80a0654:	bf00      	nop
 80a0656:	bf00      	nop
 80a0658:	bf00      	nop
 80a065a:	bf00      	nop
 80a065c:	bf00      	nop
 80a065e:	bf00      	nop
 80a0660:	bf00      	nop
 80a0662:	bf00      	nop
 80a0664:	bf00      	nop
 80a0666:	bf00      	nop
 80a0668:	bf00      	nop
 80a066a:	bf00      	nop
 80a066c:	bf00      	nop
 80a066e:	bf00      	nop
 80a0670:	bf00      	nop
 80a0672:	bf00      	nop
 80a0674:	bf00      	nop
 80a0676:	bf00      	nop
 80a0678:	bf00      	nop
 80a067a:	bf00      	nop
 80a067c:	bf00      	nop
 80a067e:	bf00      	nop
 80a0680:	bf00      	nop
 80a0682:	bf00      	nop
 80a0684:	bf00      	nop
 80a0686:	bf00      	nop
 80a0688:	bf00      	nop
 80a068a:	bf00      	nop
 80a068c:	bf00      	nop
 80a068e:	bf00      	nop
 80a0690:	bf00      	nop
 80a0692:	bf00      	nop
 80a0694:	bf00      	nop
 80a0696:	bf00      	nop
 80a0698:	bf00      	nop
 80a069a:	bf00      	nop
 80a069c:	bf00      	nop
 80a069e:	bf00      	nop
 80a06a0:	bf00      	nop
 80a06a2:	bf00      	nop
 80a06a4:	bf00      	nop
 80a06a6:	bf00      	nop
 80a06a8:	bf00      	nop
 80a06aa:	bf00      	nop
 80a06ac:	bf00      	nop
 80a06ae:	bf00      	nop
 80a06b0:	bf00      	nop
 80a06b2:	bf00      	nop
 80a06b4:	bf00      	nop
 80a06b6:	bf00      	nop
 80a06b8:	bf00      	nop
 80a06ba:	bf00      	nop
 80a06bc:	bf00      	nop
 80a06be:	bf00      	nop
 80a06c0:	bf00      	nop
 80a06c2:	bf00      	nop
 80a06c4:	bf00      	nop
 80a06c6:	bf00      	nop
 80a06c8:	bf00      	nop
 80a06ca:	bf00      	nop
 80a06cc:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a06ce:	9b04      	ldr	r3, [sp, #16]
 80a06d0:	085b      	lsrs	r3, r3, #1
 80a06d2:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a06d4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a06d8:	3301      	adds	r3, #1
 80a06da:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a06dc:	2b17      	cmp	r3, #23
 80a06de:	f88d 3005 	strb.w	r3, [sp, #5]
 80a06e2:	f200 82db 	bhi.w	80a0c9c <_ZN17Adafruit_NeoPixel4showEv+0x8ac>
        pinSet(pin, HIGH); // HIGH
 80a06e6:	79e3      	ldrb	r3, [r4, #7]
 80a06e8:	6810      	ldr	r0, [r2, #0]
 80a06ea:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a06ee:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a06f2:	88bf      	ldrh	r7, [r7, #4]
 80a06f4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a06f8:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a06fa:	9803      	ldr	r0, [sp, #12]
 80a06fc:	9b04      	ldr	r3, [sp, #16]
 80a06fe:	4218      	tst	r0, r3
 80a0700:	f47f aeda 	bne.w	80a04b8 <_ZN17Adafruit_NeoPixel4showEv+0xc8>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            "nop" "\n\t" "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a0704:	4600      	mov	r0, r0
 80a0706:	bf00      	nop
 80a0708:	bf00      	nop
 80a070a:	bf00      	nop
 80a070c:	bf00      	nop
 80a070e:	bf00      	nop
 80a0710:	bf00      	nop
 80a0712:	bf00      	nop
 80a0714:	bf00      	nop
 80a0716:	bf00      	nop
 80a0718:	bf00      	nop
 80a071a:	bf00      	nop
 80a071c:	bf00      	nop
 80a071e:	bf00      	nop
 80a0720:	bf00      	nop
 80a0722:	bf00      	nop
 80a0724:	bf00      	nop
 80a0726:	bf00      	nop
 80a0728:	bf00      	nop
 80a072a:	bf00      	nop
 80a072c:	bf00      	nop
 80a072e:	bf00      	nop
 80a0730:	bf00      	nop
 80a0732:	bf00      	nop
 80a0734:	bf00      	nop
 80a0736:	bf00      	nop
 80a0738:	bf00      	nop
 80a073a:	bf00      	nop
 80a073c:	bf00      	nop
 80a073e:	bf00      	nop
 80a0740:	bf00      	nop
 80a0742:	bf00      	nop
 80a0744:	bf00      	nop
 80a0746:	bf00      	nop
 80a0748:	bf00      	nop
 80a074a:	bf00      	nop
 80a074c:	bf00      	nop
 80a074e:	bf00      	nop
 80a0750:	bf00      	nop
 80a0752:	bf00      	nop
 80a0754:	bf00      	nop
          // WS2811 spec             2.000us LOW
          // Adafruit on Arduino    (meas. 2.000us)
          // This lib on Spark Core (meas. 2.000us)
          // This lib on Photon     (meas. 2.000us)
          pinSet(pin, LOW); // LOW
 80a0756:	79e3      	ldrb	r3, [r4, #7]
 80a0758:	6810      	ldr	r0, [r2, #0]
 80a075a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a075e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0762:	88bf      	ldrh	r7, [r7, #4]
 80a0764:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0768:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a076a:	4600      	mov	r0, r0
 80a076c:	bf00      	nop
 80a076e:	bf00      	nop
 80a0770:	bf00      	nop
 80a0772:	bf00      	nop
 80a0774:	bf00      	nop
 80a0776:	bf00      	nop
 80a0778:	bf00      	nop
 80a077a:	bf00      	nop
 80a077c:	bf00      	nop
 80a077e:	bf00      	nop
 80a0780:	bf00      	nop
 80a0782:	bf00      	nop
 80a0784:	bf00      	nop
 80a0786:	bf00      	nop
 80a0788:	bf00      	nop
 80a078a:	bf00      	nop
 80a078c:	bf00      	nop
 80a078e:	bf00      	nop
 80a0790:	bf00      	nop
 80a0792:	bf00      	nop
 80a0794:	bf00      	nop
 80a0796:	bf00      	nop
 80a0798:	bf00      	nop
 80a079a:	bf00      	nop
 80a079c:	bf00      	nop
 80a079e:	bf00      	nop
 80a07a0:	bf00      	nop
 80a07a2:	bf00      	nop
 80a07a4:	bf00      	nop
 80a07a6:	bf00      	nop
 80a07a8:	bf00      	nop
 80a07aa:	bf00      	nop
 80a07ac:	bf00      	nop
 80a07ae:	bf00      	nop
 80a07b0:	bf00      	nop
 80a07b2:	bf00      	nop
 80a07b4:	bf00      	nop
 80a07b6:	bf00      	nop
 80a07b8:	bf00      	nop
 80a07ba:	bf00      	nop
 80a07bc:	bf00      	nop
 80a07be:	bf00      	nop
 80a07c0:	bf00      	nop
 80a07c2:	bf00      	nop
 80a07c4:	bf00      	nop
 80a07c6:	bf00      	nop
 80a07c8:	bf00      	nop
 80a07ca:	bf00      	nop
 80a07cc:	bf00      	nop
 80a07ce:	bf00      	nop
 80a07d0:	bf00      	nop
 80a07d2:	bf00      	nop
 80a07d4:	bf00      	nop
 80a07d6:	bf00      	nop
 80a07d8:	bf00      	nop
 80a07da:	bf00      	nop
 80a07dc:	bf00      	nop
 80a07de:	bf00      	nop
 80a07e0:	bf00      	nop
 80a07e2:	bf00      	nop
 80a07e4:	bf00      	nop
 80a07e6:	bf00      	nop
 80a07e8:	bf00      	nop
 80a07ea:	bf00      	nop
 80a07ec:	bf00      	nop
 80a07ee:	bf00      	nop
 80a07f0:	bf00      	nop
 80a07f2:	bf00      	nop
 80a07f4:	bf00      	nop
 80a07f6:	bf00      	nop
 80a07f8:	bf00      	nop
 80a07fa:	bf00      	nop
 80a07fc:	bf00      	nop
 80a07fe:	bf00      	nop
 80a0800:	bf00      	nop
 80a0802:	bf00      	nop
 80a0804:	bf00      	nop
 80a0806:	bf00      	nop
 80a0808:	bf00      	nop
 80a080a:	bf00      	nop
 80a080c:	bf00      	nop
 80a080e:	bf00      	nop
 80a0810:	bf00      	nop
 80a0812:	bf00      	nop
 80a0814:	bf00      	nop
 80a0816:	bf00      	nop
 80a0818:	bf00      	nop
 80a081a:	bf00      	nop
 80a081c:	bf00      	nop
 80a081e:	bf00      	nop
 80a0820:	bf00      	nop
 80a0822:	bf00      	nop
 80a0824:	bf00      	nop
 80a0826:	bf00      	nop
 80a0828:	bf00      	nop
 80a082a:	bf00      	nop
 80a082c:	bf00      	nop
 80a082e:	bf00      	nop
 80a0830:	bf00      	nop
 80a0832:	bf00      	nop
 80a0834:	bf00      	nop
 80a0836:	bf00      	nop
 80a0838:	bf00      	nop
 80a083a:	bf00      	nop
 80a083c:	bf00      	nop
 80a083e:	bf00      	nop
 80a0840:	bf00      	nop
 80a0842:	bf00      	nop
 80a0844:	bf00      	nop
 80a0846:	bf00      	nop
 80a0848:	bf00      	nop
 80a084a:	bf00      	nop
 80a084c:	bf00      	nop
 80a084e:	bf00      	nop
 80a0850:	bf00      	nop
 80a0852:	bf00      	nop
 80a0854:	bf00      	nop
 80a0856:	bf00      	nop
 80a0858:	bf00      	nop
 80a085a:	bf00      	nop
 80a085c:	bf00      	nop
 80a085e:	bf00      	nop
 80a0860:	bf00      	nop
 80a0862:	bf00      	nop
 80a0864:	bf00      	nop
 80a0866:	bf00      	nop
 80a0868:	bf00      	nop
 80a086a:	bf00      	nop
 80a086c:	bf00      	nop
 80a086e:	bf00      	nop
 80a0870:	bf00      	nop
 80a0872:	bf00      	nop
 80a0874:	bf00      	nop
 80a0876:	bf00      	nop
 80a0878:	bf00      	nop
 80a087a:	bf00      	nop
 80a087c:	bf00      	nop
 80a087e:	bf00      	nop
 80a0880:	bf00      	nop
 80a0882:	bf00      	nop
 80a0884:	bf00      	nop
 80a0886:	bf00      	nop
 80a0888:	bf00      	nop
 80a088a:	bf00      	nop
 80a088c:	bf00      	nop
 80a088e:	bf00      	nop
 80a0890:	bf00      	nop
 80a0892:	bf00      	nop
 80a0894:	bf00      	nop
 80a0896:	bf00      	nop
 80a0898:	bf00      	nop
 80a089a:	bf00      	nop
 80a089c:	bf00      	nop
 80a089e:	bf00      	nop
 80a08a0:	bf00      	nop
 80a08a2:	bf00      	nop
 80a08a4:	bf00      	nop
 80a08a6:	bf00      	nop
 80a08a8:	bf00      	nop
 80a08aa:	bf00      	nop
 80a08ac:	bf00      	nop
 80a08ae:	bf00      	nop
 80a08b0:	bf00      	nop
 80a08b2:	bf00      	nop
 80a08b4:	bf00      	nop
 80a08b6:	bf00      	nop
 80a08b8:	bf00      	nop
 80a08ba:	bf00      	nop
 80a08bc:	bf00      	nop
 80a08be:	bf00      	nop
 80a08c0:	bf00      	nop
 80a08c2:	bf00      	nop
 80a08c4:	bf00      	nop
 80a08c6:	bf00      	nop
 80a08c8:	bf00      	nop
 80a08ca:	bf00      	nop
 80a08cc:	bf00      	nop
 80a08ce:	bf00      	nop
 80a08d0:	bf00      	nop
 80a08d2:	bf00      	nop
 80a08d4:	bf00      	nop
 80a08d6:	bf00      	nop
 80a08d8:	bf00      	nop
 80a08da:	bf00      	nop
 80a08dc:	bf00      	nop
 80a08de:	bf00      	nop
 80a08e0:	bf00      	nop
 80a08e2:	bf00      	nop
 80a08e4:	bf00      	nop
 80a08e6:	bf00      	nop
 80a08e8:	bf00      	nop
 80a08ea:	bf00      	nop
 80a08ec:	bf00      	nop
 80a08ee:	bf00      	nop
 80a08f0:	bf00      	nop
 80a08f2:	bf00      	nop
 80a08f4:	bf00      	nop
 80a08f6:	bf00      	nop
 80a08f8:	bf00      	nop
 80a08fa:	bf00      	nop
 80a08fc:	bf00      	nop
 80a08fe:	bf00      	nop
 80a0900:	bf00      	nop
 80a0902:	bf00      	nop
 80a0904:	bf00      	nop
 80a0906:	bf00      	nop
 80a0908:	bf00      	nop
 80a090a:	bf00      	nop
 80a090c:	bf00      	nop
 80a090e:	bf00      	nop
 80a0910:	bf00      	nop
 80a0912:	bf00      	nop
 80a0914:	e6db      	b.n	80a06ce <_ZN17Adafruit_NeoPixel4showEv+0x2de>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0916:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a091a:	4a17      	ldr	r2, [pc, #92]	; (80a0978 <_ZN17Adafruit_NeoPixel4showEv+0x588>)
 80a091c:	b29b      	uxth	r3, r3
      mask = 0x800000; // reset the mask
 80a091e:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0922:	2600      	movs	r6, #0
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0924:	2b00      	cmp	r3, #0
 80a0926:	f000 8131 	beq.w	80a0b8c <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a092a:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a092c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0930:	f10e 0103 	add.w	r1, lr, #3
 80a0934:	3b03      	subs	r3, #3
 80a0936:	b29b      	uxth	r3, r3
 80a0938:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a093c:	f89e 3000 	ldrb.w	r3, [lr]
 80a0940:	b2db      	uxtb	r3, r3
 80a0942:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0946:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a094a:	b2db      	uxtb	r3, r3
 80a094c:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0950:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0954:	b2db      	uxtb	r3, r3
 80a0956:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a095a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a095e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a0962:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a0966:	0200      	lsls	r0, r0, #8
 80a0968:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80a096c:	433b      	orrs	r3, r7
 80a096e:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0970:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0974:	e080      	b.n	80a0a78 <_ZN17Adafruit_NeoPixel4showEv+0x688>
 80a0976:	bf00      	nop
 80a0978:	20000094 	.word	0x20000094
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a097c:	4600      	mov	r0, r0
 80a097e:	bf00      	nop
 80a0980:	bf00      	nop
 80a0982:	bf00      	nop
 80a0984:	bf00      	nop
 80a0986:	bf00      	nop
 80a0988:	bf00      	nop
 80a098a:	bf00      	nop
 80a098c:	bf00      	nop
 80a098e:	bf00      	nop
 80a0990:	bf00      	nop
 80a0992:	bf00      	nop
 80a0994:	bf00      	nop
 80a0996:	bf00      	nop
 80a0998:	bf00      	nop
 80a099a:	bf00      	nop
 80a099c:	bf00      	nop
 80a099e:	bf00      	nop
 80a09a0:	bf00      	nop
 80a09a2:	bf00      	nop
 80a09a4:	bf00      	nop
 80a09a6:	bf00      	nop
 80a09a8:	bf00      	nop
 80a09aa:	bf00      	nop
 80a09ac:	bf00      	nop
 80a09ae:	bf00      	nop
 80a09b0:	bf00      	nop
 80a09b2:	bf00      	nop
 80a09b4:	bf00      	nop
 80a09b6:	bf00      	nop
 80a09b8:	bf00      	nop
 80a09ba:	bf00      	nop
 80a09bc:	bf00      	nop
 80a09be:	bf00      	nop
 80a09c0:	bf00      	nop
 80a09c2:	bf00      	nop
 80a09c4:	bf00      	nop
 80a09c6:	bf00      	nop
 80a09c8:	bf00      	nop
 80a09ca:	bf00      	nop
 80a09cc:	bf00      	nop
 80a09ce:	bf00      	nop
 80a09d0:	bf00      	nop
 80a09d2:	bf00      	nop
 80a09d4:	bf00      	nop
 80a09d6:	bf00      	nop
 80a09d8:	bf00      	nop
 80a09da:	bf00      	nop
 80a09dc:	bf00      	nop
 80a09de:	bf00      	nop
 80a09e0:	bf00      	nop
 80a09e2:	bf00      	nop
 80a09e4:	bf00      	nop
 80a09e6:	bf00      	nop
 80a09e8:	bf00      	nop
 80a09ea:	bf00      	nop
 80a09ec:	bf00      	nop
 80a09ee:	bf00      	nop
 80a09f0:	bf00      	nop
 80a09f2:	bf00      	nop
 80a09f4:	bf00      	nop
 80a09f6:	bf00      	nop
 80a09f8:	bf00      	nop
 80a09fa:	bf00      	nop
 80a09fc:	bf00      	nop
 80a09fe:	bf00      	nop
 80a0a00:	bf00      	nop
 80a0a02:	bf00      	nop
 80a0a04:	bf00      	nop
 80a0a06:	bf00      	nop
 80a0a08:	bf00      	nop
 80a0a0a:	bf00      	nop
 80a0a0c:	bf00      	nop
 80a0a0e:	bf00      	nop
 80a0a10:	bf00      	nop
 80a0a12:	bf00      	nop
 80a0a14:	bf00      	nop
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 446ns)
          // This lib on Photon     (meas. 434ns)
          pinSet(pin, LOW); // LOW
 80a0a16:	79e3      	ldrb	r3, [r4, #7]
 80a0a18:	6810      	ldr	r0, [r2, #0]
 80a0a1a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0a1e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0a22:	88bf      	ldrh	r7, [r7, #4]
 80a0a24:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0a28:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0a2a:	4600      	mov	r0, r0
 80a0a2c:	bf00      	nop
 80a0a2e:	bf00      	nop
 80a0a30:	bf00      	nop
 80a0a32:	bf00      	nop
 80a0a34:	bf00      	nop
 80a0a36:	bf00      	nop
 80a0a38:	bf00      	nop
 80a0a3a:	bf00      	nop
 80a0a3c:	bf00      	nop
 80a0a3e:	bf00      	nop
 80a0a40:	bf00      	nop
 80a0a42:	bf00      	nop
 80a0a44:	bf00      	nop
 80a0a46:	bf00      	nop
 80a0a48:	bf00      	nop
 80a0a4a:	bf00      	nop
 80a0a4c:	bf00      	nop
 80a0a4e:	bf00      	nop
 80a0a50:	bf00      	nop
 80a0a52:	bf00      	nop
 80a0a54:	bf00      	nop
 80a0a56:	bf00      	nop
 80a0a58:	bf00      	nop
 80a0a5a:	bf00      	nop
 80a0a5c:	bf00      	nop
 80a0a5e:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0a60:	9b04      	ldr	r3, [sp, #16]
 80a0a62:	085b      	lsrs	r3, r3, #1
 80a0a64:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0a66:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0a6a:	3301      	adds	r3, #1
 80a0a6c:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0a6e:	2b17      	cmp	r3, #23
 80a0a70:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0a74:	f200 8083 	bhi.w	80a0b7e <_ZN17Adafruit_NeoPixel4showEv+0x78e>
        pinSet(pin, HIGH); // HIGH
 80a0a78:	79e3      	ldrb	r3, [r4, #7]
 80a0a7a:	6810      	ldr	r0, [r2, #0]
 80a0a7c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0a80:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0a84:	88bf      	ldrh	r7, [r7, #4]
 80a0a86:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0a8a:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0a8c:	9803      	ldr	r0, [sp, #12]
 80a0a8e:	9b04      	ldr	r3, [sp, #16]
 80a0a90:	4218      	tst	r0, r3
 80a0a92:	f47f af73 	bne.w	80a097c <_ZN17Adafruit_NeoPixel4showEv+0x58c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0a96:	4600      	mov	r0, r0
 80a0a98:	bf00      	nop
 80a0a9a:	bf00      	nop
 80a0a9c:	bf00      	nop
 80a0a9e:	bf00      	nop
 80a0aa0:	bf00      	nop
 80a0aa2:	bf00      	nop
 80a0aa4:	bf00      	nop
 80a0aa6:	bf00      	nop
 80a0aa8:	bf00      	nop
 80a0aaa:	bf00      	nop
 80a0aac:	bf00      	nop
 80a0aae:	bf00      	nop
 80a0ab0:	bf00      	nop
 80a0ab2:	bf00      	nop
 80a0ab4:	bf00      	nop
 80a0ab6:	bf00      	nop
 80a0ab8:	bf00      	nop
 80a0aba:	bf00      	nop
 80a0abc:	bf00      	nop
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 944ns)
          // This lib on Photon     (meas. 936ns)
          pinSet(pin, LOW); // LOW
 80a0abe:	79e3      	ldrb	r3, [r4, #7]
 80a0ac0:	6810      	ldr	r0, [r2, #0]
 80a0ac2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0ac6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0aca:	88bf      	ldrh	r7, [r7, #4]
 80a0acc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0ad0:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0ad2:	4600      	mov	r0, r0
 80a0ad4:	bf00      	nop
 80a0ad6:	bf00      	nop
 80a0ad8:	bf00      	nop
 80a0ada:	bf00      	nop
 80a0adc:	bf00      	nop
 80a0ade:	bf00      	nop
 80a0ae0:	bf00      	nop
 80a0ae2:	bf00      	nop
 80a0ae4:	bf00      	nop
 80a0ae6:	bf00      	nop
 80a0ae8:	bf00      	nop
 80a0aea:	bf00      	nop
 80a0aec:	bf00      	nop
 80a0aee:	bf00      	nop
 80a0af0:	bf00      	nop
 80a0af2:	bf00      	nop
 80a0af4:	bf00      	nop
 80a0af6:	bf00      	nop
 80a0af8:	bf00      	nop
 80a0afa:	bf00      	nop
 80a0afc:	bf00      	nop
 80a0afe:	bf00      	nop
 80a0b00:	bf00      	nop
 80a0b02:	bf00      	nop
 80a0b04:	bf00      	nop
 80a0b06:	bf00      	nop
 80a0b08:	bf00      	nop
 80a0b0a:	bf00      	nop
 80a0b0c:	bf00      	nop
 80a0b0e:	bf00      	nop
 80a0b10:	bf00      	nop
 80a0b12:	bf00      	nop
 80a0b14:	bf00      	nop
 80a0b16:	bf00      	nop
 80a0b18:	bf00      	nop
 80a0b1a:	bf00      	nop
 80a0b1c:	bf00      	nop
 80a0b1e:	bf00      	nop
 80a0b20:	bf00      	nop
 80a0b22:	bf00      	nop
 80a0b24:	bf00      	nop
 80a0b26:	bf00      	nop
 80a0b28:	bf00      	nop
 80a0b2a:	bf00      	nop
 80a0b2c:	bf00      	nop
 80a0b2e:	bf00      	nop
 80a0b30:	bf00      	nop
 80a0b32:	bf00      	nop
 80a0b34:	bf00      	nop
 80a0b36:	bf00      	nop
 80a0b38:	bf00      	nop
 80a0b3a:	bf00      	nop
 80a0b3c:	bf00      	nop
 80a0b3e:	bf00      	nop
 80a0b40:	bf00      	nop
 80a0b42:	bf00      	nop
 80a0b44:	bf00      	nop
 80a0b46:	bf00      	nop
 80a0b48:	bf00      	nop
 80a0b4a:	bf00      	nop
 80a0b4c:	bf00      	nop
 80a0b4e:	bf00      	nop
 80a0b50:	bf00      	nop
 80a0b52:	bf00      	nop
 80a0b54:	bf00      	nop
 80a0b56:	bf00      	nop
 80a0b58:	bf00      	nop
 80a0b5a:	bf00      	nop
 80a0b5c:	bf00      	nop
 80a0b5e:	bf00      	nop
 80a0b60:	bf00      	nop
 80a0b62:	bf00      	nop
 80a0b64:	bf00      	nop
 80a0b66:	bf00      	nop
 80a0b68:	bf00      	nop
 80a0b6a:	bf00      	nop
 80a0b6c:	bf00      	nop
 80a0b6e:	bf00      	nop
 80a0b70:	bf00      	nop
 80a0b72:	bf00      	nop
 80a0b74:	bf00      	nop
 80a0b76:	bf00      	nop
 80a0b78:	bf00      	nop
 80a0b7a:	bf00      	nop
 80a0b7c:	e770      	b.n	80a0a60 <_ZN17Adafruit_NeoPixel4showEv+0x670>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0b7e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0b82:	468e      	mov	lr, r1
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0b84:	b29b      	uxth	r3, r3
 80a0b86:	2b00      	cmp	r3, #0
 80a0b88:	f47f aecf 	bne.w	80a092a <_ZN17Adafruit_NeoPixel4showEv+0x53a>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80a0b8c:	b662      	cpsie	i
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a0b8e:	f7ff fbcd 	bl	80a032c <micros>
 80a0b92:	6120      	str	r0, [r4, #16]
}
 80a0b94:	b006      	add	sp, #24
 80a0b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0b9a:	4b5e      	ldr	r3, [pc, #376]	; (80a0d14 <_ZN17Adafruit_NeoPixel4showEv+0x924>)
 80a0b9c:	4a5e      	ldr	r2, [pc, #376]	; (80a0d18 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
        pinSet(pin, HIGH); // HIGH
        if (c & mask) { // if masked bit is high
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a0b9e:	4618      	mov	r0, r3
 80a0ba0:	6811      	ldr	r1, [r2, #0]
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0ba2:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0ba6:	2700      	movs	r7, #0
    #define CYCLES_800_T1H  80 // 812ns (meas. 792ns)
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0ba8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a0bac:	b292      	uxth	r2, r2
 80a0bae:	2a00      	cmp	r2, #0
 80a0bb0:	d0ec      	beq.n	80a0b8c <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0bb2:	f8cd 8010 	str.w	r8, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0bb6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a0bba:	f10e 0503 	add.w	r5, lr, #3
 80a0bbe:	3a03      	subs	r2, #3
 80a0bc0:	b292      	uxth	r2, r2
 80a0bc2:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0bc6:	f89e 2000 	ldrb.w	r2, [lr]
 80a0bca:	b2d2      	uxtb	r2, r2
 80a0bcc:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0bd0:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80a0bd4:	b2d2      	uxtb	r2, r2
 80a0bd6:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0bda:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80a0bde:	b2d2      	uxtb	r2, r2
 80a0be0:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0be4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a0be8:	f89d e007 	ldrb.w	lr, [sp, #7]
 80a0bec:	f89d c008 	ldrb.w	ip, [sp, #8]
 80a0bf0:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 80a0bf4:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 80a0bf8:	ea42 020c 	orr.w	r2, r2, ip
 80a0bfc:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0bfe:	f88d 7005 	strb.w	r7, [sp, #5]
      do {
        cyc = DWT->CYCCNT;
        pinSet(pin, HIGH); // HIGH
 80a0c02:	79e2      	ldrb	r2, [r4, #7]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0c04:	685e      	ldr	r6, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a0c06:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0c0a:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0c0e:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0c12:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0c16:	9605      	str	r6, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a0c18:	f8a2 e018 	strh.w	lr, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a0c1c:	9e03      	ldr	r6, [sp, #12]
 80a0c1e:	9a04      	ldr	r2, [sp, #16]
 80a0c20:	4216      	tst	r6, r2
 80a0c22:	d023      	beq.n	80a0c6c <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a0c24:	685a      	ldr	r2, [r3, #4]
 80a0c26:	9e05      	ldr	r6, [sp, #20]
 80a0c28:	1b92      	subs	r2, r2, r6
 80a0c2a:	2a4f      	cmp	r2, #79	; 0x4f
 80a0c2c:	d9fa      	bls.n	80a0c24 <_ZN17Adafruit_NeoPixel4showEv+0x834>
          pinSet(pin, LOW);
 80a0c2e:	79e2      	ldrb	r2, [r4, #7]
 80a0c30:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0c34:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0c38:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0c3c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a0c40:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0c44:	6842      	ldr	r2, [r0, #4]
 80a0c46:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a0c48:	685a      	ldr	r2, [r3, #4]
 80a0c4a:	9e05      	ldr	r6, [sp, #20]
 80a0c4c:	1b92      	subs	r2, r2, r6
 80a0c4e:	2a07      	cmp	r2, #7
 80a0c50:	d9fa      	bls.n	80a0c48 <_ZN17Adafruit_NeoPixel4showEv+0x858>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
        }
        mask >>= 1;
 80a0c52:	9a04      	ldr	r2, [sp, #16]
 80a0c54:	0852      	lsrs	r2, r2, #1
 80a0c56:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0c58:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a0c5c:	3201      	adds	r2, #1
 80a0c5e:	b2d2      	uxtb	r2, r2
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0c60:	2a17      	cmp	r2, #23
 80a0c62:	f88d 2005 	strb.w	r2, [sp, #5]
 80a0c66:	d9cc      	bls.n	80a0c02 <_ZN17Adafruit_NeoPixel4showEv+0x812>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0c68:	46ae      	mov	lr, r5
 80a0c6a:	e79d      	b.n	80a0ba8 <_ZN17Adafruit_NeoPixel4showEv+0x7b8>
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
        }
        else { // else masked bit is low
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a0c6c:	685a      	ldr	r2, [r3, #4]
 80a0c6e:	9e05      	ldr	r6, [sp, #20]
 80a0c70:	1b92      	subs	r2, r2, r6
 80a0c72:	2a18      	cmp	r2, #24
 80a0c74:	d9fa      	bls.n	80a0c6c <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          pinSet(pin, LOW);
 80a0c76:	79e2      	ldrb	r2, [r4, #7]
 80a0c78:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0c7c:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0c80:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0c84:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a0c88:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0c8c:	6842      	ldr	r2, [r0, #4]
 80a0c8e:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a0c90:	685a      	ldr	r2, [r3, #4]
 80a0c92:	9e05      	ldr	r6, [sp, #20]
 80a0c94:	1b92      	subs	r2, r2, r6
 80a0c96:	2a45      	cmp	r2, #69	; 0x45
 80a0c98:	d9fa      	bls.n	80a0c90 <_ZN17Adafruit_NeoPixel4showEv+0x8a0>
 80a0c9a:	e7da      	b.n	80a0c52 <_ZN17Adafruit_NeoPixel4showEv+0x862>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a0c9c:	46ae      	mov	lr, r5
 80a0c9e:	f7ff bbda 	b.w	80a0456 <_ZN17Adafruit_NeoPixel4showEv+0x66>
 80a0ca2:	4a1d      	ldr	r2, [pc, #116]	; (80a0d18 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
      mask = 0x80000000; // reset the mask
 80a0ca4:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
 80a0ca8:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a0caa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0cae:	b29b      	uxth	r3, r3
 80a0cb0:	2b00      	cmp	r3, #0
 80a0cb2:	f43f af6b 	beq.w	80a0b8c <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x80000000; // reset the mask
 80a0cb6:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a0cb8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0cbc:	f10e 0104 	add.w	r1, lr, #4
 80a0cc0:	3b04      	subs	r3, #4
 80a0cc2:	b29b      	uxth	r3, r3
 80a0cc4:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0cc8:	f89e 3000 	ldrb.w	r3, [lr]
 80a0ccc:	b2db      	uxtb	r3, r3
 80a0cce:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a0cd2:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0cd6:	b2db      	uxtb	r3, r3
 80a0cd8:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0cdc:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0ce0:	b2db      	uxtb	r3, r3
 80a0ce2:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a0ce6:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80a0cea:	b2db      	uxtb	r3, r3
 80a0cec:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a0cf0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a0cf4:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80a0cf8:	f89d e008 	ldrb.w	lr, [sp, #8]
 80a0cfc:	043f      	lsls	r7, r7, #16
 80a0cfe:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a0d02:	ea47 6303 	orr.w	r3, r7, r3, lsl #24
 80a0d06:	4303      	orrs	r3, r0
 80a0d08:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80a0d0c:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a0d0e:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0d12:	e07e      	b.n	80a0e12 <_ZN17Adafruit_NeoPixel4showEv+0xa22>
 80a0d14:	e0001000 	.word	0xe0001000
 80a0d18:	20000094 	.word	0x20000094
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0d1c:	4600      	mov	r0, r0
 80a0d1e:	bf00      	nop
 80a0d20:	bf00      	nop
 80a0d22:	bf00      	nop
 80a0d24:	bf00      	nop
 80a0d26:	bf00      	nop
 80a0d28:	bf00      	nop
 80a0d2a:	bf00      	nop
 80a0d2c:	bf00      	nop
 80a0d2e:	bf00      	nop
 80a0d30:	bf00      	nop
 80a0d32:	bf00      	nop
 80a0d34:	bf00      	nop
 80a0d36:	bf00      	nop
 80a0d38:	bf00      	nop
 80a0d3a:	bf00      	nop
 80a0d3c:	bf00      	nop
 80a0d3e:	bf00      	nop
 80a0d40:	bf00      	nop
 80a0d42:	bf00      	nop
 80a0d44:	bf00      	nop
 80a0d46:	bf00      	nop
 80a0d48:	bf00      	nop
 80a0d4a:	bf00      	nop
 80a0d4c:	bf00      	nop
 80a0d4e:	bf00      	nop
 80a0d50:	bf00      	nop
 80a0d52:	bf00      	nop
 80a0d54:	bf00      	nop
 80a0d56:	bf00      	nop
 80a0d58:	bf00      	nop
 80a0d5a:	bf00      	nop
 80a0d5c:	bf00      	nop
 80a0d5e:	bf00      	nop
 80a0d60:	bf00      	nop
 80a0d62:	bf00      	nop
 80a0d64:	bf00      	nop
 80a0d66:	bf00      	nop
 80a0d68:	bf00      	nop
 80a0d6a:	bf00      	nop
 80a0d6c:	bf00      	nop
 80a0d6e:	bf00      	nop
 80a0d70:	bf00      	nop
 80a0d72:	bf00      	nop
 80a0d74:	bf00      	nop
 80a0d76:	bf00      	nop
 80a0d78:	bf00      	nop
 80a0d7a:	bf00      	nop
 80a0d7c:	bf00      	nop
 80a0d7e:	bf00      	nop
 80a0d80:	bf00      	nop
 80a0d82:	bf00      	nop
 80a0d84:	bf00      	nop
 80a0d86:	bf00      	nop
 80a0d88:	bf00      	nop
          // SK6812RGBW spec         600ns LOW
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 598ns)
          // This lib on Photon     (meas. 600ns)
          pinSet(pin, LOW); // LOW
 80a0d8a:	79e3      	ldrb	r3, [r4, #7]
 80a0d8c:	6810      	ldr	r0, [r2, #0]
 80a0d8e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0d92:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0d96:	88bf      	ldrh	r7, [r7, #4]
 80a0d98:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0d9c:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0d9e:	4600      	mov	r0, r0
 80a0da0:	bf00      	nop
 80a0da2:	bf00      	nop
 80a0da4:	bf00      	nop
 80a0da6:	bf00      	nop
 80a0da8:	bf00      	nop
 80a0daa:	bf00      	nop
 80a0dac:	bf00      	nop
 80a0dae:	bf00      	nop
 80a0db0:	bf00      	nop
 80a0db2:	bf00      	nop
 80a0db4:	bf00      	nop
 80a0db6:	bf00      	nop
 80a0db8:	bf00      	nop
 80a0dba:	bf00      	nop
 80a0dbc:	bf00      	nop
 80a0dbe:	bf00      	nop
 80a0dc0:	bf00      	nop
 80a0dc2:	bf00      	nop
 80a0dc4:	bf00      	nop
 80a0dc6:	bf00      	nop
 80a0dc8:	bf00      	nop
 80a0dca:	bf00      	nop
 80a0dcc:	bf00      	nop
 80a0dce:	bf00      	nop
 80a0dd0:	bf00      	nop
 80a0dd2:	bf00      	nop
 80a0dd4:	bf00      	nop
 80a0dd6:	bf00      	nop
 80a0dd8:	bf00      	nop
 80a0dda:	bf00      	nop
 80a0ddc:	bf00      	nop
 80a0dde:	bf00      	nop
 80a0de0:	bf00      	nop
 80a0de2:	bf00      	nop
 80a0de4:	bf00      	nop
 80a0de6:	bf00      	nop
 80a0de8:	bf00      	nop
 80a0dea:	bf00      	nop
 80a0dec:	bf00      	nop
 80a0dee:	bf00      	nop
 80a0df0:	bf00      	nop
 80a0df2:	bf00      	nop
 80a0df4:	bf00      	nop
 80a0df6:	bf00      	nop
 80a0df8:	bf00      	nop
 80a0dfa:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0dfc:	9b04      	ldr	r3, [sp, #16]
 80a0dfe:	085b      	lsrs	r3, r3, #1
 80a0e00:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a0e02:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0e06:	3301      	adds	r3, #1
 80a0e08:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
      do {
 80a0e0a:	2b1f      	cmp	r3, #31
 80a0e0c:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0e10:	d87e      	bhi.n	80a0f10 <_ZN17Adafruit_NeoPixel4showEv+0xb20>
        pinSet(pin, HIGH); // HIGH
 80a0e12:	79e3      	ldrb	r3, [r4, #7]
 80a0e14:	6810      	ldr	r0, [r2, #0]
 80a0e16:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0e1a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0e1e:	88bf      	ldrh	r7, [r7, #4]
 80a0e20:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0e24:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0e26:	9803      	ldr	r0, [sp, #12]
 80a0e28:	9b04      	ldr	r3, [sp, #16]
 80a0e2a:	4218      	tst	r0, r3
 80a0e2c:	f47f af76 	bne.w	80a0d1c <_ZN17Adafruit_NeoPixel4showEv+0x92c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0e30:	4600      	mov	r0, r0
 80a0e32:	bf00      	nop
 80a0e34:	bf00      	nop
 80a0e36:	bf00      	nop
 80a0e38:	bf00      	nop
 80a0e3a:	bf00      	nop
 80a0e3c:	bf00      	nop
 80a0e3e:	bf00      	nop
 80a0e40:	bf00      	nop
 80a0e42:	bf00      	nop
 80a0e44:	bf00      	nop
 80a0e46:	bf00      	nop
 80a0e48:	bf00      	nop
 80a0e4a:	bf00      	nop
 80a0e4c:	bf00      	nop
 80a0e4e:	bf00      	nop
 80a0e50:	bf00      	nop
 80a0e52:	bf00      	nop
 80a0e54:	bf00      	nop
 80a0e56:	bf00      	nop
          // SK6812RGBW spec         900ns LOW
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 904ns)
          // This lib on Photon     (meas. 900ns)
          pinSet(pin, LOW); // LOW
 80a0e58:	79e3      	ldrb	r3, [r4, #7]
 80a0e5a:	6810      	ldr	r0, [r2, #0]
 80a0e5c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0e60:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0e64:	88bf      	ldrh	r7, [r7, #4]
 80a0e66:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0e6a:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0e6c:	4600      	mov	r0, r0
 80a0e6e:	bf00      	nop
 80a0e70:	bf00      	nop
 80a0e72:	bf00      	nop
 80a0e74:	bf00      	nop
 80a0e76:	bf00      	nop
 80a0e78:	bf00      	nop
 80a0e7a:	bf00      	nop
 80a0e7c:	bf00      	nop
 80a0e7e:	bf00      	nop
 80a0e80:	bf00      	nop
 80a0e82:	bf00      	nop
 80a0e84:	bf00      	nop
 80a0e86:	bf00      	nop
 80a0e88:	bf00      	nop
 80a0e8a:	bf00      	nop
 80a0e8c:	bf00      	nop
 80a0e8e:	bf00      	nop
 80a0e90:	bf00      	nop
 80a0e92:	bf00      	nop
 80a0e94:	bf00      	nop
 80a0e96:	bf00      	nop
 80a0e98:	bf00      	nop
 80a0e9a:	bf00      	nop
 80a0e9c:	bf00      	nop
 80a0e9e:	bf00      	nop
 80a0ea0:	bf00      	nop
 80a0ea2:	bf00      	nop
 80a0ea4:	bf00      	nop
 80a0ea6:	bf00      	nop
 80a0ea8:	bf00      	nop
 80a0eaa:	bf00      	nop
 80a0eac:	bf00      	nop
 80a0eae:	bf00      	nop
 80a0eb0:	bf00      	nop
 80a0eb2:	bf00      	nop
 80a0eb4:	bf00      	nop
 80a0eb6:	bf00      	nop
 80a0eb8:	bf00      	nop
 80a0eba:	bf00      	nop
 80a0ebc:	bf00      	nop
 80a0ebe:	bf00      	nop
 80a0ec0:	bf00      	nop
 80a0ec2:	bf00      	nop
 80a0ec4:	bf00      	nop
 80a0ec6:	bf00      	nop
 80a0ec8:	bf00      	nop
 80a0eca:	bf00      	nop
 80a0ecc:	bf00      	nop
 80a0ece:	bf00      	nop
 80a0ed0:	bf00      	nop
 80a0ed2:	bf00      	nop
 80a0ed4:	bf00      	nop
 80a0ed6:	bf00      	nop
 80a0ed8:	bf00      	nop
 80a0eda:	bf00      	nop
 80a0edc:	bf00      	nop
 80a0ede:	bf00      	nop
 80a0ee0:	bf00      	nop
 80a0ee2:	bf00      	nop
 80a0ee4:	bf00      	nop
 80a0ee6:	bf00      	nop
 80a0ee8:	bf00      	nop
 80a0eea:	bf00      	nop
 80a0eec:	bf00      	nop
 80a0eee:	bf00      	nop
 80a0ef0:	bf00      	nop
 80a0ef2:	bf00      	nop
 80a0ef4:	bf00      	nop
 80a0ef6:	bf00      	nop
 80a0ef8:	bf00      	nop
 80a0efa:	bf00      	nop
 80a0efc:	bf00      	nop
 80a0efe:	bf00      	nop
 80a0f00:	bf00      	nop
 80a0f02:	bf00      	nop
 80a0f04:	bf00      	nop
 80a0f06:	bf00      	nop
 80a0f08:	bf00      	nop
 80a0f0a:	bf00      	nop
 80a0f0c:	bf00      	nop
 80a0f0e:	e775      	b.n	80a0dfc <_ZN17Adafruit_NeoPixel4showEv+0xa0c>
      mask = 0x80000000; // reset the mask
      i = i-4;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
 80a0f10:	468e      	mov	lr, r1
 80a0f12:	e6ca      	b.n	80a0caa <_ZN17Adafruit_NeoPixel4showEv+0x8ba>
 80a0f14:	4770      	bx	lr
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a0f16:	2903      	cmp	r1, #3
 80a0f18:	f000 812e 	beq.w	80a1178 <_ZN17Adafruit_NeoPixel4showEv+0xd88>
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0f1c:	4a1e      	ldr	r2, [pc, #120]	; (80a0f98 <_ZN17Adafruit_NeoPixel4showEv+0xba8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0f1e:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0f22:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0f24:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0f28:	b29b      	uxth	r3, r3
 80a0f2a:	2b00      	cmp	r3, #0
 80a0f2c:	f43f ae2e 	beq.w	80a0b8c <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0f30:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0f32:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0f36:	79e0      	ldrb	r0, [r4, #7]
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
 80a0f38:	3b03      	subs	r3, #3
 80a0f3a:	b29b      	uxth	r3, r3
 80a0f3c:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0f40:	f89e 3000 	ldrb.w	r3, [lr]
 80a0f44:	f10e 0103 	add.w	r1, lr, #3
 80a0f48:	b2db      	uxtb	r3, r3
 80a0f4a:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0f4e:	f89e 3001 	ldrb.w	r3, [lr, #1]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0f52:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0f56:	b2db      	uxtb	r3, r3
 80a0f58:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a0f5c:	f89e 3002 	ldrb.w	r3, [lr, #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0f60:	f8d2 e000 	ldr.w	lr, [r2]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
 80a0f64:	b2db      	uxtb	r3, r3
 80a0f66:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0f6a:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a0f6e:	f89d 3008 	ldrb.w	r3, [sp, #8]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0f72:	eb0e 0c80 	add.w	ip, lr, r0, lsl #2
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0f76:	021b      	lsls	r3, r3, #8
 80a0f78:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a0f7c:	f89d 7006 	ldrb.w	r7, [sp, #6]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0f80:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a0f84:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0f88:	433b      	orrs	r3, r7
 80a0f8a:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0f8c:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a0f90:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a0f94:	e07d      	b.n	80a1092 <_ZN17Adafruit_NeoPixel4showEv+0xca2>
 80a0f96:	bf00      	nop
 80a0f98:	20000094 	.word	0x20000094
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
          // TM1829 spec             800ns LOW
          // This lib on Spark Core (meas. 806ns)
          // This lib on Photon     (meas. 792ns)
          mask >>= 1; // Do this task during the long delay of this bit
 80a0f9c:	9b04      	ldr	r3, [sp, #16]
 80a0f9e:	085b      	lsrs	r3, r3, #1
 80a0fa0:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0fa2:	4600      	mov	r0, r0
 80a0fa4:	bf00      	nop
 80a0fa6:	bf00      	nop
 80a0fa8:	bf00      	nop
 80a0faa:	bf00      	nop
 80a0fac:	bf00      	nop
 80a0fae:	bf00      	nop
 80a0fb0:	bf00      	nop
 80a0fb2:	bf00      	nop
 80a0fb4:	bf00      	nop
 80a0fb6:	bf00      	nop
 80a0fb8:	bf00      	nop
 80a0fba:	bf00      	nop
 80a0fbc:	bf00      	nop
 80a0fbe:	bf00      	nop
 80a0fc0:	bf00      	nop
 80a0fc2:	bf00      	nop
 80a0fc4:	bf00      	nop
 80a0fc6:	bf00      	nop
 80a0fc8:	bf00      	nop
 80a0fca:	bf00      	nop
 80a0fcc:	bf00      	nop
 80a0fce:	bf00      	nop
 80a0fd0:	bf00      	nop
 80a0fd2:	bf00      	nop
 80a0fd4:	bf00      	nop
 80a0fd6:	bf00      	nop
 80a0fd8:	bf00      	nop
 80a0fda:	bf00      	nop
 80a0fdc:	bf00      	nop
 80a0fde:	bf00      	nop
 80a0fe0:	bf00      	nop
 80a0fe2:	bf00      	nop
 80a0fe4:	bf00      	nop
 80a0fe6:	bf00      	nop
 80a0fe8:	bf00      	nop
 80a0fea:	bf00      	nop
 80a0fec:	bf00      	nop
 80a0fee:	bf00      	nop
 80a0ff0:	bf00      	nop
 80a0ff2:	bf00      	nop
 80a0ff4:	bf00      	nop
 80a0ff6:	bf00      	nop
 80a0ff8:	bf00      	nop
 80a0ffa:	bf00      	nop
 80a0ffc:	bf00      	nop
 80a0ffe:	bf00      	nop
 80a1000:	bf00      	nop
 80a1002:	bf00      	nop
 80a1004:	bf00      	nop
 80a1006:	bf00      	nop
 80a1008:	bf00      	nop
 80a100a:	bf00      	nop
 80a100c:	bf00      	nop
 80a100e:	bf00      	nop
 80a1010:	bf00      	nop
 80a1012:	bf00      	nop
 80a1014:	bf00      	nop
 80a1016:	bf00      	nop
 80a1018:	bf00      	nop
 80a101a:	bf00      	nop
 80a101c:	bf00      	nop
 80a101e:	bf00      	nop
 80a1020:	bf00      	nop
 80a1022:	bf00      	nop
 80a1024:	bf00      	nop
 80a1026:	bf00      	nop
          j++;
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1028:	79e0      	ldrb	r0, [r4, #7]
 80a102a:	6817      	ldr	r7, [r2, #0]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a102c:	f89d 3005 	ldrb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1030:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a1034:	eb07 0e80 	add.w	lr, r7, r0, lsl #2
 80a1038:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a103c:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a1040:	3301      	adds	r3, #1
 80a1042:	b2db      	uxtb	r3, r3
 80a1044:	f88d 3005 	strb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1048:	f8a0 e018 	strh.w	lr, [r0, #24]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a104c:	4600      	mov	r0, r0
 80a104e:	bf00      	nop
 80a1050:	bf00      	nop
 80a1052:	bf00      	nop
 80a1054:	bf00      	nop
 80a1056:	bf00      	nop
 80a1058:	bf00      	nop
 80a105a:	bf00      	nop
 80a105c:	bf00      	nop
 80a105e:	bf00      	nop
 80a1060:	bf00      	nop
 80a1062:	bf00      	nop
 80a1064:	bf00      	nop
 80a1066:	bf00      	nop
 80a1068:	bf00      	nop
 80a106a:	bf00      	nop
 80a106c:	bf00      	nop
 80a106e:	bf00      	nop
 80a1070:	bf00      	nop
 80a1072:	bf00      	nop
 80a1074:	bf00      	nop
          if(j==24) break;
 80a1076:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a107a:	2b18      	cmp	r3, #24
 80a107c:	d07a      	beq.n	80a1174 <_ZN17Adafruit_NeoPixel4showEv+0xd84>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          if(j==24) break;
          pinSet(pin, LOW); // LOW
 80a107e:	79e3      	ldrb	r3, [r4, #7]
 80a1080:	6810      	ldr	r0, [r2, #0]
 80a1082:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1086:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a108a:	88bf      	ldrh	r7, [r7, #4]
 80a108c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1090:	835f      	strh	r7, [r3, #26]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
 80a1092:	9803      	ldr	r0, [sp, #12]
 80a1094:	9b04      	ldr	r3, [sp, #16]
 80a1096:	4218      	tst	r0, r3
 80a1098:	d180      	bne.n	80a0f9c <_ZN17Adafruit_NeoPixel4showEv+0xbac>
            "mov r0, r0" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a109a:	4600      	mov	r0, r0
 80a109c:	bf00      	nop
 80a109e:	bf00      	nop
 80a10a0:	bf00      	nop
 80a10a2:	bf00      	nop
 80a10a4:	bf00      	nop
 80a10a6:	bf00      	nop
 80a10a8:	bf00      	nop
 80a10aa:	bf00      	nop
 80a10ac:	bf00      	nop
 80a10ae:	bf00      	nop
 80a10b0:	bf00      	nop
 80a10b2:	bf00      	nop
 80a10b4:	bf00      	nop
 80a10b6:	bf00      	nop
 80a10b8:	bf00      	nop
 80a10ba:	bf00      	nop
#endif
          // TM1829 spec             800ns HIGH
          // This lib on Spark Core (meas. 792ns)
          // This lib on Photon     (meas. 800ns)
          pinSet(pin, HIGH); // HIGH
 80a10bc:	79e3      	ldrb	r3, [r4, #7]
 80a10be:	6810      	ldr	r0, [r2, #0]
 80a10c0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a10c4:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a10c8:	88bf      	ldrh	r7, [r7, #4]
 80a10ca:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a10ce:	831f      	strh	r7, [r3, #24]
          j++;
 80a10d0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a10d4:	3301      	adds	r3, #1
 80a10d6:	b2db      	uxtb	r3, r3
 80a10d8:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a10dc:	9b04      	ldr	r3, [sp, #16]
 80a10de:	085b      	lsrs	r3, r3, #1
 80a10e0:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a10e2:	4600      	mov	r0, r0
 80a10e4:	bf00      	nop
 80a10e6:	bf00      	nop
 80a10e8:	bf00      	nop
 80a10ea:	bf00      	nop
 80a10ec:	bf00      	nop
 80a10ee:	bf00      	nop
 80a10f0:	bf00      	nop
 80a10f2:	bf00      	nop
 80a10f4:	bf00      	nop
 80a10f6:	bf00      	nop
 80a10f8:	bf00      	nop
 80a10fa:	bf00      	nop
 80a10fc:	bf00      	nop
 80a10fe:	bf00      	nop
 80a1100:	bf00      	nop
 80a1102:	bf00      	nop
 80a1104:	bf00      	nop
 80a1106:	bf00      	nop
 80a1108:	bf00      	nop
 80a110a:	bf00      	nop
 80a110c:	bf00      	nop
 80a110e:	bf00      	nop
 80a1110:	bf00      	nop
 80a1112:	bf00      	nop
 80a1114:	bf00      	nop
 80a1116:	bf00      	nop
 80a1118:	bf00      	nop
 80a111a:	bf00      	nop
 80a111c:	bf00      	nop
 80a111e:	bf00      	nop
 80a1120:	bf00      	nop
 80a1122:	bf00      	nop
 80a1124:	bf00      	nop
 80a1126:	bf00      	nop
 80a1128:	bf00      	nop
 80a112a:	bf00      	nop
 80a112c:	bf00      	nop
 80a112e:	bf00      	nop
 80a1130:	bf00      	nop
 80a1132:	bf00      	nop
 80a1134:	bf00      	nop
 80a1136:	bf00      	nop
 80a1138:	bf00      	nop
 80a113a:	bf00      	nop
 80a113c:	bf00      	nop
 80a113e:	bf00      	nop
 80a1140:	bf00      	nop
 80a1142:	bf00      	nop
 80a1144:	bf00      	nop
 80a1146:	bf00      	nop
 80a1148:	bf00      	nop
 80a114a:	bf00      	nop
 80a114c:	bf00      	nop
 80a114e:	bf00      	nop
 80a1150:	bf00      	nop
 80a1152:	bf00      	nop
 80a1154:	bf00      	nop
 80a1156:	bf00      	nop
 80a1158:	bf00      	nop
 80a115a:	bf00      	nop
 80a115c:	bf00      	nop
 80a115e:	bf00      	nop
 80a1160:	bf00      	nop
 80a1162:	bf00      	nop
 80a1164:	bf00      	nop
 80a1166:	bf00      	nop
 80a1168:	bf00      	nop
 80a116a:	bf00      	nop
          if(j==24) break;
 80a116c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1170:	2b18      	cmp	r3, #24
 80a1172:	d184      	bne.n	80a107e <_ZN17Adafruit_NeoPixel4showEv+0xc8e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a1174:	468e      	mov	lr, r1
 80a1176:	e6d5      	b.n	80a0f24 <_ZN17Adafruit_NeoPixel4showEv+0xb34>
 80a1178:	4a17      	ldr	r2, [pc, #92]	; (80a11d8 <_ZN17Adafruit_NeoPixel4showEv+0xde8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a117a:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a117e:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1180:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1184:	b29b      	uxth	r3, r3
 80a1186:	2b00      	cmp	r3, #0
 80a1188:	f43f ad00 	beq.w	80a0b8c <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a118c:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a118e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1192:	f10e 0103 	add.w	r1, lr, #3
 80a1196:	3b03      	subs	r3, #3
 80a1198:	b29b      	uxth	r3, r3
 80a119a:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a119e:	f89e 3000 	ldrb.w	r3, [lr]
 80a11a2:	b2db      	uxtb	r3, r3
 80a11a4:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a11a8:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a11ac:	b2db      	uxtb	r3, r3
 80a11ae:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a11b2:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a11b6:	b2db      	uxtb	r3, r3
 80a11b8:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a11bc:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a11c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a11c4:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a11c8:	021b      	lsls	r3, r3, #8
 80a11ca:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a11ce:	4303      	orrs	r3, r0
 80a11d0:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a11d2:	f88d 6005 	strb.w	r6, [sp, #5]
 80a11d6:	e0e0      	b.n	80a139a <_ZN17Adafruit_NeoPixel4showEv+0xfaa>
 80a11d8:	20000094 	.word	0x20000094
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a11dc:	4600      	mov	r0, r0
 80a11de:	bf00      	nop
 80a11e0:	bf00      	nop
 80a11e2:	bf00      	nop
 80a11e4:	bf00      	nop
 80a11e6:	bf00      	nop
 80a11e8:	bf00      	nop
 80a11ea:	bf00      	nop
 80a11ec:	bf00      	nop
 80a11ee:	bf00      	nop
 80a11f0:	bf00      	nop
 80a11f2:	bf00      	nop
 80a11f4:	bf00      	nop
 80a11f6:	bf00      	nop
 80a11f8:	bf00      	nop
 80a11fa:	bf00      	nop
 80a11fc:	bf00      	nop
 80a11fe:	bf00      	nop
 80a1200:	bf00      	nop
 80a1202:	bf00      	nop
 80a1204:	bf00      	nop
 80a1206:	bf00      	nop
 80a1208:	bf00      	nop
 80a120a:	bf00      	nop
 80a120c:	bf00      	nop
 80a120e:	bf00      	nop
 80a1210:	bf00      	nop
 80a1212:	bf00      	nop
 80a1214:	bf00      	nop
 80a1216:	bf00      	nop
 80a1218:	bf00      	nop
 80a121a:	bf00      	nop
 80a121c:	bf00      	nop
 80a121e:	bf00      	nop
 80a1220:	bf00      	nop
 80a1222:	bf00      	nop
 80a1224:	bf00      	nop
 80a1226:	bf00      	nop
 80a1228:	bf00      	nop
 80a122a:	bf00      	nop
 80a122c:	bf00      	nop
 80a122e:	bf00      	nop
 80a1230:	bf00      	nop
 80a1232:	bf00      	nop
 80a1234:	bf00      	nop
 80a1236:	bf00      	nop
 80a1238:	bf00      	nop
 80a123a:	bf00      	nop
 80a123c:	bf00      	nop
 80a123e:	bf00      	nop
 80a1240:	bf00      	nop
 80a1242:	bf00      	nop
 80a1244:	bf00      	nop
 80a1246:	bf00      	nop
 80a1248:	bf00      	nop
 80a124a:	bf00      	nop
 80a124c:	bf00      	nop
 80a124e:	bf00      	nop
 80a1250:	bf00      	nop
 80a1252:	bf00      	nop
 80a1254:	bf00      	nop
 80a1256:	bf00      	nop
 80a1258:	bf00      	nop
 80a125a:	bf00      	nop
 80a125c:	bf00      	nop
 80a125e:	bf00      	nop
 80a1260:	bf00      	nop
 80a1262:	bf00      	nop
 80a1264:	bf00      	nop
 80a1266:	bf00      	nop
 80a1268:	bf00      	nop
 80a126a:	bf00      	nop
 80a126c:	bf00      	nop
 80a126e:	bf00      	nop
 80a1270:	bf00      	nop
 80a1272:	bf00      	nop
 80a1274:	bf00      	nop
 80a1276:	bf00      	nop
 80a1278:	bf00      	nop
 80a127a:	bf00      	nop
 80a127c:	bf00      	nop
 80a127e:	bf00      	nop
 80a1280:	bf00      	nop
 80a1282:	bf00      	nop
 80a1284:	bf00      	nop
 80a1286:	bf00      	nop
 80a1288:	bf00      	nop
 80a128a:	bf00      	nop
 80a128c:	bf00      	nop
 80a128e:	bf00      	nop
 80a1290:	bf00      	nop
 80a1292:	bf00      	nop
 80a1294:	bf00      	nop
 80a1296:	bf00      	nop
 80a1298:	bf00      	nop
 80a129a:	bf00      	nop
 80a129c:	bf00      	nop
 80a129e:	bf00      	nop
 80a12a0:	bf00      	nop
 80a12a2:	bf00      	nop
 80a12a4:	bf00      	nop
 80a12a6:	bf00      	nop
 80a12a8:	bf00      	nop
 80a12aa:	bf00      	nop
 80a12ac:	bf00      	nop
 80a12ae:	bf00      	nop
 80a12b0:	bf00      	nop
 80a12b2:	bf00      	nop
 80a12b4:	bf00      	nop
 80a12b6:	bf00      	nop
 80a12b8:	bf00      	nop
 80a12ba:	bf00      	nop
 80a12bc:	bf00      	nop
 80a12be:	bf00      	nop
 80a12c0:	bf00      	nop
 80a12c2:	bf00      	nop
 80a12c4:	bf00      	nop
 80a12c6:	bf00      	nop
 80a12c8:	bf00      	nop
 80a12ca:	bf00      	nop
 80a12cc:	bf00      	nop
 80a12ce:	bf00      	nop
 80a12d0:	bf00      	nop
 80a12d2:	bf00      	nop
 80a12d4:	bf00      	nop
 80a12d6:	bf00      	nop
 80a12d8:	bf00      	nop
 80a12da:	bf00      	nop
 80a12dc:	bf00      	nop
 80a12de:	bf00      	nop
 80a12e0:	bf00      	nop
 80a12e2:	bf00      	nop
 80a12e4:	bf00      	nop
 80a12e6:	bf00      	nop
 80a12e8:	bf00      	nop
 80a12ea:	bf00      	nop
 80a12ec:	bf00      	nop
 80a12ee:	bf00      	nop
 80a12f0:	bf00      	nop
 80a12f2:	bf00      	nop
 80a12f4:	bf00      	nop
 80a12f6:	bf00      	nop
 80a12f8:	bf00      	nop
 80a12fa:	bf00      	nop
 80a12fc:	bf00      	nop
          // TM1803 spec             680ns LOW
          // Pololu on Arduino      (meas. 1.024us)
          // This lib on Spark Core (meas. 680ns)
          // This lib on Photon     (meas. 684ns)
          pinSet(pin, LOW); // LOW
 80a12fe:	79e3      	ldrb	r3, [r4, #7]
 80a1300:	6810      	ldr	r0, [r2, #0]
 80a1302:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1306:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a130a:	88bf      	ldrh	r7, [r7, #4]
 80a130c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1310:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1312:	4600      	mov	r0, r0
 80a1314:	bf00      	nop
 80a1316:	bf00      	nop
 80a1318:	bf00      	nop
 80a131a:	bf00      	nop
 80a131c:	bf00      	nop
 80a131e:	bf00      	nop
 80a1320:	bf00      	nop
 80a1322:	bf00      	nop
 80a1324:	bf00      	nop
 80a1326:	bf00      	nop
 80a1328:	bf00      	nop
 80a132a:	bf00      	nop
 80a132c:	bf00      	nop
 80a132e:	bf00      	nop
 80a1330:	bf00      	nop
 80a1332:	bf00      	nop
 80a1334:	bf00      	nop
 80a1336:	bf00      	nop
 80a1338:	bf00      	nop
 80a133a:	bf00      	nop
 80a133c:	bf00      	nop
 80a133e:	bf00      	nop
 80a1340:	bf00      	nop
 80a1342:	bf00      	nop
 80a1344:	bf00      	nop
 80a1346:	bf00      	nop
 80a1348:	bf00      	nop
 80a134a:	bf00      	nop
 80a134c:	bf00      	nop
 80a134e:	bf00      	nop
 80a1350:	bf00      	nop
 80a1352:	bf00      	nop
 80a1354:	bf00      	nop
 80a1356:	bf00      	nop
 80a1358:	bf00      	nop
 80a135a:	bf00      	nop
 80a135c:	bf00      	nop
 80a135e:	bf00      	nop
 80a1360:	bf00      	nop
 80a1362:	bf00      	nop
 80a1364:	bf00      	nop
 80a1366:	bf00      	nop
 80a1368:	bf00      	nop
 80a136a:	bf00      	nop
 80a136c:	bf00      	nop
 80a136e:	bf00      	nop
 80a1370:	bf00      	nop
 80a1372:	bf00      	nop
 80a1374:	bf00      	nop
 80a1376:	bf00      	nop
 80a1378:	bf00      	nop
 80a137a:	bf00      	nop
 80a137c:	bf00      	nop
 80a137e:	bf00      	nop
 80a1380:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a1382:	9b04      	ldr	r3, [sp, #16]
 80a1384:	085b      	lsrs	r3, r3, #1
 80a1386:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a1388:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a138c:	3301      	adds	r3, #1
 80a138e:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a1390:	2b17      	cmp	r3, #23
 80a1392:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1396:	f200 80e3 	bhi.w	80a1560 <_ZN17Adafruit_NeoPixel4showEv+0x1170>
        pinSet(pin, HIGH); // HIGH
 80a139a:	79e3      	ldrb	r3, [r4, #7]
 80a139c:	6810      	ldr	r0, [r2, #0]
 80a139e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a13a2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a13a6:	88bf      	ldrh	r7, [r7, #4]
 80a13a8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a13ac:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a13ae:	9803      	ldr	r0, [sp, #12]
 80a13b0:	9b04      	ldr	r3, [sp, #16]
 80a13b2:	4218      	tst	r0, r3
 80a13b4:	f47f af12 	bne.w	80a11dc <_ZN17Adafruit_NeoPixel4showEv+0xdec>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a13b8:	4600      	mov	r0, r0
 80a13ba:	bf00      	nop
 80a13bc:	bf00      	nop
 80a13be:	bf00      	nop
 80a13c0:	bf00      	nop
 80a13c2:	bf00      	nop
 80a13c4:	bf00      	nop
 80a13c6:	bf00      	nop
 80a13c8:	bf00      	nop
 80a13ca:	bf00      	nop
 80a13cc:	bf00      	nop
 80a13ce:	bf00      	nop
 80a13d0:	bf00      	nop
 80a13d2:	bf00      	nop
 80a13d4:	bf00      	nop
 80a13d6:	bf00      	nop
 80a13d8:	bf00      	nop
 80a13da:	bf00      	nop
 80a13dc:	bf00      	nop
 80a13de:	bf00      	nop
 80a13e0:	bf00      	nop
 80a13e2:	bf00      	nop
 80a13e4:	bf00      	nop
 80a13e6:	bf00      	nop
 80a13e8:	bf00      	nop
 80a13ea:	bf00      	nop
 80a13ec:	bf00      	nop
 80a13ee:	bf00      	nop
 80a13f0:	bf00      	nop
 80a13f2:	bf00      	nop
 80a13f4:	bf00      	nop
 80a13f6:	bf00      	nop
 80a13f8:	bf00      	nop
 80a13fa:	bf00      	nop
 80a13fc:	bf00      	nop
 80a13fe:	bf00      	nop
 80a1400:	bf00      	nop
 80a1402:	bf00      	nop
 80a1404:	bf00      	nop
 80a1406:	bf00      	nop
 80a1408:	bf00      	nop
 80a140a:	bf00      	nop
 80a140c:	bf00      	nop
 80a140e:	bf00      	nop
 80a1410:	bf00      	nop
 80a1412:	bf00      	nop
 80a1414:	bf00      	nop
 80a1416:	bf00      	nop
 80a1418:	bf00      	nop
 80a141a:	bf00      	nop
 80a141c:	bf00      	nop
 80a141e:	bf00      	nop
 80a1420:	bf00      	nop
 80a1422:	bf00      	nop
 80a1424:	bf00      	nop
 80a1426:	bf00      	nop
 80a1428:	bf00      	nop
 80a142a:	bf00      	nop
 80a142c:	bf00      	nop
 80a142e:	bf00      	nop
 80a1430:	bf00      	nop
 80a1432:	bf00      	nop
 80a1434:	bf00      	nop
 80a1436:	bf00      	nop
 80a1438:	bf00      	nop
          // TM1803 spec             1.36us LOW
          // Pololu on Arduino      (meas. 2.00us)
          // This lib on Spark Core (meas. 1.36us)
          // This lib on Photon     (meas. 1.36us)
          pinSet(pin, LOW); // LOW
 80a143a:	79e3      	ldrb	r3, [r4, #7]
 80a143c:	6810      	ldr	r0, [r2, #0]
 80a143e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1442:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1446:	88bf      	ldrh	r7, [r7, #4]
 80a1448:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a144c:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a144e:	4600      	mov	r0, r0
 80a1450:	bf00      	nop
 80a1452:	bf00      	nop
 80a1454:	bf00      	nop
 80a1456:	bf00      	nop
 80a1458:	bf00      	nop
 80a145a:	bf00      	nop
 80a145c:	bf00      	nop
 80a145e:	bf00      	nop
 80a1460:	bf00      	nop
 80a1462:	bf00      	nop
 80a1464:	bf00      	nop
 80a1466:	bf00      	nop
 80a1468:	bf00      	nop
 80a146a:	bf00      	nop
 80a146c:	bf00      	nop
 80a146e:	bf00      	nop
 80a1470:	bf00      	nop
 80a1472:	bf00      	nop
 80a1474:	bf00      	nop
 80a1476:	bf00      	nop
 80a1478:	bf00      	nop
 80a147a:	bf00      	nop
 80a147c:	bf00      	nop
 80a147e:	bf00      	nop
 80a1480:	bf00      	nop
 80a1482:	bf00      	nop
 80a1484:	bf00      	nop
 80a1486:	bf00      	nop
 80a1488:	bf00      	nop
 80a148a:	bf00      	nop
 80a148c:	bf00      	nop
 80a148e:	bf00      	nop
 80a1490:	bf00      	nop
 80a1492:	bf00      	nop
 80a1494:	bf00      	nop
 80a1496:	bf00      	nop
 80a1498:	bf00      	nop
 80a149a:	bf00      	nop
 80a149c:	bf00      	nop
 80a149e:	bf00      	nop
 80a14a0:	bf00      	nop
 80a14a2:	bf00      	nop
 80a14a4:	bf00      	nop
 80a14a6:	bf00      	nop
 80a14a8:	bf00      	nop
 80a14aa:	bf00      	nop
 80a14ac:	bf00      	nop
 80a14ae:	bf00      	nop
 80a14b0:	bf00      	nop
 80a14b2:	bf00      	nop
 80a14b4:	bf00      	nop
 80a14b6:	bf00      	nop
 80a14b8:	bf00      	nop
 80a14ba:	bf00      	nop
 80a14bc:	bf00      	nop
 80a14be:	bf00      	nop
 80a14c0:	bf00      	nop
 80a14c2:	bf00      	nop
 80a14c4:	bf00      	nop
 80a14c6:	bf00      	nop
 80a14c8:	bf00      	nop
 80a14ca:	bf00      	nop
 80a14cc:	bf00      	nop
 80a14ce:	bf00      	nop
 80a14d0:	bf00      	nop
 80a14d2:	bf00      	nop
 80a14d4:	bf00      	nop
 80a14d6:	bf00      	nop
 80a14d8:	bf00      	nop
 80a14da:	bf00      	nop
 80a14dc:	bf00      	nop
 80a14de:	bf00      	nop
 80a14e0:	bf00      	nop
 80a14e2:	bf00      	nop
 80a14e4:	bf00      	nop
 80a14e6:	bf00      	nop
 80a14e8:	bf00      	nop
 80a14ea:	bf00      	nop
 80a14ec:	bf00      	nop
 80a14ee:	bf00      	nop
 80a14f0:	bf00      	nop
 80a14f2:	bf00      	nop
 80a14f4:	bf00      	nop
 80a14f6:	bf00      	nop
 80a14f8:	bf00      	nop
 80a14fa:	bf00      	nop
 80a14fc:	bf00      	nop
 80a14fe:	bf00      	nop
 80a1500:	bf00      	nop
 80a1502:	bf00      	nop
 80a1504:	bf00      	nop
 80a1506:	bf00      	nop
 80a1508:	bf00      	nop
 80a150a:	bf00      	nop
 80a150c:	bf00      	nop
 80a150e:	bf00      	nop
 80a1510:	bf00      	nop
 80a1512:	bf00      	nop
 80a1514:	bf00      	nop
 80a1516:	bf00      	nop
 80a1518:	bf00      	nop
 80a151a:	bf00      	nop
 80a151c:	bf00      	nop
 80a151e:	bf00      	nop
 80a1520:	bf00      	nop
 80a1522:	bf00      	nop
 80a1524:	bf00      	nop
 80a1526:	bf00      	nop
 80a1528:	bf00      	nop
 80a152a:	bf00      	nop
 80a152c:	bf00      	nop
 80a152e:	bf00      	nop
 80a1530:	bf00      	nop
 80a1532:	bf00      	nop
 80a1534:	bf00      	nop
 80a1536:	bf00      	nop
 80a1538:	bf00      	nop
 80a153a:	bf00      	nop
 80a153c:	bf00      	nop
 80a153e:	bf00      	nop
 80a1540:	bf00      	nop
 80a1542:	bf00      	nop
 80a1544:	bf00      	nop
 80a1546:	bf00      	nop
 80a1548:	bf00      	nop
 80a154a:	bf00      	nop
 80a154c:	bf00      	nop
 80a154e:	bf00      	nop
 80a1550:	bf00      	nop
 80a1552:	bf00      	nop
 80a1554:	bf00      	nop
 80a1556:	bf00      	nop
 80a1558:	bf00      	nop
 80a155a:	bf00      	nop
 80a155c:	bf00      	nop
 80a155e:	e710      	b.n	80a1382 <_ZN17Adafruit_NeoPixel4showEv+0xf92>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a1560:	468e      	mov	lr, r1
 80a1562:	e60d      	b.n	80a1180 <_ZN17Adafruit_NeoPixel4showEv+0xd90>

080a1564 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>:
  endTime = micros(); // Save EOD time for latch on next call
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
 80a1564:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a1566:	8844      	ldrh	r4, [r0, #2]
  endTime = micros(); // Save EOD time for latch on next call
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
 80a1568:	f89d 5014 	ldrb.w	r5, [sp, #20]
  if(n < numLEDs) {
 80a156c:	428c      	cmp	r4, r1
 80a156e:	d927      	bls.n	80a15c0 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x5c>
    if(brightness) { // See notes in setBrightness()
 80a1570:	7a04      	ldrb	r4, [r0, #8]
 80a1572:	b144      	cbz	r4, 80a1586 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x22>
      r = (r * brightness) >> 8;
 80a1574:	4362      	muls	r2, r4
      g = (g * brightness) >> 8;
 80a1576:	4363      	muls	r3, r4
      b = (b * brightness) >> 8;
 80a1578:	436c      	muls	r4, r5
// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
  if(n < numLEDs) {
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
 80a157a:	f3c2 2207 	ubfx	r2, r2, #8, #8
      g = (g * brightness) >> 8;
 80a157e:	f3c3 2307 	ubfx	r3, r3, #8, #8
      b = (b * brightness) >> 8;
 80a1582:	f3c4 2507 	ubfx	r5, r4, #8, #8
    }
    uint8_t *p = &pixels[n * 3];
    switch(type) {
 80a1586:	7987      	ldrb	r7, [r0, #6]
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    uint8_t *p = &pixels[n * 3];
 80a1588:	68c6      	ldr	r6, [r0, #12]
 80a158a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80a158e:	2f08      	cmp	r7, #8
 80a1590:	eb06 0401 	add.w	r4, r6, r1
 80a1594:	d811      	bhi.n	80a15ba <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x56>
 80a1596:	2001      	movs	r0, #1
 80a1598:	40b8      	lsls	r0, r7
 80a159a:	f410 7fd2 	tst.w	r0, #420	; 0x1a4
 80a159e:	d108      	bne.n	80a15b2 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x4e>
 80a15a0:	06c0      	lsls	r0, r0, #27
 80a15a2:	d50a      	bpl.n	80a15ba <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x56>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
 80a15a4:	2aff      	cmp	r2, #255	; 0xff
 80a15a6:	bf08      	it	eq
 80a15a8:	22fe      	moveq	r2, #254	; 0xfe
          *p++ = r;
 80a15aa:	5472      	strb	r2, [r6, r1]
          *p++ = b;
 80a15ac:	7065      	strb	r5, [r4, #1]
          *p = g;
 80a15ae:	70a3      	strb	r3, [r4, #2]
 80a15b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a15b2:	5473      	strb	r3, [r6, r1]
          *p++ = r;
 80a15b4:	7062      	strb	r2, [r4, #1]
          *p = b;
 80a15b6:	70a5      	strb	r5, [r4, #2]
 80a15b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p = g;
        } break;
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
 80a15ba:	5472      	strb	r2, [r6, r1]
          *p++ = g;
 80a15bc:	7063      	strb	r3, [r4, #1]
          *p = b;
 80a15be:	70a5      	strb	r5, [r4, #2]
 80a15c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a15c2 <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a15c2:	1c4a      	adds	r2, r1, #1
  if(newBrightness != brightness) { // Compare against prior value
 80a15c4:	7a03      	ldrb	r3, [r0, #8]
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a15c6:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
 80a15c8:	429a      	cmp	r2, r3
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.  C'est la vie.
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
 80a15ca:	b570      	push	{r4, r5, r6, lr}
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
 80a15cc:	d01e      	beq.n	80a160c <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
 80a15ce:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a15d0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a15d4:	68c4      	ldr	r4, [r0, #12]
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a15d6:	d00c      	beq.n	80a15f2 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
 80a15d8:	29ff      	cmp	r1, #255	; 0xff
 80a15da:	bf0f      	iteee	eq
 80a15dc:	f64f 71ff 	movweq	r1, #65535	; 0xffff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a15e0:	0211      	lslne	r1, r2, #8
 80a15e2:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
 80a15e6:	fb91 f3f3 	sdivne	r3, r1, r3
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
 80a15ea:	bf0c      	ite	eq
 80a15ec:	fb91 f3f3 	sdiveq	r3, r1, r3
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a15f0:	b29b      	uxthne	r3, r3
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a15f2:	4625      	mov	r5, r4
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a15f4:	1b29      	subs	r1, r5, r4
 80a15f6:	8886      	ldrh	r6, [r0, #4]
 80a15f8:	b289      	uxth	r1, r1
 80a15fa:	428e      	cmp	r6, r1
 80a15fc:	d905      	bls.n	80a160a <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x48>
      c      = *ptr;
 80a15fe:	7829      	ldrb	r1, [r5, #0]
      *ptr++ = (c * scale) >> 8;
 80a1600:	4359      	muls	r1, r3
 80a1602:	1209      	asrs	r1, r1, #8
 80a1604:	f805 1b01 	strb.w	r1, [r5], #1
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a1608:	e7f4      	b.n	80a15f4 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
    }
    brightness = newBrightness;
 80a160a:	7202      	strb	r2, [r0, #8]
 80a160c:	bd70      	pop	{r4, r5, r6, pc}

080a160e <_ZN17Adafruit_NeoPixel5clearEv>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
 80a160e:	8882      	ldrh	r2, [r0, #4]
 80a1610:	2100      	movs	r1, #0
 80a1612:	68c0      	ldr	r0, [r0, #12]
 80a1614:	f001 b85f 	b.w	80a26d6 <memset>

080a1618 <_GLOBAL__sub_I_PIN_MAP2>:
}
 80a1618:	b508      	push	{r3, lr}
 80a161a:	f000 f827 	bl	80a166c <HAL_Pin_Map>

#if PLATFORM_ID == 0 // Core (0)
  #define pinLO(_pin) (PIN_MAP[_pin].gpio_peripheral->BRR = PIN_MAP[_pin].gpio_pin)
  #define pinHI(_pin) (PIN_MAP[_pin].gpio_peripheral->BSRR = PIN_MAP[_pin].gpio_pin)
#elif (PLATFORM_ID == 6) || (PLATFORM_ID == 8) || (PLATFORM_ID == 10) || (PLATFORM_ID == 88) // Photon (6), P1 (8), Electron (10) or Redbear Duo (88)
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a161e:	f000 f825 	bl	80a166c <HAL_Pin_Map>
 80a1622:	4b01      	ldr	r3, [pc, #4]	; (80a1628 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
 80a1624:	6018      	str	r0, [r3, #0]
 80a1626:	bd08      	pop	{r3, pc}
 80a1628:	20000094 	.word	0x20000094

080a162c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a162c:	b508      	push	{r3, lr}
 80a162e:	4b02      	ldr	r3, [pc, #8]	; (80a1638 <os_mutex_create+0xc>)
 80a1630:	681b      	ldr	r3, [r3, #0]
 80a1632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1634:	9301      	str	r3, [sp, #4]
 80a1636:	bd08      	pop	{r3, pc}
 80a1638:	080601d0 	.word	0x080601d0

080a163c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a163c:	b508      	push	{r3, lr}
 80a163e:	4b02      	ldr	r3, [pc, #8]	; (80a1648 <HAL_RNG_GetRandomNumber+0xc>)
 80a1640:	681b      	ldr	r3, [r3, #0]
 80a1642:	685b      	ldr	r3, [r3, #4]
 80a1644:	9301      	str	r3, [sp, #4]
 80a1646:	bd08      	pop	{r3, pc}
 80a1648:	0806019c 	.word	0x0806019c

080a164c <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a164c:	b508      	push	{r3, lr}
 80a164e:	4b02      	ldr	r3, [pc, #8]	; (80a1658 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a1650:	681b      	ldr	r3, [r3, #0]
 80a1652:	691b      	ldr	r3, [r3, #16]
 80a1654:	9301      	str	r3, [sp, #4]
 80a1656:	bd08      	pop	{r3, pc}
 80a1658:	0806019c 	.word	0x0806019c

080a165c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a165c:	b508      	push	{r3, lr}
 80a165e:	4b02      	ldr	r3, [pc, #8]	; (80a1668 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1660:	681b      	ldr	r3, [r3, #0]
 80a1662:	695b      	ldr	r3, [r3, #20]
 80a1664:	9301      	str	r3, [sp, #4]
 80a1666:	bd08      	pop	{r3, pc}
 80a1668:	0806019c 	.word	0x0806019c

080a166c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a166c:	b508      	push	{r3, lr}
 80a166e:	4b02      	ldr	r3, [pc, #8]	; (80a1678 <HAL_Pin_Map+0xc>)
 80a1670:	681b      	ldr	r3, [r3, #0]
 80a1672:	681b      	ldr	r3, [r3, #0]
 80a1674:	9301      	str	r3, [sp, #4]
 80a1676:	bd08      	pop	{r3, pc}
 80a1678:	080601b0 	.word	0x080601b0

080a167c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a167c:	b508      	push	{r3, lr}
 80a167e:	4b02      	ldr	r3, [pc, #8]	; (80a1688 <HAL_Pin_Mode+0xc>)
 80a1680:	681b      	ldr	r3, [r3, #0]
 80a1682:	689b      	ldr	r3, [r3, #8]
 80a1684:	9301      	str	r3, [sp, #4]
 80a1686:	bd08      	pop	{r3, pc}
 80a1688:	080601b0 	.word	0x080601b0

080a168c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a168c:	b508      	push	{r3, lr}
 80a168e:	4b02      	ldr	r3, [pc, #8]	; (80a1698 <HAL_Get_Pin_Mode+0xc>)
 80a1690:	681b      	ldr	r3, [r3, #0]
 80a1692:	68db      	ldr	r3, [r3, #12]
 80a1694:	9301      	str	r3, [sp, #4]
 80a1696:	bd08      	pop	{r3, pc}
 80a1698:	080601b0 	.word	0x080601b0

080a169c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a169c:	b508      	push	{r3, lr}
 80a169e:	4b02      	ldr	r3, [pc, #8]	; (80a16a8 <HAL_GPIO_Write+0xc>)
 80a16a0:	681b      	ldr	r3, [r3, #0]
 80a16a2:	691b      	ldr	r3, [r3, #16]
 80a16a4:	9301      	str	r3, [sp, #4]
 80a16a6:	bd08      	pop	{r3, pc}
 80a16a8:	080601b0 	.word	0x080601b0

080a16ac <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a16ac:	b508      	push	{r3, lr}
 80a16ae:	4b02      	ldr	r3, [pc, #8]	; (80a16b8 <HAL_I2C_Write_Data+0xc>)
 80a16b0:	681b      	ldr	r3, [r3, #0]
 80a16b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a16b4:	9301      	str	r3, [sp, #4]
 80a16b6:	bd08      	pop	{r3, pc}
 80a16b8:	080601ac 	.word	0x080601ac

080a16bc <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a16bc:	b508      	push	{r3, lr}
 80a16be:	4b02      	ldr	r3, [pc, #8]	; (80a16c8 <HAL_I2C_Available_Data+0xc>)
 80a16c0:	681b      	ldr	r3, [r3, #0]
 80a16c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a16c4:	9301      	str	r3, [sp, #4]
 80a16c6:	bd08      	pop	{r3, pc}
 80a16c8:	080601ac 	.word	0x080601ac

080a16cc <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a16cc:	b508      	push	{r3, lr}
 80a16ce:	4b02      	ldr	r3, [pc, #8]	; (80a16d8 <HAL_I2C_Read_Data+0xc>)
 80a16d0:	681b      	ldr	r3, [r3, #0]
 80a16d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a16d4:	9301      	str	r3, [sp, #4]
 80a16d6:	bd08      	pop	{r3, pc}
 80a16d8:	080601ac 	.word	0x080601ac

080a16dc <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a16dc:	b508      	push	{r3, lr}
 80a16de:	4b02      	ldr	r3, [pc, #8]	; (80a16e8 <HAL_I2C_Peek_Data+0xc>)
 80a16e0:	681b      	ldr	r3, [r3, #0]
 80a16e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a16e4:	9301      	str	r3, [sp, #4]
 80a16e6:	bd08      	pop	{r3, pc}
 80a16e8:	080601ac 	.word	0x080601ac

080a16ec <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a16ec:	b508      	push	{r3, lr}
 80a16ee:	4b02      	ldr	r3, [pc, #8]	; (80a16f8 <HAL_I2C_Flush_Data+0xc>)
 80a16f0:	681b      	ldr	r3, [r3, #0]
 80a16f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a16f4:	9301      	str	r3, [sp, #4]
 80a16f6:	bd08      	pop	{r3, pc}
 80a16f8:	080601ac 	.word	0x080601ac

080a16fc <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a16fc:	b508      	push	{r3, lr}
 80a16fe:	4b02      	ldr	r3, [pc, #8]	; (80a1708 <HAL_I2C_Is_Enabled+0xc>)
 80a1700:	681b      	ldr	r3, [r3, #0]
 80a1702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1704:	9301      	str	r3, [sp, #4]
 80a1706:	bd08      	pop	{r3, pc}
 80a1708:	080601ac 	.word	0x080601ac

080a170c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a170c:	b508      	push	{r3, lr}
 80a170e:	4b03      	ldr	r3, [pc, #12]	; (80a171c <HAL_I2C_Init+0x10>)
 80a1710:	681b      	ldr	r3, [r3, #0]
 80a1712:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1716:	9301      	str	r3, [sp, #4]
 80a1718:	bd08      	pop	{r3, pc}
 80a171a:	0000      	.short	0x0000
 80a171c:	080601ac 	.word	0x080601ac

080a1720 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a1720:	b508      	push	{r3, lr}
 80a1722:	4b02      	ldr	r3, [pc, #8]	; (80a172c <HAL_SPI_Init+0xc>)
 80a1724:	681b      	ldr	r3, [r3, #0]
 80a1726:	69db      	ldr	r3, [r3, #28]
 80a1728:	9301      	str	r3, [sp, #4]
 80a172a:	bd08      	pop	{r3, pc}
 80a172c:	080601b4 	.word	0x080601b4

080a1730 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a1730:	b508      	push	{r3, lr}
 80a1732:	4b02      	ldr	r3, [pc, #8]	; (80a173c <HAL_SPI_Is_Enabled+0xc>)
 80a1734:	681b      	ldr	r3, [r3, #0]
 80a1736:	6a1b      	ldr	r3, [r3, #32]
 80a1738:	9301      	str	r3, [sp, #4]
 80a173a:	bd08      	pop	{r3, pc}
 80a173c:	080601b4 	.word	0x080601b4

080a1740 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1740:	b508      	push	{r3, lr}
 80a1742:	4b02      	ldr	r3, [pc, #8]	; (80a174c <HAL_USART_Init+0xc>)
 80a1744:	681b      	ldr	r3, [r3, #0]
 80a1746:	699b      	ldr	r3, [r3, #24]
 80a1748:	9301      	str	r3, [sp, #4]
 80a174a:	bd08      	pop	{r3, pc}
 80a174c:	080601c4 	.word	0x080601c4

080a1750 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1750:	b508      	push	{r3, lr}
 80a1752:	4b02      	ldr	r3, [pc, #8]	; (80a175c <HAL_USART_Write_Data+0xc>)
 80a1754:	681b      	ldr	r3, [r3, #0]
 80a1756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1758:	9301      	str	r3, [sp, #4]
 80a175a:	bd08      	pop	{r3, pc}
 80a175c:	080601c4 	.word	0x080601c4

080a1760 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1760:	b508      	push	{r3, lr}
 80a1762:	4b02      	ldr	r3, [pc, #8]	; (80a176c <HAL_USART_Available_Data+0xc>)
 80a1764:	681b      	ldr	r3, [r3, #0]
 80a1766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1768:	9301      	str	r3, [sp, #4]
 80a176a:	bd08      	pop	{r3, pc}
 80a176c:	080601c4 	.word	0x080601c4

080a1770 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1770:	b508      	push	{r3, lr}
 80a1772:	4b02      	ldr	r3, [pc, #8]	; (80a177c <HAL_USART_Read_Data+0xc>)
 80a1774:	681b      	ldr	r3, [r3, #0]
 80a1776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1778:	9301      	str	r3, [sp, #4]
 80a177a:	bd08      	pop	{r3, pc}
 80a177c:	080601c4 	.word	0x080601c4

080a1780 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1780:	b508      	push	{r3, lr}
 80a1782:	4b02      	ldr	r3, [pc, #8]	; (80a178c <HAL_USART_Peek_Data+0xc>)
 80a1784:	681b      	ldr	r3, [r3, #0]
 80a1786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1788:	9301      	str	r3, [sp, #4]
 80a178a:	bd08      	pop	{r3, pc}
 80a178c:	080601c4 	.word	0x080601c4

080a1790 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a1790:	b508      	push	{r3, lr}
 80a1792:	4b02      	ldr	r3, [pc, #8]	; (80a179c <HAL_USART_Flush_Data+0xc>)
 80a1794:	681b      	ldr	r3, [r3, #0]
 80a1796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1798:	9301      	str	r3, [sp, #4]
 80a179a:	bd08      	pop	{r3, pc}
 80a179c:	080601c4 	.word	0x080601c4

080a17a0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a17a0:	b508      	push	{r3, lr}
 80a17a2:	4b02      	ldr	r3, [pc, #8]	; (80a17ac <HAL_USART_Is_Enabled+0xc>)
 80a17a4:	681b      	ldr	r3, [r3, #0]
 80a17a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a17a8:	9301      	str	r3, [sp, #4]
 80a17aa:	bd08      	pop	{r3, pc}
 80a17ac:	080601c4 	.word	0x080601c4

080a17b0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a17b0:	b508      	push	{r3, lr}
 80a17b2:	4b02      	ldr	r3, [pc, #8]	; (80a17bc <HAL_USART_Available_Data_For_Write+0xc>)
 80a17b4:	681b      	ldr	r3, [r3, #0]
 80a17b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a17b8:	9301      	str	r3, [sp, #4]
 80a17ba:	bd08      	pop	{r3, pc}
 80a17bc:	080601c4 	.word	0x080601c4

080a17c0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a17c0:	b508      	push	{r3, lr}
 80a17c2:	4b02      	ldr	r3, [pc, #8]	; (80a17cc <HAL_USB_USART_Init+0xc>)
 80a17c4:	681b      	ldr	r3, [r3, #0]
 80a17c6:	681b      	ldr	r3, [r3, #0]
 80a17c8:	9301      	str	r3, [sp, #4]
 80a17ca:	bd08      	pop	{r3, pc}
 80a17cc:	080601d8 	.word	0x080601d8

080a17d0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a17d0:	b508      	push	{r3, lr}
 80a17d2:	4b02      	ldr	r3, [pc, #8]	; (80a17dc <HAL_USB_USART_Available_Data+0xc>)
 80a17d4:	681b      	ldr	r3, [r3, #0]
 80a17d6:	691b      	ldr	r3, [r3, #16]
 80a17d8:	9301      	str	r3, [sp, #4]
 80a17da:	bd08      	pop	{r3, pc}
 80a17dc:	080601d8 	.word	0x080601d8

080a17e0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a17e0:	b508      	push	{r3, lr}
 80a17e2:	4b02      	ldr	r3, [pc, #8]	; (80a17ec <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a17e4:	681b      	ldr	r3, [r3, #0]
 80a17e6:	695b      	ldr	r3, [r3, #20]
 80a17e8:	9301      	str	r3, [sp, #4]
 80a17ea:	bd08      	pop	{r3, pc}
 80a17ec:	080601d8 	.word	0x080601d8

080a17f0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a17f0:	b508      	push	{r3, lr}
 80a17f2:	4b02      	ldr	r3, [pc, #8]	; (80a17fc <HAL_USB_USART_Receive_Data+0xc>)
 80a17f4:	681b      	ldr	r3, [r3, #0]
 80a17f6:	699b      	ldr	r3, [r3, #24]
 80a17f8:	9301      	str	r3, [sp, #4]
 80a17fa:	bd08      	pop	{r3, pc}
 80a17fc:	080601d8 	.word	0x080601d8

080a1800 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1800:	b508      	push	{r3, lr}
 80a1802:	4b02      	ldr	r3, [pc, #8]	; (80a180c <HAL_USB_USART_Send_Data+0xc>)
 80a1804:	681b      	ldr	r3, [r3, #0]
 80a1806:	69db      	ldr	r3, [r3, #28]
 80a1808:	9301      	str	r3, [sp, #4]
 80a180a:	bd08      	pop	{r3, pc}
 80a180c:	080601d8 	.word	0x080601d8

080a1810 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1810:	b508      	push	{r3, lr}
 80a1812:	4b02      	ldr	r3, [pc, #8]	; (80a181c <HAL_USB_USART_Flush_Data+0xc>)
 80a1814:	681b      	ldr	r3, [r3, #0]
 80a1816:	6a1b      	ldr	r3, [r3, #32]
 80a1818:	9301      	str	r3, [sp, #4]
 80a181a:	bd08      	pop	{r3, pc}
 80a181c:	080601d8 	.word	0x080601d8

080a1820 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1820:	b508      	push	{r3, lr}
 80a1822:	4b02      	ldr	r3, [pc, #8]	; (80a182c <inet_gethostbyname+0xc>)
 80a1824:	681b      	ldr	r3, [r3, #0]
 80a1826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1828:	9301      	str	r3, [sp, #4]
 80a182a:	bd08      	pop	{r3, pc}
 80a182c:	080601c0 	.word	0x080601c0

080a1830 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1830:	b508      	push	{r3, lr}
 80a1832:	4b02      	ldr	r3, [pc, #8]	; (80a183c <set_system_mode+0xc>)
 80a1834:	681b      	ldr	r3, [r3, #0]
 80a1836:	685b      	ldr	r3, [r3, #4]
 80a1838:	9301      	str	r3, [sp, #4]
 80a183a:	bd08      	pop	{r3, pc}
 80a183c:	080601a4 	.word	0x080601a4

080a1840 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1840:	b508      	push	{r3, lr}
 80a1842:	4b03      	ldr	r3, [pc, #12]	; (80a1850 <system_ctrl_set_app_request_handler+0x10>)
 80a1844:	681b      	ldr	r3, [r3, #0]
 80a1846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a184a:	9301      	str	r3, [sp, #4]
 80a184c:	bd08      	pop	{r3, pc}
 80a184e:	0000      	.short	0x0000
 80a1850:	080601a4 	.word	0x080601a4

080a1854 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1854:	b508      	push	{r3, lr}
 80a1856:	4b03      	ldr	r3, [pc, #12]	; (80a1864 <system_ctrl_set_result+0x10>)
 80a1858:	681b      	ldr	r3, [r3, #0]
 80a185a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a185e:	9301      	str	r3, [sp, #4]
 80a1860:	bd08      	pop	{r3, pc}
 80a1862:	0000      	.short	0x0000
 80a1864:	080601a4 	.word	0x080601a4

080a1868 <spark_subscribe>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 80a1868:	b508      	push	{r3, lr}
 80a186a:	4b02      	ldr	r3, [pc, #8]	; (80a1874 <spark_subscribe+0xc>)
 80a186c:	681b      	ldr	r3, [r3, #0]
 80a186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1870:	9301      	str	r3, [sp, #4]
 80a1872:	bd08      	pop	{r3, pc}
 80a1874:	080601cc 	.word	0x080601cc

080a1878 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1878:	b508      	push	{r3, lr}
 80a187a:	4b02      	ldr	r3, [pc, #8]	; (80a1884 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a187c:	681b      	ldr	r3, [r3, #0]
 80a187e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1880:	9301      	str	r3, [sp, #4]
 80a1882:	bd08      	pop	{r3, pc}
 80a1884:	080601cc 	.word	0x080601cc

080a1888 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1888:	b508      	push	{r3, lr}
 80a188a:	4b02      	ldr	r3, [pc, #8]	; (80a1894 <network_connect+0xc>)
 80a188c:	681b      	ldr	r3, [r3, #0]
 80a188e:	685b      	ldr	r3, [r3, #4]
 80a1890:	9301      	str	r3, [sp, #4]
 80a1892:	bd08      	pop	{r3, pc}
 80a1894:	080601c8 	.word	0x080601c8

080a1898 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1898:	b508      	push	{r3, lr}
 80a189a:	4b02      	ldr	r3, [pc, #8]	; (80a18a4 <network_connecting+0xc>)
 80a189c:	681b      	ldr	r3, [r3, #0]
 80a189e:	689b      	ldr	r3, [r3, #8]
 80a18a0:	9301      	str	r3, [sp, #4]
 80a18a2:	bd08      	pop	{r3, pc}
 80a18a4:	080601c8 	.word	0x080601c8

080a18a8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a18a8:	b508      	push	{r3, lr}
 80a18aa:	4b02      	ldr	r3, [pc, #8]	; (80a18b4 <network_disconnect+0xc>)
 80a18ac:	681b      	ldr	r3, [r3, #0]
 80a18ae:	68db      	ldr	r3, [r3, #12]
 80a18b0:	9301      	str	r3, [sp, #4]
 80a18b2:	bd08      	pop	{r3, pc}
 80a18b4:	080601c8 	.word	0x080601c8

080a18b8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a18b8:	b508      	push	{r3, lr}
 80a18ba:	4b02      	ldr	r3, [pc, #8]	; (80a18c4 <network_ready+0xc>)
 80a18bc:	681b      	ldr	r3, [r3, #0]
 80a18be:	691b      	ldr	r3, [r3, #16]
 80a18c0:	9301      	str	r3, [sp, #4]
 80a18c2:	bd08      	pop	{r3, pc}
 80a18c4:	080601c8 	.word	0x080601c8

080a18c8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a18c8:	b508      	push	{r3, lr}
 80a18ca:	4b02      	ldr	r3, [pc, #8]	; (80a18d4 <network_on+0xc>)
 80a18cc:	681b      	ldr	r3, [r3, #0]
 80a18ce:	695b      	ldr	r3, [r3, #20]
 80a18d0:	9301      	str	r3, [sp, #4]
 80a18d2:	bd08      	pop	{r3, pc}
 80a18d4:	080601c8 	.word	0x080601c8

080a18d8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a18d8:	b508      	push	{r3, lr}
 80a18da:	4b02      	ldr	r3, [pc, #8]	; (80a18e4 <network_off+0xc>)
 80a18dc:	681b      	ldr	r3, [r3, #0]
 80a18de:	699b      	ldr	r3, [r3, #24]
 80a18e0:	9301      	str	r3, [sp, #4]
 80a18e2:	bd08      	pop	{r3, pc}
 80a18e4:	080601c8 	.word	0x080601c8

080a18e8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a18e8:	b508      	push	{r3, lr}
 80a18ea:	4b02      	ldr	r3, [pc, #8]	; (80a18f4 <network_listen+0xc>)
 80a18ec:	681b      	ldr	r3, [r3, #0]
 80a18ee:	69db      	ldr	r3, [r3, #28]
 80a18f0:	9301      	str	r3, [sp, #4]
 80a18f2:	bd08      	pop	{r3, pc}
 80a18f4:	080601c8 	.word	0x080601c8

080a18f8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a18f8:	b508      	push	{r3, lr}
 80a18fa:	4b02      	ldr	r3, [pc, #8]	; (80a1904 <network_listening+0xc>)
 80a18fc:	681b      	ldr	r3, [r3, #0]
 80a18fe:	6a1b      	ldr	r3, [r3, #32]
 80a1900:	9301      	str	r3, [sp, #4]
 80a1902:	bd08      	pop	{r3, pc}
 80a1904:	080601c8 	.word	0x080601c8

080a1908 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1908:	b508      	push	{r3, lr}
 80a190a:	4b02      	ldr	r3, [pc, #8]	; (80a1914 <network_set_listen_timeout+0xc>)
 80a190c:	681b      	ldr	r3, [r3, #0]
 80a190e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1910:	9301      	str	r3, [sp, #4]
 80a1912:	bd08      	pop	{r3, pc}
 80a1914:	080601c8 	.word	0x080601c8

080a1918 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1918:	b508      	push	{r3, lr}
 80a191a:	4b02      	ldr	r3, [pc, #8]	; (80a1924 <network_get_listen_timeout+0xc>)
 80a191c:	681b      	ldr	r3, [r3, #0]
 80a191e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1920:	9301      	str	r3, [sp, #4]
 80a1922:	bd08      	pop	{r3, pc}
 80a1924:	080601c8 	.word	0x080601c8

080a1928 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1928:	b508      	push	{r3, lr}
 80a192a:	4b02      	ldr	r3, [pc, #8]	; (80a1934 <malloc+0xc>)
 80a192c:	681b      	ldr	r3, [r3, #0]
 80a192e:	681b      	ldr	r3, [r3, #0]
 80a1930:	9301      	str	r3, [sp, #4]
 80a1932:	bd08      	pop	{r3, pc}
 80a1934:	080601a0 	.word	0x080601a0

080a1938 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1938:	b508      	push	{r3, lr}
 80a193a:	4b02      	ldr	r3, [pc, #8]	; (80a1944 <free+0xc>)
 80a193c:	681b      	ldr	r3, [r3, #0]
 80a193e:	685b      	ldr	r3, [r3, #4]
 80a1940:	9301      	str	r3, [sp, #4]
 80a1942:	bd08      	pop	{r3, pc}
 80a1944:	080601a0 	.word	0x080601a0

080a1948 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a1948:	b508      	push	{r3, lr}
 80a194a:	4b02      	ldr	r3, [pc, #8]	; (80a1954 <realloc+0xc>)
 80a194c:	681b      	ldr	r3, [r3, #0]
 80a194e:	689b      	ldr	r3, [r3, #8]
 80a1950:	9301      	str	r3, [sp, #4]
 80a1952:	bd08      	pop	{r3, pc}
 80a1954:	080601a0 	.word	0x080601a0

080a1958 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a1958:	b508      	push	{r3, lr}
 80a195a:	4b02      	ldr	r3, [pc, #8]	; (80a1964 <abort+0xc>)
 80a195c:	681b      	ldr	r3, [r3, #0]
 80a195e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1960:	9301      	str	r3, [sp, #4]
 80a1962:	bd08      	pop	{r3, pc}
 80a1964:	080601a0 	.word	0x080601a0

080a1968 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_>:
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
}

void CloudClass::call_wiring_event_handler(const void* handler_data, const char *event_name, const char *data)
{
 80a1968:	b507      	push	{r0, r1, r2, lr}
 80a196a:	e88d 0006 	stmia.w	sp, {r1, r2}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a196e:	6882      	ldr	r2, [r0, #8]
 80a1970:	b90a      	cbnz	r2, 80a1976 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_+0xe>
	__throw_bad_function_call();
 80a1972:	f000 fd4c 	bl	80a240e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1976:	68c3      	ldr	r3, [r0, #12]
 80a1978:	aa01      	add	r2, sp, #4
 80a197a:	4669      	mov	r1, sp
 80a197c:	4798      	blx	r3
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}
 80a197e:	b003      	add	sp, #12
 80a1980:	f85d fb04 	ldr.w	pc, [sp], #4

080a1984 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a1984:	4770      	bx	lr

080a1986 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1988:	4606      	mov	r6, r0
 80a198a:	4615      	mov	r5, r2
 80a198c:	460c      	mov	r4, r1
 80a198e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1990:	42bc      	cmp	r4, r7
 80a1992:	d006      	beq.n	80a19a2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1994:	6833      	ldr	r3, [r6, #0]
 80a1996:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a199a:	689b      	ldr	r3, [r3, #8]
 80a199c:	4630      	mov	r0, r6
 80a199e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a19a0:	e7f6      	b.n	80a1990 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a19a2:	4628      	mov	r0, r5
 80a19a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a19a6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a19a6:	2200      	movs	r2, #0
 80a19a8:	7c00      	ldrb	r0, [r0, #16]
 80a19aa:	f7ff be7f 	b.w	80a16ac <HAL_I2C_Write_Data>

080a19ae <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a19ae:	2100      	movs	r1, #0
 80a19b0:	7c00      	ldrb	r0, [r0, #16]
 80a19b2:	f7ff be83 	b.w	80a16bc <HAL_I2C_Available_Data>

080a19b6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a19b6:	2100      	movs	r1, #0
 80a19b8:	7c00      	ldrb	r0, [r0, #16]
 80a19ba:	f7ff be87 	b.w	80a16cc <HAL_I2C_Read_Data>

080a19be <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a19be:	2100      	movs	r1, #0
 80a19c0:	7c00      	ldrb	r0, [r0, #16]
 80a19c2:	f7ff be8b 	b.w	80a16dc <HAL_I2C_Peek_Data>

080a19c6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a19c6:	2100      	movs	r1, #0
 80a19c8:	7c00      	ldrb	r0, [r0, #16]
 80a19ca:	f7ff be8f 	b.w	80a16ec <HAL_I2C_Flush_Data>

080a19ce <_ZN7TwoWireD0Ev>:
 80a19ce:	b510      	push	{r4, lr}
 80a19d0:	4604      	mov	r4, r0
 80a19d2:	2114      	movs	r1, #20
 80a19d4:	f000 fd19 	bl	80a240a <_ZdlPvj>
 80a19d8:	4620      	mov	r0, r4
 80a19da:	bd10      	pop	{r4, pc}

080a19dc <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a19dc:	b510      	push	{r4, lr}
 80a19de:	4604      	mov	r4, r0
 80a19e0:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a19e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a19e6:	60a3      	str	r3, [r4, #8]
 80a19e8:	4b04      	ldr	r3, [pc, #16]	; (80a19fc <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a19ea:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a19ec:	7420      	strb	r0, [r4, #16]
 80a19ee:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a19f0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a19f2:	f7ff fe8b 	bl	80a170c <HAL_I2C_Init>

}
 80a19f6:	4620      	mov	r0, r4
 80a19f8:	bd10      	pop	{r4, pc}
 80a19fa:	bf00      	nop
 80a19fc:	080a27c8 	.word	0x080a27c8

080a1a00 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a1a00:	2100      	movs	r1, #0
 80a1a02:	7c00      	ldrb	r0, [r0, #16]
 80a1a04:	f7ff be7a 	b.w	80a16fc <HAL_I2C_Is_Enabled>

080a1a08 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1a08:	4770      	bx	lr

080a1a0a <_ZN9IPAddressD0Ev>:
 80a1a0a:	b510      	push	{r4, lr}
 80a1a0c:	4604      	mov	r4, r0
 80a1a0e:	2118      	movs	r1, #24
 80a1a10:	f000 fcfb 	bl	80a240a <_ZdlPvj>
 80a1a14:	4620      	mov	r0, r4
 80a1a16:	bd10      	pop	{r4, pc}

080a1a18 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1a1a:	460f      	mov	r7, r1
 80a1a1c:	f100 0608 	add.w	r6, r0, #8
 80a1a20:	1d05      	adds	r5, r0, #4
 80a1a22:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1a24:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1a28:	220a      	movs	r2, #10
 80a1a2a:	4638      	mov	r0, r7
 80a1a2c:	f000 f911 	bl	80a1c52 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1a30:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1a32:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1a34:	d007      	beq.n	80a1a46 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1a36:	2c00      	cmp	r4, #0
 80a1a38:	d0f4      	beq.n	80a1a24 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1a3a:	212e      	movs	r1, #46	; 0x2e
 80a1a3c:	4638      	mov	r0, r7
 80a1a3e:	f000 f8db 	bl	80a1bf8 <_ZN5Print5printEc>
 80a1a42:	4404      	add	r4, r0
 80a1a44:	e7ee      	b.n	80a1a24 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1a46:	4620      	mov	r0, r4
 80a1a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a1a4c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a1a4c:	b510      	push	{r4, lr}
 80a1a4e:	4604      	mov	r4, r0
 80a1a50:	4b04      	ldr	r3, [pc, #16]	; (80a1a64 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1a52:	2211      	movs	r2, #17
 80a1a54:	f840 3b04 	str.w	r3, [r0], #4
 80a1a58:	2100      	movs	r1, #0
 80a1a5a:	f000 fe3c 	bl	80a26d6 <memset>
{
    clear();
}
 80a1a5e:	4620      	mov	r0, r4
 80a1a60:	bd10      	pop	{r4, pc}
 80a1a62:	bf00      	nop
 80a1a64:	080a27f0 	.word	0x080a27f0

080a1a68 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1a68:	4603      	mov	r3, r0
 80a1a6a:	4a07      	ldr	r2, [pc, #28]	; (80a1a88 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1a6c:	b510      	push	{r4, lr}
 80a1a6e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a1a72:	f101 0210 	add.w	r2, r1, #16
 80a1a76:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1a7a:	4291      	cmp	r1, r2
 80a1a7c:	f843 4b04 	str.w	r4, [r3], #4
 80a1a80:	d1f9      	bne.n	80a1a76 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1a82:	780a      	ldrb	r2, [r1, #0]
 80a1a84:	701a      	strb	r2, [r3, #0]
}
 80a1a86:	bd10      	pop	{r4, pc}
 80a1a88:	080a27f0 	.word	0x080a27f0

080a1a8c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1a8c:	4a02      	ldr	r2, [pc, #8]	; (80a1a98 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a1a8e:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1a90:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1a92:	2204      	movs	r2, #4
 80a1a94:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a1a96:	4770      	bx	lr
 80a1a98:	080a27f0 	.word	0x080a27f0

080a1a9c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a1a9c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1a9e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1aa2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1aa6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a1aaa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a1aae:	2304      	movs	r3, #4
 80a1ab0:	6041      	str	r1, [r0, #4]
 80a1ab2:	7503      	strb	r3, [r0, #20]
 80a1ab4:	bd10      	pop	{r4, pc}
	...

080a1ab8 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1ab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1aba:	4d04      	ldr	r5, [pc, #16]	; (80a1acc <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1abc:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1abe:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1ac2:	9500      	str	r5, [sp, #0]
 80a1ac4:	f7ff ffea 	bl	80a1a9c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1ac8:	b003      	add	sp, #12
 80a1aca:	bd30      	pop	{r4, r5, pc}
 80a1acc:	080a27f0 	.word	0x080a27f0

080a1ad0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1ad0:	4a01      	ldr	r2, [pc, #4]	; (80a1ad8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1ad2:	4b02      	ldr	r3, [pc, #8]	; (80a1adc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1ad4:	601a      	str	r2, [r3, #0]
 80a1ad6:	4770      	bx	lr
 80a1ad8:	080a2872 	.word	0x080a2872
 80a1adc:	20000098 	.word	0x20000098

080a1ae0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1ae0:	2300      	movs	r3, #0
 80a1ae2:	461a      	mov	r2, r3
 80a1ae4:	6840      	ldr	r0, [r0, #4]
 80a1ae6:	f7ff becf 	b.w	80a1888 <network_connect>

080a1aea <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1aea:	2200      	movs	r2, #0
 80a1aec:	2102      	movs	r1, #2
 80a1aee:	6840      	ldr	r0, [r0, #4]
 80a1af0:	f7ff beda 	b.w	80a18a8 <network_disconnect>

080a1af4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1af4:	2200      	movs	r2, #0
 80a1af6:	4611      	mov	r1, r2
 80a1af8:	6840      	ldr	r0, [r0, #4]
 80a1afa:	f7ff becd 	b.w	80a1898 <network_connecting>

080a1afe <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1afe:	2200      	movs	r2, #0
 80a1b00:	4611      	mov	r1, r2
 80a1b02:	6840      	ldr	r0, [r0, #4]
 80a1b04:	f7ff bed8 	b.w	80a18b8 <network_ready>

080a1b08 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1b08:	2300      	movs	r3, #0
 80a1b0a:	461a      	mov	r2, r3
 80a1b0c:	4619      	mov	r1, r3
 80a1b0e:	6840      	ldr	r0, [r0, #4]
 80a1b10:	f7ff beda 	b.w	80a18c8 <network_on>

080a1b14 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1b14:	2300      	movs	r3, #0
 80a1b16:	461a      	mov	r2, r3
 80a1b18:	4619      	mov	r1, r3
 80a1b1a:	6840      	ldr	r0, [r0, #4]
 80a1b1c:	f7ff bedc 	b.w	80a18d8 <network_off>

080a1b20 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1b20:	2200      	movs	r2, #0
 80a1b22:	f081 0101 	eor.w	r1, r1, #1
 80a1b26:	6840      	ldr	r0, [r0, #4]
 80a1b28:	f7ff bede 	b.w	80a18e8 <network_listen>

080a1b2c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1b2c:	2200      	movs	r2, #0
 80a1b2e:	6840      	ldr	r0, [r0, #4]
 80a1b30:	f7ff beea 	b.w	80a1908 <network_set_listen_timeout>

080a1b34 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1b34:	2200      	movs	r2, #0
 80a1b36:	4611      	mov	r1, r2
 80a1b38:	6840      	ldr	r0, [r0, #4]
 80a1b3a:	f7ff beed 	b.w	80a1918 <network_get_listen_timeout>

080a1b3e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1b3e:	2200      	movs	r2, #0
 80a1b40:	4611      	mov	r1, r2
 80a1b42:	6840      	ldr	r0, [r0, #4]
 80a1b44:	f7ff bed8 	b.w	80a18f8 <network_listening>

080a1b48 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1b48:	b570      	push	{r4, r5, r6, lr}
 80a1b4a:	4616      	mov	r6, r2
 80a1b4c:	b08e      	sub	sp, #56	; 0x38
 80a1b4e:	4604      	mov	r4, r0
    IPAddress addr;
 80a1b50:	a808      	add	r0, sp, #32
 80a1b52:	f7ff ff7b 	bl	80a1a4c <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a1b56:	2211      	movs	r2, #17
 80a1b58:	2100      	movs	r1, #0
 80a1b5a:	a803      	add	r0, sp, #12
 80a1b5c:	f000 fdbb 	bl	80a26d6 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1b60:	4630      	mov	r0, r6
 80a1b62:	f000 fdf3 	bl	80a274c <strlen>
 80a1b66:	2500      	movs	r5, #0
 80a1b68:	4b0a      	ldr	r3, [pc, #40]	; (80a1b94 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1b6a:	9500      	str	r5, [sp, #0]
 80a1b6c:	b281      	uxth	r1, r0
 80a1b6e:	685b      	ldr	r3, [r3, #4]
 80a1b70:	aa03      	add	r2, sp, #12
 80a1b72:	4630      	mov	r0, r6
 80a1b74:	f7ff fe54 	bl	80a1820 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1b78:	b120      	cbz	r0, 80a1b84 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a1b7a:	4629      	mov	r1, r5
 80a1b7c:	4620      	mov	r0, r4
 80a1b7e:	f7ff ff85 	bl	80a1a8c <_ZN9IPAddressC1Em>
 80a1b82:	e003      	b.n	80a1b8c <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a1b84:	a903      	add	r1, sp, #12
 80a1b86:	4620      	mov	r0, r4
 80a1b88:	f7ff ff6e 	bl	80a1a68 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1b8c:	4620      	mov	r0, r4
 80a1b8e:	b00e      	add	sp, #56	; 0x38
 80a1b90:	bd70      	pop	{r4, r5, r6, pc}
 80a1b92:	bf00      	nop
 80a1b94:	2000051c 	.word	0x2000051c

080a1b98 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1b98:	4b02      	ldr	r3, [pc, #8]	; (80a1ba4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1b9a:	4a03      	ldr	r2, [pc, #12]	; (80a1ba8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1b9c:	601a      	str	r2, [r3, #0]
 80a1b9e:	2200      	movs	r2, #0
 80a1ba0:	605a      	str	r2, [r3, #4]
 80a1ba2:	4770      	bx	lr
 80a1ba4:	2000009c 	.word	0x2000009c
 80a1ba8:	080a28e8 	.word	0x080a28e8

080a1bac <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1bae:	4606      	mov	r6, r0
 80a1bb0:	460d      	mov	r5, r1
 80a1bb2:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1bb4:	2400      	movs	r4, #0
  while (size--) {
 80a1bb6:	42bd      	cmp	r5, r7
 80a1bb8:	d00c      	beq.n	80a1bd4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1bba:	6833      	ldr	r3, [r6, #0]
 80a1bbc:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1bc0:	689b      	ldr	r3, [r3, #8]
 80a1bc2:	4630      	mov	r0, r6
 80a1bc4:	4798      	blx	r3
     if (chunk>=0)
 80a1bc6:	2800      	cmp	r0, #0
 80a1bc8:	db01      	blt.n	80a1bce <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1bca:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1bcc:	e7f3      	b.n	80a1bb6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1bce:	2c00      	cmp	r4, #0
 80a1bd0:	bf08      	it	eq
 80a1bd2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1bd4:	4620      	mov	r0, r4
 80a1bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1bd8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1bd8:	b570      	push	{r4, r5, r6, lr}
 80a1bda:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1bdc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1bde:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1be0:	b149      	cbz	r1, 80a1bf6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1be2:	f000 fdb3 	bl	80a274c <strlen>
 80a1be6:	682b      	ldr	r3, [r5, #0]
 80a1be8:	4602      	mov	r2, r0
 80a1bea:	4621      	mov	r1, r4
 80a1bec:	4628      	mov	r0, r5
    }
 80a1bee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1bf2:	68db      	ldr	r3, [r3, #12]
 80a1bf4:	4718      	bx	r3
    }
 80a1bf6:	bd70      	pop	{r4, r5, r6, pc}

080a1bf8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1bf8:	6803      	ldr	r3, [r0, #0]
 80a1bfa:	689b      	ldr	r3, [r3, #8]
 80a1bfc:	4718      	bx	r3

080a1bfe <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1bfe:	2a01      	cmp	r2, #1
 80a1c00:	bf98      	it	ls
 80a1c02:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1c04:	b530      	push	{r4, r5, lr}
 80a1c06:	460b      	mov	r3, r1
 80a1c08:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1c0a:	2100      	movs	r1, #0
 80a1c0c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1c10:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a1c14:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a1c18:	fb05 3312 	mls	r3, r5, r2, r3
 80a1c1c:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1c1e:	2b09      	cmp	r3, #9
 80a1c20:	bf94      	ite	ls
 80a1c22:	3330      	addls	r3, #48	; 0x30
 80a1c24:	3337      	addhi	r3, #55	; 0x37
 80a1c26:	b2db      	uxtb	r3, r3
 80a1c28:	4621      	mov	r1, r4
 80a1c2a:	f804 3901 	strb.w	r3, [r4], #-1
 80a1c2e:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1c30:	2d00      	cmp	r5, #0
 80a1c32:	d1ef      	bne.n	80a1c14 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1c34:	f7ff ffd0 	bl	80a1bd8 <_ZN5Print5writeEPKc>
}
 80a1c38:	b00b      	add	sp, #44	; 0x2c
 80a1c3a:	bd30      	pop	{r4, r5, pc}

080a1c3c <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a1c3c:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a1c3e:	b922      	cbnz	r2, 80a1c4a <_ZN5Print5printEmi+0xe>
 80a1c40:	6803      	ldr	r3, [r0, #0]
 80a1c42:	b2c9      	uxtb	r1, r1
 80a1c44:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a1c46:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a1c48:	4718      	bx	r3
  else return printNumber(n, base);
 80a1c4a:	b2d2      	uxtb	r2, r2
}
 80a1c4c:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1c4e:	f7ff bfd6 	b.w	80a1bfe <_ZN5Print11printNumberEmh>

080a1c52 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a1c52:	f7ff bff3 	b.w	80a1c3c <_ZN5Print5printEmi>

080a1c56 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1c56:	b510      	push	{r4, lr}
 80a1c58:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1c5a:	f7fe fac9 	bl	80a01f0 <_ZNSt14_Function_baseD1Ev>
 80a1c5e:	4620      	mov	r0, r4
 80a1c60:	bd10      	pop	{r4, pc}
	...

080a1c64 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1c64:	4803      	ldr	r0, [pc, #12]	; (80a1c74 <_GLOBAL__sub_I_RGB+0x10>)
 80a1c66:	2300      	movs	r3, #0
 80a1c68:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1c6a:	4a03      	ldr	r2, [pc, #12]	; (80a1c78 <_GLOBAL__sub_I_RGB+0x14>)
 80a1c6c:	4903      	ldr	r1, [pc, #12]	; (80a1c7c <_GLOBAL__sub_I_RGB+0x18>)
 80a1c6e:	f000 bbc7 	b.w	80a2400 <__aeabi_atexit>
 80a1c72:	bf00      	nop
 80a1c74:	200000a4 	.word	0x200000a4
 80a1c78:	2000006c 	.word	0x2000006c
 80a1c7c:	080a1c57 	.word	0x080a1c57

080a1c80 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a1c80:	4770      	bx	lr

080a1c82 <_ZN8SPIClassD0Ev>:
 80a1c82:	b510      	push	{r4, lr}
 80a1c84:	4604      	mov	r4, r0
 80a1c86:	2110      	movs	r1, #16
 80a1c88:	f000 fbbf 	bl	80a240a <_ZdlPvj>
 80a1c8c:	4620      	mov	r0, r4
 80a1c8e:	bd10      	pop	{r4, pc}

080a1c90 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1c90:	b570      	push	{r4, r5, r6, lr}
 80a1c92:	4604      	mov	r4, r0
 80a1c94:	460e      	mov	r6, r1
 80a1c96:	4b07      	ldr	r3, [pc, #28]	; (80a1cb4 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a1c98:	2500      	movs	r5, #0
 80a1c9a:	6003      	str	r3, [r0, #0]
 80a1c9c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a1ca0:	f7ff fcc4 	bl	80a162c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a1ca4:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a1ca6:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a1ca8:	f7ff fd3a 	bl	80a1720 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a1cac:	60a5      	str	r5, [r4, #8]
}
 80a1cae:	4620      	mov	r0, r4
 80a1cb0:	bd70      	pop	{r4, r5, r6, pc}
 80a1cb2:	bf00      	nop
 80a1cb4:	080a291c 	.word	0x080a291c

080a1cb8 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a1cb8:	7900      	ldrb	r0, [r0, #4]
 80a1cba:	f7ff bd39 	b.w	80a1730 <HAL_SPI_Is_Enabled>

080a1cbe <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1cbe:	b510      	push	{r4, lr}
 80a1cc0:	4604      	mov	r4, r0
{
	free(buffer);
 80a1cc2:	6800      	ldr	r0, [r0, #0]
 80a1cc4:	f7ff fe38 	bl	80a1938 <free>
}
 80a1cc8:	4620      	mov	r0, r4
 80a1cca:	bd10      	pop	{r4, pc}

080a1ccc <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1ccc:	b510      	push	{r4, lr}
 80a1cce:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1cd0:	6800      	ldr	r0, [r0, #0]
 80a1cd2:	b108      	cbz	r0, 80a1cd8 <_ZN6String10invalidateEv+0xc>
 80a1cd4:	f7ff fe30 	bl	80a1938 <free>
	buffer = NULL;
 80a1cd8:	2300      	movs	r3, #0
 80a1cda:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a1cdc:	60a3      	str	r3, [r4, #8]
 80a1cde:	6063      	str	r3, [r4, #4]
 80a1ce0:	bd10      	pop	{r4, pc}

080a1ce2 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1ce2:	b538      	push	{r3, r4, r5, lr}
 80a1ce4:	4604      	mov	r4, r0
 80a1ce6:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a1ce8:	6800      	ldr	r0, [r0, #0]
 80a1cea:	3101      	adds	r1, #1
 80a1cec:	f7ff fe2c 	bl	80a1948 <realloc>
	if (newbuffer) {
 80a1cf0:	b110      	cbz	r0, 80a1cf8 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1cf2:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a1cf6:	2001      	movs	r0, #1
	}
	return 0;
}
 80a1cf8:	bd38      	pop	{r3, r4, r5, pc}

080a1cfa <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1cfa:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1cfc:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1cfe:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1d00:	b113      	cbz	r3, 80a1d08 <_ZN6String7reserveEj+0xe>
 80a1d02:	6843      	ldr	r3, [r0, #4]
 80a1d04:	428b      	cmp	r3, r1
 80a1d06:	d207      	bcs.n	80a1d18 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a1d08:	4620      	mov	r0, r4
 80a1d0a:	f7ff ffea 	bl	80a1ce2 <_ZN6String12changeBufferEj>
 80a1d0e:	b120      	cbz	r0, 80a1d1a <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a1d10:	68a3      	ldr	r3, [r4, #8]
 80a1d12:	b90b      	cbnz	r3, 80a1d18 <_ZN6String7reserveEj+0x1e>
 80a1d14:	6822      	ldr	r2, [r4, #0]
 80a1d16:	7013      	strb	r3, [r2, #0]
 80a1d18:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a1d1a:	bd10      	pop	{r4, pc}

080a1d1c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1d1c:	b570      	push	{r4, r5, r6, lr}
 80a1d1e:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a1d20:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1d22:	4604      	mov	r4, r0
 80a1d24:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1d26:	f7ff ffe8 	bl	80a1cfa <_ZN6String7reserveEj>
 80a1d2a:	b918      	cbnz	r0, 80a1d34 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a1d2c:	4620      	mov	r0, r4
 80a1d2e:	f7ff ffcd 	bl	80a1ccc <_ZN6String10invalidateEv>
		return *this;
 80a1d32:	e009      	b.n	80a1d48 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a1d34:	462a      	mov	r2, r5
 80a1d36:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a1d38:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1d3a:	6820      	ldr	r0, [r4, #0]
 80a1d3c:	f000 fcc0 	bl	80a26c0 <memcpy>
	buffer[len] = 0;
 80a1d40:	6822      	ldr	r2, [r4, #0]
 80a1d42:	68a3      	ldr	r3, [r4, #8]
 80a1d44:	2100      	movs	r1, #0
 80a1d46:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a1d48:	4620      	mov	r0, r4
 80a1d4a:	bd70      	pop	{r4, r5, r6, pc}

080a1d4c <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1d4c:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1d4e:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1d50:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1d52:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1d54:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1d56:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1d58:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a1d5a:	460d      	mov	r5, r1
 80a1d5c:	b139      	cbz	r1, 80a1d6e <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a1d5e:	4608      	mov	r0, r1
 80a1d60:	f000 fcf4 	bl	80a274c <strlen>
 80a1d64:	4629      	mov	r1, r5
 80a1d66:	4602      	mov	r2, r0
 80a1d68:	4620      	mov	r0, r4
 80a1d6a:	f7ff ffd7 	bl	80a1d1c <_ZN6String4copyEPKcj>
}
 80a1d6e:	4620      	mov	r0, r4
 80a1d70:	bd38      	pop	{r3, r4, r5, pc}

080a1d72 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a1d72:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a1d74:	b510      	push	{r4, lr}
 80a1d76:	460b      	mov	r3, r1
 80a1d78:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a1d7a:	d007      	beq.n	80a1d8c <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a1d7c:	6809      	ldr	r1, [r1, #0]
 80a1d7e:	b119      	cbz	r1, 80a1d88 <_ZN6StringaSERKS_+0x16>
 80a1d80:	689a      	ldr	r2, [r3, #8]
 80a1d82:	f7ff ffcb 	bl	80a1d1c <_ZN6String4copyEPKcj>
 80a1d86:	e001      	b.n	80a1d8c <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a1d88:	f7ff ffa0 	bl	80a1ccc <_ZN6String10invalidateEv>

	return *this;
}
 80a1d8c:	4620      	mov	r0, r4
 80a1d8e:	bd10      	pop	{r4, pc}

080a1d90 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a1d90:	b510      	push	{r4, lr}
 80a1d92:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1d94:	2300      	movs	r3, #0
 80a1d96:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1d98:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1d9a:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1d9c:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a1d9e:	f7ff ffe8 	bl	80a1d72 <_ZN6StringaSERKS_>
}
 80a1da2:	4620      	mov	r0, r4
 80a1da4:	bd10      	pop	{r4, pc}

080a1da6 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a1da6:	b538      	push	{r3, r4, r5, lr}
 80a1da8:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a1daa:	460c      	mov	r4, r1
 80a1dac:	b141      	cbz	r1, 80a1dc0 <_ZN6StringaSEPKc+0x1a>
 80a1dae:	4608      	mov	r0, r1
 80a1db0:	f000 fccc 	bl	80a274c <strlen>
 80a1db4:	4621      	mov	r1, r4
 80a1db6:	4602      	mov	r2, r0
 80a1db8:	4628      	mov	r0, r5
 80a1dba:	f7ff ffaf 	bl	80a1d1c <_ZN6String4copyEPKcj>
 80a1dbe:	e001      	b.n	80a1dc4 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a1dc0:	f7ff ff84 	bl	80a1ccc <_ZN6String10invalidateEv>

	return *this;
}
 80a1dc4:	4628      	mov	r0, r5
 80a1dc6:	bd38      	pop	{r3, r4, r5, pc}

080a1dc8 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a1dc8:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a1dca:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a1dcc:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a1dce:	b912      	cbnz	r2, 80a1dd6 <_ZNK6String6equalsEPKc+0xe>
 80a1dd0:	b919      	cbnz	r1, 80a1dda <_ZNK6String6equalsEPKc+0x12>
 80a1dd2:	2001      	movs	r0, #1
 80a1dd4:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a1dd6:	b911      	cbnz	r1, 80a1dde <_ZNK6String6equalsEPKc+0x16>
 80a1dd8:	6803      	ldr	r3, [r0, #0]
 80a1dda:	7818      	ldrb	r0, [r3, #0]
 80a1ddc:	e002      	b.n	80a1de4 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80a1dde:	6800      	ldr	r0, [r0, #0]
 80a1de0:	f000 fcaa 	bl	80a2738 <strcmp>
 80a1de4:	fab0 f080 	clz	r0, r0
 80a1de8:	0940      	lsrs	r0, r0, #5
}
 80a1dea:	bd08      	pop	{r3, pc}

080a1dec <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a1dec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a1df0:	4b03      	ldr	r3, [pc, #12]	; (80a1e00 <_GLOBAL__sub_I_System+0x14>)
 80a1df2:	2000      	movs	r0, #0
 80a1df4:	7018      	strb	r0, [r3, #0]
 80a1df6:	8058      	strh	r0, [r3, #2]
 80a1df8:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1dfa:	f7ff bd19 	b.w	80a1830 <set_system_mode>
 80a1dfe:	bf00      	nop
 80a1e00:	200000b4 	.word	0x200000b4

080a1e04 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1e04:	4b02      	ldr	r3, [pc, #8]	; (80a1e10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1e06:	681a      	ldr	r2, [r3, #0]
 80a1e08:	4b02      	ldr	r3, [pc, #8]	; (80a1e14 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1e0a:	601a      	str	r2, [r3, #0]
 80a1e0c:	4770      	bx	lr
 80a1e0e:	bf00      	nop
 80a1e10:	20000004 	.word	0x20000004
 80a1e14:	200000bc 	.word	0x200000bc

080a1e18 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1e18:	4770      	bx	lr

080a1e1a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1e1a:	7441      	strb	r1, [r0, #17]
 80a1e1c:	4770      	bx	lr

080a1e1e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a1e1e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a1e20:	7c00      	ldrb	r0, [r0, #16]
 80a1e22:	f7ff fcc5 	bl	80a17b0 <HAL_USART_Available_Data_For_Write>
}
 80a1e26:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1e2a:	bd08      	pop	{r3, pc}

080a1e2c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1e2c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a1e2e:	7c00      	ldrb	r0, [r0, #16]
 80a1e30:	f7ff fc96 	bl	80a1760 <HAL_USART_Available_Data>
}
 80a1e34:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1e38:	bd08      	pop	{r3, pc}

080a1e3a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1e3a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a1e3c:	7c00      	ldrb	r0, [r0, #16]
 80a1e3e:	f7ff fc9f 	bl	80a1780 <HAL_USART_Peek_Data>
}
 80a1e42:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1e46:	bf28      	it	cs
 80a1e48:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1e4c:	bd08      	pop	{r3, pc}

080a1e4e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1e4e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a1e50:	7c00      	ldrb	r0, [r0, #16]
 80a1e52:	f7ff fc8d 	bl	80a1770 <HAL_USART_Read_Data>
}
 80a1e56:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1e5a:	bf28      	it	cs
 80a1e5c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1e60:	bd08      	pop	{r3, pc}

080a1e62 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a1e62:	7c00      	ldrb	r0, [r0, #16]
 80a1e64:	f7ff bc94 	b.w	80a1790 <HAL_USART_Flush_Data>

080a1e68 <_ZN11USARTSerialD0Ev>:
 80a1e68:	b510      	push	{r4, lr}
 80a1e6a:	4604      	mov	r4, r0
 80a1e6c:	2114      	movs	r1, #20
 80a1e6e:	f000 facc 	bl	80a240a <_ZdlPvj>
 80a1e72:	4620      	mov	r0, r4
 80a1e74:	bd10      	pop	{r4, pc}

080a1e76 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1e76:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1e78:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1e7a:	4604      	mov	r4, r0
 80a1e7c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1e7e:	b925      	cbnz	r5, 80a1e8a <_ZN11USARTSerial5writeEh+0x14>
 80a1e80:	7c00      	ldrb	r0, [r0, #16]
 80a1e82:	f7ff fc95 	bl	80a17b0 <HAL_USART_Available_Data_For_Write>
 80a1e86:	2800      	cmp	r0, #0
 80a1e88:	dd05      	ble.n	80a1e96 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1e8a:	4631      	mov	r1, r6
 80a1e8c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1e8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1e92:	f7ff bc5d 	b.w	80a1750 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1e96:	4628      	mov	r0, r5
 80a1e98:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1e9c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1e9c:	b510      	push	{r4, lr}
 80a1e9e:	4604      	mov	r4, r0
 80a1ea0:	4608      	mov	r0, r1
 80a1ea2:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1ea4:	2200      	movs	r2, #0
 80a1ea6:	6062      	str	r2, [r4, #4]
 80a1ea8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1eac:	60a2      	str	r2, [r4, #8]
 80a1eae:	4a05      	ldr	r2, [pc, #20]	; (80a1ec4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a1eb0:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1eb2:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a1eb4:	2201      	movs	r2, #1
 80a1eb6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1eb8:	461a      	mov	r2, r3
 80a1eba:	f7ff fc41 	bl	80a1740 <HAL_USART_Init>
}
 80a1ebe:	4620      	mov	r0, r4
 80a1ec0:	bd10      	pop	{r4, pc}
 80a1ec2:	bf00      	nop
 80a1ec4:	080a2958 	.word	0x080a2958

080a1ec8 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a1ec8:	7c00      	ldrb	r0, [r0, #16]
 80a1eca:	f7ff bc69 	b.w	80a17a0 <HAL_USART_Is_Enabled>
	...

080a1ed0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1ed0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1ed2:	4d0c      	ldr	r5, [pc, #48]	; (80a1f04 <_Z22__fetch_global_Serial1v+0x34>)
 80a1ed4:	6829      	ldr	r1, [r5, #0]
 80a1ed6:	f011 0401 	ands.w	r4, r1, #1
 80a1eda:	d111      	bne.n	80a1f00 <_Z22__fetch_global_Serial1v+0x30>
 80a1edc:	4628      	mov	r0, r5
 80a1ede:	f7fe f8e0 	bl	80a00a2 <__cxa_guard_acquire>
 80a1ee2:	b168      	cbz	r0, 80a1f00 <_Z22__fetch_global_Serial1v+0x30>
 80a1ee4:	4a08      	ldr	r2, [pc, #32]	; (80a1f08 <_Z22__fetch_global_Serial1v+0x38>)
 80a1ee6:	4621      	mov	r1, r4
 80a1ee8:	4b08      	ldr	r3, [pc, #32]	; (80a1f0c <_Z22__fetch_global_Serial1v+0x3c>)
 80a1eea:	4809      	ldr	r0, [pc, #36]	; (80a1f10 <_Z22__fetch_global_Serial1v+0x40>)
 80a1eec:	f7ff ffd6 	bl	80a1e9c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a1ef0:	4628      	mov	r0, r5
 80a1ef2:	f7fe f8db 	bl	80a00ac <__cxa_guard_release>
 80a1ef6:	4a07      	ldr	r2, [pc, #28]	; (80a1f14 <_Z22__fetch_global_Serial1v+0x44>)
 80a1ef8:	4907      	ldr	r1, [pc, #28]	; (80a1f18 <_Z22__fetch_global_Serial1v+0x48>)
 80a1efa:	4805      	ldr	r0, [pc, #20]	; (80a1f10 <_Z22__fetch_global_Serial1v+0x40>)
 80a1efc:	f000 fa80 	bl	80a2400 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1f00:	4803      	ldr	r0, [pc, #12]	; (80a1f10 <_Z22__fetch_global_Serial1v+0x40>)
 80a1f02:	bd38      	pop	{r3, r4, r5, pc}
 80a1f04:	20000158 	.word	0x20000158
 80a1f08:	2000015c 	.word	0x2000015c
 80a1f0c:	200000d4 	.word	0x200000d4
 80a1f10:	200000c0 	.word	0x200000c0
 80a1f14:	2000006c 	.word	0x2000006c
 80a1f18:	080a1e19 	.word	0x080a1e19

080a1f1c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1f1c:	7441      	strb	r1, [r0, #17]
 80a1f1e:	4770      	bx	lr

080a1f20 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1f20:	4770      	bx	lr

080a1f22 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a1f22:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1f24:	2100      	movs	r1, #0
 80a1f26:	7c00      	ldrb	r0, [r0, #16]
 80a1f28:	f7ff fc62 	bl	80a17f0 <HAL_USB_USART_Receive_Data>
}
 80a1f2c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1f30:	bf28      	it	cs
 80a1f32:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1f36:	bd08      	pop	{r3, pc}

080a1f38 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a1f38:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1f3a:	2101      	movs	r1, #1
 80a1f3c:	7c00      	ldrb	r0, [r0, #16]
 80a1f3e:	f7ff fc57 	bl	80a17f0 <HAL_USB_USART_Receive_Data>
}
 80a1f42:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1f46:	bf28      	it	cs
 80a1f48:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1f4c:	bd08      	pop	{r3, pc}

080a1f4e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a1f4e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1f50:	7c00      	ldrb	r0, [r0, #16]
 80a1f52:	f7ff fc45 	bl	80a17e0 <HAL_USB_USART_Available_Data_For_Write>
}
 80a1f56:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1f5a:	bd08      	pop	{r3, pc}

080a1f5c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a1f5c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1f5e:	7c00      	ldrb	r0, [r0, #16]
 80a1f60:	f7ff fc36 	bl	80a17d0 <HAL_USB_USART_Available_Data>
}
 80a1f64:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1f68:	bd08      	pop	{r3, pc}

080a1f6a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a1f6a:	7c00      	ldrb	r0, [r0, #16]
 80a1f6c:	f7ff bc50 	b.w	80a1810 <HAL_USB_USART_Flush_Data>

080a1f70 <_ZN9USBSerialD0Ev>:
 80a1f70:	b510      	push	{r4, lr}
 80a1f72:	4604      	mov	r4, r0
 80a1f74:	2114      	movs	r1, #20
 80a1f76:	f000 fa48 	bl	80a240a <_ZdlPvj>
 80a1f7a:	4620      	mov	r0, r4
 80a1f7c:	bd10      	pop	{r4, pc}

080a1f7e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1f7e:	b538      	push	{r3, r4, r5, lr}
 80a1f80:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1f82:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1f84:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1f86:	f7ff fc2b 	bl	80a17e0 <HAL_USB_USART_Available_Data_For_Write>
 80a1f8a:	2800      	cmp	r0, #0
 80a1f8c:	dc01      	bgt.n	80a1f92 <_ZN9USBSerial5writeEh+0x14>
 80a1f8e:	7c60      	ldrb	r0, [r4, #17]
 80a1f90:	b128      	cbz	r0, 80a1f9e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a1f92:	4629      	mov	r1, r5
 80a1f94:	7c20      	ldrb	r0, [r4, #16]
 80a1f96:	f7ff fc33 	bl	80a1800 <HAL_USB_USART_Send_Data>
 80a1f9a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a1f9e:	bd38      	pop	{r3, r4, r5, pc}

080a1fa0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1fa0:	b510      	push	{r4, lr}
 80a1fa2:	4604      	mov	r4, r0
 80a1fa4:	2300      	movs	r3, #0
 80a1fa6:	6063      	str	r3, [r4, #4]
 80a1fa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1fac:	60a3      	str	r3, [r4, #8]
 80a1fae:	4b05      	ldr	r3, [pc, #20]	; (80a1fc4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1fb0:	4608      	mov	r0, r1
 80a1fb2:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1fb4:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a1fb6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1fb8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a1fba:	4611      	mov	r1, r2
 80a1fbc:	f7ff fc00 	bl	80a17c0 <HAL_USB_USART_Init>
}
 80a1fc0:	4620      	mov	r0, r4
 80a1fc2:	bd10      	pop	{r4, pc}
 80a1fc4:	080a2988 	.word	0x080a2988

080a1fc8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a1fc8:	b510      	push	{r4, lr}
 80a1fca:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1fcc:	2214      	movs	r2, #20
 80a1fce:	2100      	movs	r1, #0
 80a1fd0:	f000 fb81 	bl	80a26d6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1fd4:	4b05      	ldr	r3, [pc, #20]	; (80a1fec <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1fd6:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1fd8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1fda:	4b05      	ldr	r3, [pc, #20]	; (80a1ff0 <_Z19acquireSerialBufferv+0x28>)
 80a1fdc:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1fde:	f240 1301 	movw	r3, #257	; 0x101
 80a1fe2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1fe4:	2381      	movs	r3, #129	; 0x81
 80a1fe6:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1fe8:	bd10      	pop	{r4, pc}
 80a1fea:	bf00      	nop
 80a1fec:	20000265 	.word	0x20000265
 80a1ff0:	200001e4 	.word	0x200001e4

080a1ff4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1ff4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1ff6:	4d0e      	ldr	r5, [pc, #56]	; (80a2030 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1ff8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1ffa:	a801      	add	r0, sp, #4
 80a1ffc:	f7ff ffe4 	bl	80a1fc8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2000:	6829      	ldr	r1, [r5, #0]
 80a2002:	f011 0401 	ands.w	r4, r1, #1
 80a2006:	d110      	bne.n	80a202a <_Z16_fetch_usbserialv+0x36>
 80a2008:	4628      	mov	r0, r5
 80a200a:	f7fe f84a 	bl	80a00a2 <__cxa_guard_acquire>
 80a200e:	b160      	cbz	r0, 80a202a <_Z16_fetch_usbserialv+0x36>
 80a2010:	aa01      	add	r2, sp, #4
 80a2012:	4621      	mov	r1, r4
 80a2014:	4807      	ldr	r0, [pc, #28]	; (80a2034 <_Z16_fetch_usbserialv+0x40>)
 80a2016:	f7ff ffc3 	bl	80a1fa0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a201a:	4628      	mov	r0, r5
 80a201c:	f7fe f846 	bl	80a00ac <__cxa_guard_release>
 80a2020:	4a05      	ldr	r2, [pc, #20]	; (80a2038 <_Z16_fetch_usbserialv+0x44>)
 80a2022:	4906      	ldr	r1, [pc, #24]	; (80a203c <_Z16_fetch_usbserialv+0x48>)
 80a2024:	4803      	ldr	r0, [pc, #12]	; (80a2034 <_Z16_fetch_usbserialv+0x40>)
 80a2026:	f000 f9eb 	bl	80a2400 <__aeabi_atexit>
	return _usbserial;
}
 80a202a:	4802      	ldr	r0, [pc, #8]	; (80a2034 <_Z16_fetch_usbserialv+0x40>)
 80a202c:	b007      	add	sp, #28
 80a202e:	bd30      	pop	{r4, r5, pc}
 80a2030:	200001e0 	.word	0x200001e0
 80a2034:	20000368 	.word	0x20000368
 80a2038:	2000006c 	.word	0x2000006c
 80a203c:	080a1f21 	.word	0x080a1f21

080a2040 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2040:	b510      	push	{r4, lr}
 80a2042:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2044:	2214      	movs	r2, #20
 80a2046:	2100      	movs	r1, #0
 80a2048:	f000 fb45 	bl	80a26d6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a204c:	4b05      	ldr	r3, [pc, #20]	; (80a2064 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a204e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2050:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a2052:	4b05      	ldr	r3, [pc, #20]	; (80a2068 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2054:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2056:	f240 1301 	movw	r3, #257	; 0x101
 80a205a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a205c:	2381      	movs	r3, #129	; 0x81
 80a205e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2060:	bd10      	pop	{r4, pc}
 80a2062:	bf00      	nop
 80a2064:	20000418 	.word	0x20000418
 80a2068:	20000380 	.word	0x20000380

080a206c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a206c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a206e:	4c0e      	ldr	r4, [pc, #56]	; (80a20a8 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a2070:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a2072:	a801      	add	r0, sp, #4
 80a2074:	f7ff ffe4 	bl	80a2040 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2078:	6823      	ldr	r3, [r4, #0]
 80a207a:	07db      	lsls	r3, r3, #31
 80a207c:	d410      	bmi.n	80a20a0 <_Z17_fetch_usbserial1v+0x34>
 80a207e:	4620      	mov	r0, r4
 80a2080:	f7fe f80f 	bl	80a00a2 <__cxa_guard_acquire>
 80a2084:	b160      	cbz	r0, 80a20a0 <_Z17_fetch_usbserial1v+0x34>
 80a2086:	aa01      	add	r2, sp, #4
 80a2088:	2101      	movs	r1, #1
 80a208a:	4808      	ldr	r0, [pc, #32]	; (80a20ac <_Z17_fetch_usbserial1v+0x40>)
 80a208c:	f7ff ff88 	bl	80a1fa0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2090:	4620      	mov	r0, r4
 80a2092:	f7fe f80b 	bl	80a00ac <__cxa_guard_release>
 80a2096:	4a06      	ldr	r2, [pc, #24]	; (80a20b0 <_Z17_fetch_usbserial1v+0x44>)
 80a2098:	4906      	ldr	r1, [pc, #24]	; (80a20b4 <_Z17_fetch_usbserial1v+0x48>)
 80a209a:	4804      	ldr	r0, [pc, #16]	; (80a20ac <_Z17_fetch_usbserial1v+0x40>)
 80a209c:	f000 f9b0 	bl	80a2400 <__aeabi_atexit>
  return _usbserial1;
}
 80a20a0:	4802      	ldr	r0, [pc, #8]	; (80a20ac <_Z17_fetch_usbserial1v+0x40>)
 80a20a2:	b006      	add	sp, #24
 80a20a4:	bd10      	pop	{r4, pc}
 80a20a6:	bf00      	nop
 80a20a8:	2000037c 	.word	0x2000037c
 80a20ac:	20000404 	.word	0x20000404
 80a20b0:	2000006c 	.word	0x2000006c
 80a20b4:	080a1f21 	.word	0x080a1f21

080a20b8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a20b8:	2200      	movs	r2, #0
 80a20ba:	4611      	mov	r1, r2
 80a20bc:	6840      	ldr	r0, [r0, #4]
 80a20be:	f7ff bbfb 	b.w	80a18b8 <network_ready>

080a20c2 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a20c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a20c4:	4616      	mov	r6, r2
 80a20c6:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a20c8:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a20ca:	460f      	mov	r7, r1
 80a20cc:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a20ce:	2100      	movs	r1, #0
 80a20d0:	a803      	add	r0, sp, #12
 80a20d2:	f000 fb00 	bl	80a26d6 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a20d6:	4630      	mov	r0, r6
 80a20d8:	f000 fb38 	bl	80a274c <strlen>
 80a20dc:	2500      	movs	r5, #0
 80a20de:	9500      	str	r5, [sp, #0]
 80a20e0:	b281      	uxth	r1, r0
 80a20e2:	687b      	ldr	r3, [r7, #4]
 80a20e4:	aa03      	add	r2, sp, #12
 80a20e6:	4630      	mov	r0, r6
 80a20e8:	f7ff fb9a 	bl	80a1820 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a20ec:	b120      	cbz	r0, 80a20f8 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a20ee:	4629      	mov	r1, r5
 80a20f0:	4620      	mov	r0, r4
 80a20f2:	f7ff fccb 	bl	80a1a8c <_ZN9IPAddressC1Em>
 80a20f6:	e003      	b.n	80a2100 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a20f8:	a903      	add	r1, sp, #12
 80a20fa:	4620      	mov	r0, r4
 80a20fc:	f7ff fcb4 	bl	80a1a68 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a2100:	4620      	mov	r0, r4
 80a2102:	b009      	add	sp, #36	; 0x24
 80a2104:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2106 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a2106:	2200      	movs	r2, #0
 80a2108:	4611      	mov	r1, r2
 80a210a:	6840      	ldr	r0, [r0, #4]
 80a210c:	f7ff bbf4 	b.w	80a18f8 <network_listening>

080a2110 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a2110:	2200      	movs	r2, #0
 80a2112:	4611      	mov	r1, r2
 80a2114:	6840      	ldr	r0, [r0, #4]
 80a2116:	f7ff bbff 	b.w	80a1918 <network_get_listen_timeout>

080a211a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a211a:	2200      	movs	r2, #0
 80a211c:	6840      	ldr	r0, [r0, #4]
 80a211e:	f7ff bbf3 	b.w	80a1908 <network_set_listen_timeout>

080a2122 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a2122:	2200      	movs	r2, #0
 80a2124:	f081 0101 	eor.w	r1, r1, #1
 80a2128:	6840      	ldr	r0, [r0, #4]
 80a212a:	f7ff bbdd 	b.w	80a18e8 <network_listen>

080a212e <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a212e:	2300      	movs	r3, #0
 80a2130:	461a      	mov	r2, r3
 80a2132:	4619      	mov	r1, r3
 80a2134:	6840      	ldr	r0, [r0, #4]
 80a2136:	f7ff bbcf 	b.w	80a18d8 <network_off>

080a213a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a213a:	2300      	movs	r3, #0
 80a213c:	461a      	mov	r2, r3
 80a213e:	4619      	mov	r1, r3
 80a2140:	6840      	ldr	r0, [r0, #4]
 80a2142:	f7ff bbc1 	b.w	80a18c8 <network_on>

080a2146 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a2146:	2200      	movs	r2, #0
 80a2148:	4611      	mov	r1, r2
 80a214a:	6840      	ldr	r0, [r0, #4]
 80a214c:	f7ff bba4 	b.w	80a1898 <network_connecting>

080a2150 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2150:	2200      	movs	r2, #0
 80a2152:	2102      	movs	r1, #2
 80a2154:	6840      	ldr	r0, [r0, #4]
 80a2156:	f7ff bba7 	b.w	80a18a8 <network_disconnect>

080a215a <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a215a:	2300      	movs	r3, #0
 80a215c:	461a      	mov	r2, r3
 80a215e:	6840      	ldr	r0, [r0, #4]
 80a2160:	f7ff bb92 	b.w	80a1888 <network_connect>

080a2164 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a2164:	4b02      	ldr	r3, [pc, #8]	; (80a2170 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2166:	2204      	movs	r2, #4
 80a2168:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a216a:	4a02      	ldr	r2, [pc, #8]	; (80a2174 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a216c:	601a      	str	r2, [r3, #0]
 80a216e:	4770      	bx	lr
 80a2170:	2000051c 	.word	0x2000051c
 80a2174:	080a29b8 	.word	0x080a29b8

080a2178 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a2178:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a217a:	4b14      	ldr	r3, [pc, #80]	; (80a21cc <serialEventRun+0x54>)
 80a217c:	b133      	cbz	r3, 80a218c <serialEventRun+0x14>
 80a217e:	f7ff ff39 	bl	80a1ff4 <_Z16_fetch_usbserialv>
 80a2182:	6803      	ldr	r3, [r0, #0]
 80a2184:	691b      	ldr	r3, [r3, #16]
 80a2186:	4798      	blx	r3
 80a2188:	2800      	cmp	r0, #0
 80a218a:	dc16      	bgt.n	80a21ba <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a218c:	4b10      	ldr	r3, [pc, #64]	; (80a21d0 <serialEventRun+0x58>)
 80a218e:	b133      	cbz	r3, 80a219e <serialEventRun+0x26>
 80a2190:	f7ff fe9e 	bl	80a1ed0 <_Z22__fetch_global_Serial1v>
 80a2194:	6803      	ldr	r3, [r0, #0]
 80a2196:	691b      	ldr	r3, [r3, #16]
 80a2198:	4798      	blx	r3
 80a219a:	2800      	cmp	r0, #0
 80a219c:	dc10      	bgt.n	80a21c0 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a219e:	4b0d      	ldr	r3, [pc, #52]	; (80a21d4 <serialEventRun+0x5c>)
 80a21a0:	b10b      	cbz	r3, 80a21a6 <serialEventRun+0x2e>
 80a21a2:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a21a6:	4b0c      	ldr	r3, [pc, #48]	; (80a21d8 <serialEventRun+0x60>)
 80a21a8:	b17b      	cbz	r3, 80a21ca <serialEventRun+0x52>
 80a21aa:	f7ff ff5f 	bl	80a206c <_Z17_fetch_usbserial1v>
 80a21ae:	6803      	ldr	r3, [r0, #0]
 80a21b0:	691b      	ldr	r3, [r3, #16]
 80a21b2:	4798      	blx	r3
 80a21b4:	2800      	cmp	r0, #0
 80a21b6:	dc06      	bgt.n	80a21c6 <serialEventRun+0x4e>
 80a21b8:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a21ba:	f3af 8000 	nop.w
 80a21be:	e7e5      	b.n	80a218c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a21c0:	f3af 8000 	nop.w
 80a21c4:	e7eb      	b.n	80a219e <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a21c6:	f3af 8000 	nop.w
 80a21ca:	bd08      	pop	{r3, pc}
	...

080a21dc <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a21dc:	b508      	push	{r3, lr}
	serialEventRun();
 80a21de:	f7ff ffcb 	bl	80a2178 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a21e2:	f7ff fa3b 	bl	80a165c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a21e6:	4b01      	ldr	r3, [pc, #4]	; (80a21ec <_post_loop+0x10>)
 80a21e8:	6018      	str	r0, [r3, #0]
 80a21ea:	bd08      	pop	{r3, pc}
 80a21ec:	2000052c 	.word	0x2000052c

080a21f0 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a21f0:	4802      	ldr	r0, [pc, #8]	; (80a21fc <_Z33system_initialize_user_backup_ramv+0xc>)
 80a21f2:	4a03      	ldr	r2, [pc, #12]	; (80a2200 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a21f4:	4903      	ldr	r1, [pc, #12]	; (80a2204 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a21f6:	1a12      	subs	r2, r2, r0
 80a21f8:	f000 ba62 	b.w	80a26c0 <memcpy>
 80a21fc:	40024000 	.word	0x40024000
 80a2200:	40024004 	.word	0x40024004
 80a2204:	080a2a80 	.word	0x080a2a80

080a2208 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2208:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a220a:	2300      	movs	r3, #0
 80a220c:	9300      	str	r3, [sp, #0]
 80a220e:	461a      	mov	r2, r3
 80a2210:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2214:	f7ff fb1e 	bl	80a1854 <system_ctrl_set_result>
}
 80a2218:	b003      	add	sp, #12
 80a221a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2220 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a2220:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2222:	8843      	ldrh	r3, [r0, #2]
 80a2224:	2b0a      	cmp	r3, #10
 80a2226:	d008      	beq.n	80a223a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2228:	2b50      	cmp	r3, #80	; 0x50
 80a222a:	d109      	bne.n	80a2240 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a222c:	4b09      	ldr	r3, [pc, #36]	; (80a2254 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a222e:	681b      	ldr	r3, [r3, #0]
 80a2230:	b13b      	cbz	r3, 80a2242 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a2232:	b003      	add	sp, #12
 80a2234:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a2238:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a223a:	f7ff ffe5 	bl	80a2208 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a223e:	e006      	b.n	80a224e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2240:	2300      	movs	r3, #0
 80a2242:	9300      	str	r3, [sp, #0]
 80a2244:	461a      	mov	r2, r3
 80a2246:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a224a:	f7ff fb03 	bl	80a1854 <system_ctrl_set_result>
        break;
    }
}
 80a224e:	b003      	add	sp, #12
 80a2250:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2254:	20000524 	.word	0x20000524

080a2258 <module_user_init_hook>:

void module_user_init_hook()
{
 80a2258:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a225a:	4c10      	ldr	r4, [pc, #64]	; (80a229c <module_user_init_hook+0x44>)
 80a225c:	4d10      	ldr	r5, [pc, #64]	; (80a22a0 <module_user_init_hook+0x48>)
 80a225e:	6823      	ldr	r3, [r4, #0]
 80a2260:	42ab      	cmp	r3, r5
 80a2262:	4b10      	ldr	r3, [pc, #64]	; (80a22a4 <module_user_init_hook+0x4c>)
 80a2264:	bf0c      	ite	eq
 80a2266:	2201      	moveq	r2, #1
 80a2268:	2200      	movne	r2, #0
 80a226a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a226c:	d002      	beq.n	80a2274 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a226e:	f7ff ffbf 	bl	80a21f0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a2272:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2274:	f7ff f9e2 	bl	80a163c <HAL_RNG_GetRandomNumber>
 80a2278:	4604      	mov	r4, r0
    srand(seed);
 80a227a:	f000 fa35 	bl	80a26e8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a227e:	4b0a      	ldr	r3, [pc, #40]	; (80a22a8 <module_user_init_hook+0x50>)
 80a2280:	b113      	cbz	r3, 80a2288 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a2282:	4620      	mov	r0, r4
 80a2284:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2288:	2100      	movs	r1, #0
 80a228a:	4807      	ldr	r0, [pc, #28]	; (80a22a8 <module_user_init_hook+0x50>)
 80a228c:	f7ff faf4 	bl	80a1878 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2290:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2294:	2100      	movs	r1, #0
 80a2296:	4805      	ldr	r0, [pc, #20]	; (80a22ac <module_user_init_hook+0x54>)
 80a2298:	f7ff bad2 	b.w	80a1840 <system_ctrl_set_app_request_handler>
 80a229c:	40024000 	.word	0x40024000
 80a22a0:	9a271c1e 	.word	0x9a271c1e
 80a22a4:	20000528 	.word	0x20000528
 80a22a8:	00000000 	.word	0x00000000
 80a22ac:	080a2221 	.word	0x080a2221

080a22b0 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a22b0:	b510      	push	{r4, lr}
 80a22b2:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a22b4:	480f      	ldr	r0, [pc, #60]	; (80a22f4 <pinAvailable+0x44>)
 80a22b6:	f7ff fcff 	bl	80a1cb8 <_ZN8SPIClass9isEnabledEv>
 80a22ba:	b128      	cbz	r0, 80a22c8 <pinAvailable+0x18>
 80a22bc:	f1a4 030d 	sub.w	r3, r4, #13
 80a22c0:	2b02      	cmp	r3, #2
 80a22c2:	d801      	bhi.n	80a22c8 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a22c4:	2000      	movs	r0, #0
 80a22c6:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a22c8:	f000 f840 	bl	80a234c <_Z19__fetch_global_Wirev>
 80a22cc:	f7ff fb98 	bl	80a1a00 <_ZN7TwoWire9isEnabledEv>
 80a22d0:	b108      	cbz	r0, 80a22d6 <pinAvailable+0x26>
 80a22d2:	2c01      	cmp	r4, #1
 80a22d4:	d9f6      	bls.n	80a22c4 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a22d6:	f7ff fdfb 	bl	80a1ed0 <_Z22__fetch_global_Serial1v>
 80a22da:	f7ff fdf5 	bl	80a1ec8 <_ZN11USARTSerial9isEnabledEv>
 80a22de:	b118      	cbz	r0, 80a22e8 <pinAvailable+0x38>
 80a22e0:	f1a4 0312 	sub.w	r3, r4, #18
 80a22e4:	2b01      	cmp	r3, #1
 80a22e6:	d9ed      	bls.n	80a22c4 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a22e8:	2c17      	cmp	r4, #23
 80a22ea:	bf8c      	ite	hi
 80a22ec:	2000      	movhi	r0, #0
 80a22ee:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a22f0:	bd10      	pop	{r4, pc}
 80a22f2:	bf00      	nop
 80a22f4:	20000560 	.word	0x20000560

080a22f8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a22f8:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a22fa:	b538      	push	{r3, r4, r5, lr}
 80a22fc:	4604      	mov	r4, r0
 80a22fe:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2300:	d80a      	bhi.n	80a2318 <pinMode+0x20>
 80a2302:	29ff      	cmp	r1, #255	; 0xff
 80a2304:	d008      	beq.n	80a2318 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a2306:	f7ff ffd3 	bl	80a22b0 <pinAvailable>
 80a230a:	b128      	cbz	r0, 80a2318 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a230c:	4629      	mov	r1, r5
 80a230e:	4620      	mov	r0, r4
}
 80a2310:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2314:	f7ff b9b2 	b.w	80a167c <HAL_Pin_Mode>
 80a2318:	bd38      	pop	{r3, r4, r5, pc}

080a231a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a231a:	b538      	push	{r3, r4, r5, lr}
 80a231c:	4604      	mov	r4, r0
 80a231e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2320:	f7ff f9b4 	bl	80a168c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2324:	28ff      	cmp	r0, #255	; 0xff
 80a2326:	d010      	beq.n	80a234a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a2328:	2806      	cmp	r0, #6
 80a232a:	d804      	bhi.n	80a2336 <digitalWrite+0x1c>
 80a232c:	234d      	movs	r3, #77	; 0x4d
 80a232e:	fa23 f000 	lsr.w	r0, r3, r0
 80a2332:	07c3      	lsls	r3, r0, #31
 80a2334:	d409      	bmi.n	80a234a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2336:	4620      	mov	r0, r4
 80a2338:	f7ff ffba 	bl	80a22b0 <pinAvailable>
 80a233c:	b128      	cbz	r0, 80a234a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a233e:	4629      	mov	r1, r5
 80a2340:	4620      	mov	r0, r4
}
 80a2342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2346:	f7ff b9a9 	b.w	80a169c <HAL_GPIO_Write>
 80a234a:	bd38      	pop	{r3, r4, r5, pc}

080a234c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a234c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a234e:	4d0b      	ldr	r5, [pc, #44]	; (80a237c <_Z19__fetch_global_Wirev+0x30>)
 80a2350:	6829      	ldr	r1, [r5, #0]
 80a2352:	f011 0401 	ands.w	r4, r1, #1
 80a2356:	d10f      	bne.n	80a2378 <_Z19__fetch_global_Wirev+0x2c>
 80a2358:	4628      	mov	r0, r5
 80a235a:	f7fd fea2 	bl	80a00a2 <__cxa_guard_acquire>
 80a235e:	b158      	cbz	r0, 80a2378 <_Z19__fetch_global_Wirev+0x2c>
 80a2360:	4621      	mov	r1, r4
 80a2362:	4807      	ldr	r0, [pc, #28]	; (80a2380 <_Z19__fetch_global_Wirev+0x34>)
 80a2364:	f7ff fb3a 	bl	80a19dc <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a2368:	4628      	mov	r0, r5
 80a236a:	f7fd fe9f 	bl	80a00ac <__cxa_guard_release>
 80a236e:	4a05      	ldr	r2, [pc, #20]	; (80a2384 <_Z19__fetch_global_Wirev+0x38>)
 80a2370:	4905      	ldr	r1, [pc, #20]	; (80a2388 <_Z19__fetch_global_Wirev+0x3c>)
 80a2372:	4803      	ldr	r0, [pc, #12]	; (80a2380 <_Z19__fetch_global_Wirev+0x34>)
 80a2374:	f000 f844 	bl	80a2400 <__aeabi_atexit>
	return wire;
}
 80a2378:	4801      	ldr	r0, [pc, #4]	; (80a2380 <_Z19__fetch_global_Wirev+0x34>)
 80a237a:	bd38      	pop	{r3, r4, r5, pc}
 80a237c:	20000530 	.word	0x20000530
 80a2380:	20000534 	.word	0x20000534
 80a2384:	2000006c 	.word	0x2000006c
 80a2388:	080a1985 	.word	0x080a1985

080a238c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a238c:	b513      	push	{r0, r1, r4, lr}
 80a238e:	4c08      	ldr	r4, [pc, #32]	; (80a23b0 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2390:	2300      	movs	r3, #0
 80a2392:	461a      	mov	r2, r3
 80a2394:	4619      	mov	r1, r3
 80a2396:	9300      	str	r3, [sp, #0]
 80a2398:	4620      	mov	r0, r4
 80a239a:	f7ff fb8d 	bl	80a1ab8 <_ZN9IPAddressC1Ehhhh>
 80a239e:	4620      	mov	r0, r4
 80a23a0:	4a04      	ldr	r2, [pc, #16]	; (80a23b4 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a23a2:	4905      	ldr	r1, [pc, #20]	; (80a23b8 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a23a4:	b002      	add	sp, #8
 80a23a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a23aa:	f000 b829 	b.w	80a2400 <__aeabi_atexit>
 80a23ae:	bf00      	nop
 80a23b0:	20000548 	.word	0x20000548
 80a23b4:	2000006c 	.word	0x2000006c
 80a23b8:	080a1a09 	.word	0x080a1a09

080a23bc <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a23bc:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a23be:	4c0c      	ldr	r4, [pc, #48]	; (80a23f0 <_GLOBAL__sub_I_SPI+0x34>)
 80a23c0:	4e0c      	ldr	r6, [pc, #48]	; (80a23f4 <_GLOBAL__sub_I_SPI+0x38>)
 80a23c2:	4d0d      	ldr	r5, [pc, #52]	; (80a23f8 <_GLOBAL__sub_I_SPI+0x3c>)
 80a23c4:	2100      	movs	r1, #0
 80a23c6:	4620      	mov	r0, r4
 80a23c8:	f7ff fc62 	bl	80a1c90 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a23cc:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a23ce:	4c0b      	ldr	r4, [pc, #44]	; (80a23fc <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a23d0:	4632      	mov	r2, r6
 80a23d2:	4629      	mov	r1, r5
 80a23d4:	f000 f814 	bl	80a2400 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a23d8:	2101      	movs	r1, #1
 80a23da:	4620      	mov	r0, r4
 80a23dc:	f7ff fc58 	bl	80a1c90 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a23e0:	4632      	mov	r2, r6
 80a23e2:	4629      	mov	r1, r5
 80a23e4:	4620      	mov	r0, r4
 80a23e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a23ea:	f000 b809 	b.w	80a2400 <__aeabi_atexit>
 80a23ee:	bf00      	nop
 80a23f0:	20000560 	.word	0x20000560
 80a23f4:	2000006c 	.word	0x2000006c
 80a23f8:	080a1c81 	.word	0x080a1c81
 80a23fc:	20000570 	.word	0x20000570

080a2400 <__aeabi_atexit>:
 80a2400:	460b      	mov	r3, r1
 80a2402:	4601      	mov	r1, r0
 80a2404:	4618      	mov	r0, r3
 80a2406:	f000 b94d 	b.w	80a26a4 <__cxa_atexit>

080a240a <_ZdlPvj>:
 80a240a:	f7fd be48 	b.w	80a009e <_ZdlPv>

080a240e <_ZSt25__throw_bad_function_callv>:
 80a240e:	b508      	push	{r3, lr}
 80a2410:	f7ff faa2 	bl	80a1958 <abort>

080a2414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a2414:	4b24      	ldr	r3, [pc, #144]	; (80a24a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a2416:	681a      	ldr	r2, [r3, #0]
 80a2418:	07d0      	lsls	r0, r2, #31
 80a241a:	bf5c      	itt	pl
 80a241c:	2201      	movpl	r2, #1
 80a241e:	601a      	strpl	r2, [r3, #0]
 80a2420:	4b22      	ldr	r3, [pc, #136]	; (80a24ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a2422:	681a      	ldr	r2, [r3, #0]
 80a2424:	07d1      	lsls	r1, r2, #31
 80a2426:	bf5c      	itt	pl
 80a2428:	2201      	movpl	r2, #1
 80a242a:	601a      	strpl	r2, [r3, #0]
 80a242c:	4b20      	ldr	r3, [pc, #128]	; (80a24b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a242e:	681a      	ldr	r2, [r3, #0]
 80a2430:	07d2      	lsls	r2, r2, #31
 80a2432:	bf5c      	itt	pl
 80a2434:	2201      	movpl	r2, #1
 80a2436:	601a      	strpl	r2, [r3, #0]
 80a2438:	4b1e      	ldr	r3, [pc, #120]	; (80a24b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a243a:	681a      	ldr	r2, [r3, #0]
 80a243c:	07d0      	lsls	r0, r2, #31
 80a243e:	bf5c      	itt	pl
 80a2440:	2201      	movpl	r2, #1
 80a2442:	601a      	strpl	r2, [r3, #0]
 80a2444:	4b1c      	ldr	r3, [pc, #112]	; (80a24b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a2446:	681a      	ldr	r2, [r3, #0]
 80a2448:	07d1      	lsls	r1, r2, #31
 80a244a:	bf5c      	itt	pl
 80a244c:	2201      	movpl	r2, #1
 80a244e:	601a      	strpl	r2, [r3, #0]
 80a2450:	4b1a      	ldr	r3, [pc, #104]	; (80a24bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a2452:	681a      	ldr	r2, [r3, #0]
 80a2454:	07d2      	lsls	r2, r2, #31
 80a2456:	bf5c      	itt	pl
 80a2458:	2201      	movpl	r2, #1
 80a245a:	601a      	strpl	r2, [r3, #0]
 80a245c:	4b18      	ldr	r3, [pc, #96]	; (80a24c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a245e:	681a      	ldr	r2, [r3, #0]
 80a2460:	07d0      	lsls	r0, r2, #31
 80a2462:	bf5c      	itt	pl
 80a2464:	2201      	movpl	r2, #1
 80a2466:	601a      	strpl	r2, [r3, #0]
 80a2468:	4b16      	ldr	r3, [pc, #88]	; (80a24c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a246a:	681a      	ldr	r2, [r3, #0]
 80a246c:	07d1      	lsls	r1, r2, #31
 80a246e:	bf5c      	itt	pl
 80a2470:	2201      	movpl	r2, #1
 80a2472:	601a      	strpl	r2, [r3, #0]
 80a2474:	4b14      	ldr	r3, [pc, #80]	; (80a24c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a2476:	681a      	ldr	r2, [r3, #0]
 80a2478:	07d2      	lsls	r2, r2, #31
 80a247a:	bf5c      	itt	pl
 80a247c:	2201      	movpl	r2, #1
 80a247e:	601a      	strpl	r2, [r3, #0]
 80a2480:	4b12      	ldr	r3, [pc, #72]	; (80a24cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a2482:	681a      	ldr	r2, [r3, #0]
 80a2484:	07d0      	lsls	r0, r2, #31
 80a2486:	bf5c      	itt	pl
 80a2488:	2201      	movpl	r2, #1
 80a248a:	601a      	strpl	r2, [r3, #0]
 80a248c:	4b10      	ldr	r3, [pc, #64]	; (80a24d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a248e:	681a      	ldr	r2, [r3, #0]
 80a2490:	07d1      	lsls	r1, r2, #31
 80a2492:	bf5c      	itt	pl
 80a2494:	2201      	movpl	r2, #1
 80a2496:	601a      	strpl	r2, [r3, #0]
 80a2498:	4b0e      	ldr	r3, [pc, #56]	; (80a24d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a249a:	681a      	ldr	r2, [r3, #0]
 80a249c:	07d2      	lsls	r2, r2, #31
 80a249e:	bf5c      	itt	pl
 80a24a0:	2201      	movpl	r2, #1
 80a24a2:	601a      	strpl	r2, [r3, #0]
 80a24a4:	4770      	bx	lr
 80a24a6:	bf00      	nop
 80a24a8:	200005ac 	.word	0x200005ac
 80a24ac:	200005a8 	.word	0x200005a8
 80a24b0:	200005a4 	.word	0x200005a4
 80a24b4:	200005a0 	.word	0x200005a0
 80a24b8:	2000059c 	.word	0x2000059c
 80a24bc:	20000598 	.word	0x20000598
 80a24c0:	20000594 	.word	0x20000594
 80a24c4:	20000590 	.word	0x20000590
 80a24c8:	2000058c 	.word	0x2000058c
 80a24cc:	20000588 	.word	0x20000588
 80a24d0:	20000584 	.word	0x20000584
 80a24d4:	20000580 	.word	0x20000580

080a24d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a24d8:	4b18      	ldr	r3, [pc, #96]	; (80a253c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a24da:	681a      	ldr	r2, [r3, #0]
 80a24dc:	07d1      	lsls	r1, r2, #31
 80a24de:	bf5c      	itt	pl
 80a24e0:	2201      	movpl	r2, #1
 80a24e2:	601a      	strpl	r2, [r3, #0]
 80a24e4:	4b16      	ldr	r3, [pc, #88]	; (80a2540 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a24e6:	681a      	ldr	r2, [r3, #0]
 80a24e8:	07d2      	lsls	r2, r2, #31
 80a24ea:	bf5c      	itt	pl
 80a24ec:	2201      	movpl	r2, #1
 80a24ee:	601a      	strpl	r2, [r3, #0]
 80a24f0:	4b14      	ldr	r3, [pc, #80]	; (80a2544 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a24f2:	681a      	ldr	r2, [r3, #0]
 80a24f4:	07d0      	lsls	r0, r2, #31
 80a24f6:	bf5c      	itt	pl
 80a24f8:	2201      	movpl	r2, #1
 80a24fa:	601a      	strpl	r2, [r3, #0]
 80a24fc:	4b12      	ldr	r3, [pc, #72]	; (80a2548 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a24fe:	681a      	ldr	r2, [r3, #0]
 80a2500:	07d1      	lsls	r1, r2, #31
 80a2502:	bf5c      	itt	pl
 80a2504:	2201      	movpl	r2, #1
 80a2506:	601a      	strpl	r2, [r3, #0]
 80a2508:	4b10      	ldr	r3, [pc, #64]	; (80a254c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a250a:	681a      	ldr	r2, [r3, #0]
 80a250c:	07d2      	lsls	r2, r2, #31
 80a250e:	bf5c      	itt	pl
 80a2510:	2201      	movpl	r2, #1
 80a2512:	601a      	strpl	r2, [r3, #0]
 80a2514:	4b0e      	ldr	r3, [pc, #56]	; (80a2550 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2516:	681a      	ldr	r2, [r3, #0]
 80a2518:	07d0      	lsls	r0, r2, #31
 80a251a:	bf5c      	itt	pl
 80a251c:	2201      	movpl	r2, #1
 80a251e:	601a      	strpl	r2, [r3, #0]
 80a2520:	4b0c      	ldr	r3, [pc, #48]	; (80a2554 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2522:	681a      	ldr	r2, [r3, #0]
 80a2524:	07d1      	lsls	r1, r2, #31
 80a2526:	bf5c      	itt	pl
 80a2528:	2201      	movpl	r2, #1
 80a252a:	601a      	strpl	r2, [r3, #0]
 80a252c:	4b0a      	ldr	r3, [pc, #40]	; (80a2558 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a252e:	681a      	ldr	r2, [r3, #0]
 80a2530:	07d2      	lsls	r2, r2, #31
 80a2532:	bf5c      	itt	pl
 80a2534:	2201      	movpl	r2, #1
 80a2536:	601a      	strpl	r2, [r3, #0]
 80a2538:	4770      	bx	lr
 80a253a:	bf00      	nop
 80a253c:	200005cc 	.word	0x200005cc
 80a2540:	200005c8 	.word	0x200005c8
 80a2544:	200005c4 	.word	0x200005c4
 80a2548:	200005c0 	.word	0x200005c0
 80a254c:	200005bc 	.word	0x200005bc
 80a2550:	200005b8 	.word	0x200005b8
 80a2554:	200005b4 	.word	0x200005b4
 80a2558:	200005b0 	.word	0x200005b0

080a255c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a255c:	4b18      	ldr	r3, [pc, #96]	; (80a25c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a255e:	681a      	ldr	r2, [r3, #0]
 80a2560:	07d1      	lsls	r1, r2, #31
 80a2562:	bf5c      	itt	pl
 80a2564:	2201      	movpl	r2, #1
 80a2566:	601a      	strpl	r2, [r3, #0]
 80a2568:	4b16      	ldr	r3, [pc, #88]	; (80a25c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a256a:	681a      	ldr	r2, [r3, #0]
 80a256c:	07d2      	lsls	r2, r2, #31
 80a256e:	bf5c      	itt	pl
 80a2570:	2201      	movpl	r2, #1
 80a2572:	601a      	strpl	r2, [r3, #0]
 80a2574:	4b14      	ldr	r3, [pc, #80]	; (80a25c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2576:	681a      	ldr	r2, [r3, #0]
 80a2578:	07d0      	lsls	r0, r2, #31
 80a257a:	bf5c      	itt	pl
 80a257c:	2201      	movpl	r2, #1
 80a257e:	601a      	strpl	r2, [r3, #0]
 80a2580:	4b12      	ldr	r3, [pc, #72]	; (80a25cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2582:	681a      	ldr	r2, [r3, #0]
 80a2584:	07d1      	lsls	r1, r2, #31
 80a2586:	bf5c      	itt	pl
 80a2588:	2201      	movpl	r2, #1
 80a258a:	601a      	strpl	r2, [r3, #0]
 80a258c:	4b10      	ldr	r3, [pc, #64]	; (80a25d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a258e:	681a      	ldr	r2, [r3, #0]
 80a2590:	07d2      	lsls	r2, r2, #31
 80a2592:	bf5c      	itt	pl
 80a2594:	2201      	movpl	r2, #1
 80a2596:	601a      	strpl	r2, [r3, #0]
 80a2598:	4b0e      	ldr	r3, [pc, #56]	; (80a25d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a259a:	681a      	ldr	r2, [r3, #0]
 80a259c:	07d0      	lsls	r0, r2, #31
 80a259e:	bf5c      	itt	pl
 80a25a0:	2201      	movpl	r2, #1
 80a25a2:	601a      	strpl	r2, [r3, #0]
 80a25a4:	4b0c      	ldr	r3, [pc, #48]	; (80a25d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a25a6:	681a      	ldr	r2, [r3, #0]
 80a25a8:	07d1      	lsls	r1, r2, #31
 80a25aa:	bf5c      	itt	pl
 80a25ac:	2201      	movpl	r2, #1
 80a25ae:	601a      	strpl	r2, [r3, #0]
 80a25b0:	4b0a      	ldr	r3, [pc, #40]	; (80a25dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a25b2:	681a      	ldr	r2, [r3, #0]
 80a25b4:	07d2      	lsls	r2, r2, #31
 80a25b6:	bf5c      	itt	pl
 80a25b8:	2201      	movpl	r2, #1
 80a25ba:	601a      	strpl	r2, [r3, #0]
 80a25bc:	4770      	bx	lr
 80a25be:	bf00      	nop
 80a25c0:	200005ec 	.word	0x200005ec
 80a25c4:	200005e8 	.word	0x200005e8
 80a25c8:	200005e4 	.word	0x200005e4
 80a25cc:	200005e0 	.word	0x200005e0
 80a25d0:	200005dc 	.word	0x200005dc
 80a25d4:	200005d8 	.word	0x200005d8
 80a25d8:	200005d4 	.word	0x200005d4
 80a25dc:	200005d0 	.word	0x200005d0

080a25e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a25e0:	4b24      	ldr	r3, [pc, #144]	; (80a2674 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a25e2:	681a      	ldr	r2, [r3, #0]
 80a25e4:	07d0      	lsls	r0, r2, #31
 80a25e6:	bf5c      	itt	pl
 80a25e8:	2201      	movpl	r2, #1
 80a25ea:	601a      	strpl	r2, [r3, #0]
 80a25ec:	4b22      	ldr	r3, [pc, #136]	; (80a2678 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a25ee:	681a      	ldr	r2, [r3, #0]
 80a25f0:	07d1      	lsls	r1, r2, #31
 80a25f2:	bf5c      	itt	pl
 80a25f4:	2201      	movpl	r2, #1
 80a25f6:	601a      	strpl	r2, [r3, #0]
 80a25f8:	4b20      	ldr	r3, [pc, #128]	; (80a267c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a25fa:	681a      	ldr	r2, [r3, #0]
 80a25fc:	07d2      	lsls	r2, r2, #31
 80a25fe:	bf5c      	itt	pl
 80a2600:	2201      	movpl	r2, #1
 80a2602:	601a      	strpl	r2, [r3, #0]
 80a2604:	4b1e      	ldr	r3, [pc, #120]	; (80a2680 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a2606:	681a      	ldr	r2, [r3, #0]
 80a2608:	07d0      	lsls	r0, r2, #31
 80a260a:	bf5c      	itt	pl
 80a260c:	2201      	movpl	r2, #1
 80a260e:	601a      	strpl	r2, [r3, #0]
 80a2610:	4b1c      	ldr	r3, [pc, #112]	; (80a2684 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a2612:	681a      	ldr	r2, [r3, #0]
 80a2614:	07d1      	lsls	r1, r2, #31
 80a2616:	bf5c      	itt	pl
 80a2618:	2201      	movpl	r2, #1
 80a261a:	601a      	strpl	r2, [r3, #0]
 80a261c:	4b1a      	ldr	r3, [pc, #104]	; (80a2688 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a261e:	681a      	ldr	r2, [r3, #0]
 80a2620:	07d2      	lsls	r2, r2, #31
 80a2622:	bf5c      	itt	pl
 80a2624:	2201      	movpl	r2, #1
 80a2626:	601a      	strpl	r2, [r3, #0]
 80a2628:	4b18      	ldr	r3, [pc, #96]	; (80a268c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a262a:	681a      	ldr	r2, [r3, #0]
 80a262c:	07d0      	lsls	r0, r2, #31
 80a262e:	bf5c      	itt	pl
 80a2630:	2201      	movpl	r2, #1
 80a2632:	601a      	strpl	r2, [r3, #0]
 80a2634:	4b16      	ldr	r3, [pc, #88]	; (80a2690 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a2636:	681a      	ldr	r2, [r3, #0]
 80a2638:	07d1      	lsls	r1, r2, #31
 80a263a:	bf5c      	itt	pl
 80a263c:	2201      	movpl	r2, #1
 80a263e:	601a      	strpl	r2, [r3, #0]
 80a2640:	4b14      	ldr	r3, [pc, #80]	; (80a2694 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a2642:	681a      	ldr	r2, [r3, #0]
 80a2644:	07d2      	lsls	r2, r2, #31
 80a2646:	bf5c      	itt	pl
 80a2648:	2201      	movpl	r2, #1
 80a264a:	601a      	strpl	r2, [r3, #0]
 80a264c:	4b12      	ldr	r3, [pc, #72]	; (80a2698 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a264e:	681a      	ldr	r2, [r3, #0]
 80a2650:	07d0      	lsls	r0, r2, #31
 80a2652:	bf5c      	itt	pl
 80a2654:	2201      	movpl	r2, #1
 80a2656:	601a      	strpl	r2, [r3, #0]
 80a2658:	4b10      	ldr	r3, [pc, #64]	; (80a269c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a265a:	681a      	ldr	r2, [r3, #0]
 80a265c:	07d1      	lsls	r1, r2, #31
 80a265e:	bf5c      	itt	pl
 80a2660:	2201      	movpl	r2, #1
 80a2662:	601a      	strpl	r2, [r3, #0]
 80a2664:	4b0e      	ldr	r3, [pc, #56]	; (80a26a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a2666:	681a      	ldr	r2, [r3, #0]
 80a2668:	07d2      	lsls	r2, r2, #31
 80a266a:	bf5c      	itt	pl
 80a266c:	2201      	movpl	r2, #1
 80a266e:	601a      	strpl	r2, [r3, #0]
 80a2670:	4770      	bx	lr
 80a2672:	bf00      	nop
 80a2674:	2000061c 	.word	0x2000061c
 80a2678:	20000618 	.word	0x20000618
 80a267c:	20000614 	.word	0x20000614
 80a2680:	20000610 	.word	0x20000610
 80a2684:	2000060c 	.word	0x2000060c
 80a2688:	20000608 	.word	0x20000608
 80a268c:	20000604 	.word	0x20000604
 80a2690:	20000600 	.word	0x20000600
 80a2694:	200005fc 	.word	0x200005fc
 80a2698:	200005f8 	.word	0x200005f8
 80a269c:	200005f4 	.word	0x200005f4
 80a26a0:	200005f0 	.word	0x200005f0

080a26a4 <__cxa_atexit>:
 80a26a4:	b510      	push	{r4, lr}
 80a26a6:	4c05      	ldr	r4, [pc, #20]	; (80a26bc <__cxa_atexit+0x18>)
 80a26a8:	4613      	mov	r3, r2
 80a26aa:	b12c      	cbz	r4, 80a26b8 <__cxa_atexit+0x14>
 80a26ac:	460a      	mov	r2, r1
 80a26ae:	4601      	mov	r1, r0
 80a26b0:	2002      	movs	r0, #2
 80a26b2:	f3af 8000 	nop.w
 80a26b6:	bd10      	pop	{r4, pc}
 80a26b8:	4620      	mov	r0, r4
 80a26ba:	bd10      	pop	{r4, pc}
 80a26bc:	00000000 	.word	0x00000000

080a26c0 <memcpy>:
 80a26c0:	b510      	push	{r4, lr}
 80a26c2:	1e43      	subs	r3, r0, #1
 80a26c4:	440a      	add	r2, r1
 80a26c6:	4291      	cmp	r1, r2
 80a26c8:	d004      	beq.n	80a26d4 <memcpy+0x14>
 80a26ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a26ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a26d2:	e7f8      	b.n	80a26c6 <memcpy+0x6>
 80a26d4:	bd10      	pop	{r4, pc}

080a26d6 <memset>:
 80a26d6:	4603      	mov	r3, r0
 80a26d8:	4402      	add	r2, r0
 80a26da:	4293      	cmp	r3, r2
 80a26dc:	d002      	beq.n	80a26e4 <memset+0xe>
 80a26de:	f803 1b01 	strb.w	r1, [r3], #1
 80a26e2:	e7fa      	b.n	80a26da <memset+0x4>
 80a26e4:	4770      	bx	lr
	...

080a26e8 <srand>:
 80a26e8:	b538      	push	{r3, r4, r5, lr}
 80a26ea:	4b12      	ldr	r3, [pc, #72]	; (80a2734 <srand+0x4c>)
 80a26ec:	4605      	mov	r5, r0
 80a26ee:	681c      	ldr	r4, [r3, #0]
 80a26f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a26f2:	b9d3      	cbnz	r3, 80a272a <srand+0x42>
 80a26f4:	2018      	movs	r0, #24
 80a26f6:	f7ff f917 	bl	80a1928 <malloc>
 80a26fa:	f243 330e 	movw	r3, #13070	; 0x330e
 80a26fe:	63a0      	str	r0, [r4, #56]	; 0x38
 80a2700:	8003      	strh	r3, [r0, #0]
 80a2702:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a2706:	8043      	strh	r3, [r0, #2]
 80a2708:	f241 2334 	movw	r3, #4660	; 0x1234
 80a270c:	8083      	strh	r3, [r0, #4]
 80a270e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a2712:	80c3      	strh	r3, [r0, #6]
 80a2714:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a2718:	8103      	strh	r3, [r0, #8]
 80a271a:	2305      	movs	r3, #5
 80a271c:	8143      	strh	r3, [r0, #10]
 80a271e:	230b      	movs	r3, #11
 80a2720:	8183      	strh	r3, [r0, #12]
 80a2722:	2201      	movs	r2, #1
 80a2724:	2300      	movs	r3, #0
 80a2726:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a272a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a272c:	2200      	movs	r2, #0
 80a272e:	611d      	str	r5, [r3, #16]
 80a2730:	615a      	str	r2, [r3, #20]
 80a2732:	bd38      	pop	{r3, r4, r5, pc}
 80a2734:	20000068 	.word	0x20000068

080a2738 <strcmp>:
 80a2738:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a273c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a2740:	2a01      	cmp	r2, #1
 80a2742:	bf28      	it	cs
 80a2744:	429a      	cmpcs	r2, r3
 80a2746:	d0f7      	beq.n	80a2738 <strcmp>
 80a2748:	1ad0      	subs	r0, r2, r3
 80a274a:	4770      	bx	lr

080a274c <strlen>:
 80a274c:	4603      	mov	r3, r0
 80a274e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2752:	2a00      	cmp	r2, #0
 80a2754:	d1fb      	bne.n	80a274e <strlen+0x2>
 80a2756:	1a18      	subs	r0, r3, r0
 80a2758:	3801      	subs	r0, #1
 80a275a:	4770      	bx	lr

080a275c <dynalib_user>:
 80a275c:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a276c:	0000 0000 7267 6565 006e 6572 0064 614d     ....green.red.Ma
 80a277c:	7473 7265 6e4f 6300 6c61 496c 0074 614d     sterOn.callIt.Ma
 80a278c:	7473 7265 664f 0066 654c 4364 6c6f 726f     sterOff.LedColor
 80a279c:	4d00 7361 6574 5072 776f 7265 0000 0000     .MasterPower....

080a27ac <CSWTCH.215>:
 80a27ac:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a27bc:	0050 0000                                   P...

080a27c0 <_ZTV7TwoWire>:
	...
 80a27c8:	1985 080a 19cf 080a 19a7 080a 1987 080a     ................
 80a27d8:	19af 080a 19b7 080a 19bf 080a 19c7 080a     ................

080a27e8 <_ZTV9IPAddress>:
	...
 80a27f0:	1a19 080a 1a09 080a 1a0b 080a 6162 6475     ............baud
 80a2800:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a2810:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a2820:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a2830:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a2840:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a2850:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a2860:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a2870:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a2880:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a2890:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a28a0:	3d20 0020 0a0d 6c00 006e 6e66 6300 646f      = ....ln.fn.cod
 80a28b0:	0065 6564 6174 6c69 6e00 6e6f 0065 7274     e.detail.none.tr
 80a28c0:	6361 0065 6e69 6f66 7700 7261 006e 7265     ace.info.warn.er
 80a28d0:	6f72 0072 6170 696e 0063 6c61 006c 0000     ror.panic.all...

080a28e0 <_ZTVN5spark12NetworkClassE>:
	...
 80a28e8:	1ae1 080a 1aeb 080a 1af5 080a 1aff 080a     ................
 80a28f8:	1b09 080a 1b15 080a 1b21 080a 1b2d 080a     ........!...-...
 80a2908:	1b35 080a 1b3f 080a 1b49 080a               5...?...I...

080a2914 <_ZTV8SPIClass>:
	...
 80a291c:	1c81 080a 1c83 080a 005a 2b25 3330 3a64     ........Z.%+03d:
 80a292c:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a293c:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a294c:	0000 0000                                   ....

080a2950 <_ZTV11USARTSerial>:
	...
 80a2958:	1e19 080a 1e69 080a 1e77 080a 1bad 080a     ....i...w.......
 80a2968:	1e2d 080a 1e4f 080a 1e3b 080a 1e63 080a     -...O...;...c...
 80a2978:	1e1b 080a 1e1f 080a                         ........

080a2980 <_ZTV9USBSerial>:
	...
 80a2988:	1f21 080a 1f71 080a 1f7f 080a 1bad 080a     !...q...........
 80a2998:	1f5d 080a 1f23 080a 1f39 080a 1f6b 080a     ]...#...9...k...
 80a29a8:	1f4f 080a 1f1d 080a                         O.......

080a29b0 <_ZTVN5spark9WiFiClassE>:
	...
 80a29b8:	215b 080a 2151 080a 2147 080a 20b9 080a     [!..Q!..G!... ..
 80a29c8:	213b 080a 212f 080a 2123 080a 211b 080a     ;!../!..#!...!..
 80a29d8:	2111 080a 2107 080a 20c3 080a               .!...!... ..

080a29e4 <__sf_fake_stdin>:
	...

080a2a04 <__sf_fake_stdout>:
	...

080a2a24 <__sf_fake_stderr>:
	...
 80a2a44:	0043                                        C.

080a2a46 <link_const_variable_data_end>:
	...

080a2a48 <link_constructors_location>:
 80a2a48:	080a02dd 	.word	0x080a02dd
 80a2a4c:	080a1619 	.word	0x080a1619
 80a2a50:	080a1ad1 	.word	0x080a1ad1
 80a2a54:	080a1b99 	.word	0x080a1b99
 80a2a58:	080a1c65 	.word	0x080a1c65
 80a2a5c:	080a1ded 	.word	0x080a1ded
 80a2a60:	080a1e05 	.word	0x080a1e05
 80a2a64:	080a2165 	.word	0x080a2165
 80a2a68:	080a238d 	.word	0x080a238d
 80a2a6c:	080a23bd 	.word	0x080a23bd
 80a2a70:	080a2415 	.word	0x080a2415
 80a2a74:	080a24d9 	.word	0x080a24d9
 80a2a78:	080a255d 	.word	0x080a255d
 80a2a7c:	080a25e1 	.word	0x080a25e1
