
/Users/steve_black_spare/Dropbox/PhotonDnD-Receiver-NeoPixelRing/target/1.4.4/photon/PhotonDnD-Receiver-NeoPixelRing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003174  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a3190  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  20000000  080a3194  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005b8  2000006c  2000006c  0003006c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a3200  080a3200  00023200  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a3228  080a3228  00023228  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000a66c0  00000000  00000000  0002322c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f28f  00000000  00000000  000c98ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000140b6  00000000  00000000  000d8b7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001ed8  00000000  00000000  000ecc31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003188  00000000  00000000  000eeb09  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00023863  00000000  00000000  000f1c91  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00022d9a  00000000  00000000  001154f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a5e4d  00000000  00000000  0013828e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b884  00000000  00000000  001de0dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fe9d 	bl	80a2d6c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fea2 	bl	80a2d82 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a3194 	.word	0x080a3194
 80a004c:	2000006c 	.word	0x2000006c
 80a0050:	2000006c 	.word	0x2000006c
 80a0054:	20000624 	.word	0x20000624
 80a0058:	20000624 	.word	0x20000624

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 fc51 	bl	80a2904 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a3158 	.word	0x080a3158
 80a0084:	080a3190 	.word	0x080a3190

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b90e 	b.w	80a02a8 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f8d6 	bl	80a023e <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f002 bbf7 	b.w	80a2888 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f001 bc8f 	b.w	80a19bc <malloc>

080a009e <_ZdlPv>:
 80a009e:	f001 bc95 	b.w	80a19cc <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZNSt14_Function_base13_Base_managerIPFv6StringS1_EE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a00b2:	2a01      	cmp	r2, #1
 80a00b4:	d002      	beq.n	80a00bc <_ZNSt14_Function_base13_Base_managerIPFv6StringS1_EE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xa>
 80a00b6:	2a02      	cmp	r2, #2
 80a00b8:	d002      	beq.n	80a00c0 <_ZNSt14_Function_base13_Base_managerIPFv6StringS1_EE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xe>
 80a00ba:	e004      	b.n	80a00c6 <_ZNSt14_Function_base13_Base_managerIPFv6StringS1_EE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a00bc:	6001      	str	r1, [r0, #0]
	      break;
 80a00be:	e002      	b.n	80a00c6 <_ZNSt14_Function_base13_Base_managerIPFv6StringS1_EE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80a00c0:	680b      	ldr	r3, [r1, #0]
 80a00c2:	b100      	cbz	r0, 80a00c6 <_ZNSt14_Function_base13_Base_managerIPFv6StringS1_EE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x14>
 80a00c4:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a00c6:	2000      	movs	r0, #0
 80a00c8:	4770      	bx	lr

080a00ca <_ZNSt17_Function_handlerIFvPKcS1_EPFv6StringS3_EE9_M_invokeERKSt9_Any_dataOS1_SA_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a00ca:	b530      	push	{r4, r5, lr}
 80a00cc:	4615      	mov	r5, r2
 80a00ce:	b089      	sub	sp, #36	; 0x24
      {
	(*_Base::_M_get_pointer(__functor))(
 80a00d0:	6804      	ldr	r4, [r0, #0]
 80a00d2:	6809      	ldr	r1, [r1, #0]
 80a00d4:	4668      	mov	r0, sp
 80a00d6:	f002 f98f 	bl	80a23f8 <_ZN6StringC1EPK19__FlashStringHelper>
 80a00da:	6829      	ldr	r1, [r5, #0]
 80a00dc:	a804      	add	r0, sp, #16
 80a00de:	f002 f98b 	bl	80a23f8 <_ZN6StringC1EPK19__FlashStringHelper>
 80a00e2:	a904      	add	r1, sp, #16
 80a00e4:	4668      	mov	r0, sp
 80a00e6:	47a0      	blx	r4
 80a00e8:	a804      	add	r0, sp, #16
 80a00ea:	f002 f93e 	bl	80a236a <_ZN6StringD1Ev>
 80a00ee:	4668      	mov	r0, sp
 80a00f0:	f002 f93b 	bl	80a236a <_ZN6StringD1Ev>
	    std::forward<_ArgTypes>(__args)...);
      }
 80a00f4:	b009      	add	sp, #36	; 0x24
 80a00f6:	bd30      	pop	{r4, r5, pc}

080a00f8 <_Z9onHandler6StringS_>:

}


void onHandler(String event, String data)
{
 80a00f8:	b530      	push	{r4, r5, lr}
 80a00fa:	4b28      	ldr	r3, [pc, #160]	; (80a019c <_Z9onHandler6StringS_+0xa4>)
 80a00fc:	b085      	sub	sp, #20
 80a00fe:	781b      	ldrb	r3, [r3, #0]
 80a0100:	460d      	mov	r5, r1
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0102:	f88d 3000 	strb.w	r3, [sp]
 80a0106:	2200      	movs	r2, #0
 80a0108:	233c      	movs	r3, #60	; 0x3c
 80a010a:	4925      	ldr	r1, [pc, #148]	; (80a01a0 <_Z9onHandler6StringS_+0xa8>)
 80a010c:	a802      	add	r0, sp, #8
 80a010e:	f001 fe0d 	bl	80a1d2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0112:	9c03      	ldr	r4, [sp, #12]
 80a0114:	b17c      	cbz	r4, 80a0136 <_Z9onHandler6StringS_+0x3e>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0116:	6863      	ldr	r3, [r4, #4]
 80a0118:	3b01      	subs	r3, #1
 80a011a:	6063      	str	r3, [r4, #4]
 80a011c:	b95b      	cbnz	r3, 80a0136 <_Z9onHandler6StringS_+0x3e>
        {
          _M_dispose();
 80a011e:	6823      	ldr	r3, [r4, #0]
 80a0120:	4620      	mov	r0, r4
 80a0122:	689b      	ldr	r3, [r3, #8]
 80a0124:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0126:	68a3      	ldr	r3, [r4, #8]
 80a0128:	3b01      	subs	r3, #1
 80a012a:	60a3      	str	r3, [r4, #8]
 80a012c:	b91b      	cbnz	r3, 80a0136 <_Z9onHandler6StringS_+0x3e>
            _M_destroy();
 80a012e:	6823      	ldr	r3, [r4, #0]
 80a0130:	4620      	mov	r0, r4
 80a0132:	68db      	ldr	r3, [r3, #12]
 80a0134:	4798      	blx	r3
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a0136:	491b      	ldr	r1, [pc, #108]	; (80a01a4 <_Z9onHandler6StringS_+0xac>)
 80a0138:	4628      	mov	r0, r5
 80a013a:	f002 f99b 	bl	80a2474 <_ZNK6String6equalsEPKc>

    Particle.publish("Inside onHandler", PRIVATE);
    if(data == "on") {
 80a013e:	b928      	cbnz	r0, 80a014c <_Z9onHandler6StringS_+0x54>
 80a0140:	4919      	ldr	r1, [pc, #100]	; (80a01a8 <_Z9onHandler6StringS_+0xb0>)
 80a0142:	4628      	mov	r0, r5
 80a0144:	f002 f996 	bl	80a2474 <_ZNK6String6equalsEPKc>

        }
        
    }
        
    if(data == "off") {
 80a0148:	b980      	cbnz	r0, 80a016c <_Z9onHandler6StringS_+0x74>
 80a014a:	e01e      	b.n	80a018a <_Z9onHandler6StringS_+0x92>
 80a014c:	2400      	movs	r4, #0

    Particle.publish("Inside onHandler", PRIVATE);
    if(data == "on") {
        for(int i = 0; i < PIXEL_COUNT; i ++)
        {
            ring.setPixelColor(i, 0, 220, 0); 
 80a014e:	2200      	movs	r2, #0
 80a0150:	b2a1      	uxth	r1, r4
 80a0152:	9200      	str	r2, [sp, #0]
 80a0154:	23dc      	movs	r3, #220	; 0xdc
 80a0156:	4815      	ldr	r0, [pc, #84]	; (80a01ac <_Z9onHandler6StringS_+0xb4>)
 80a0158:	f001 fa2e 	bl	80a15b8 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
void onHandler(String event, String data)
{

    Particle.publish("Inside onHandler", PRIVATE);
    if(data == "on") {
        for(int i = 0; i < PIXEL_COUNT; i ++)
 80a015c:	3401      	adds	r4, #1
        {
            ring.setPixelColor(i, 0, 220, 0); 
            memoryState = "on";
 80a015e:	4911      	ldr	r1, [pc, #68]	; (80a01a4 <_Z9onHandler6StringS_+0xac>)
 80a0160:	4813      	ldr	r0, [pc, #76]	; (80a01b0 <_Z9onHandler6StringS_+0xb8>)
 80a0162:	f002 f976 	bl	80a2452 <_ZN6StringaSEPKc>
void onHandler(String event, String data)
{

    Particle.publish("Inside onHandler", PRIVATE);
    if(data == "on") {
        for(int i = 0; i < PIXEL_COUNT; i ++)
 80a0166:	2c0c      	cmp	r4, #12
 80a0168:	d1f1      	bne.n	80a014e <_Z9onHandler6StringS_+0x56>
 80a016a:	e7e9      	b.n	80a0140 <_Z9onHandler6StringS_+0x48>
 80a016c:	2400      	movs	r4, #0
    }
        
    if(data == "off") {
       for(int i = 0; i < PIXEL_COUNT; i ++)
        {
            ring.setPixelColor(i, 220, 0, 0); 
 80a016e:	2300      	movs	r3, #0
 80a0170:	b2a1      	uxth	r1, r4
 80a0172:	9300      	str	r3, [sp, #0]
 80a0174:	22dc      	movs	r2, #220	; 0xdc
 80a0176:	480d      	ldr	r0, [pc, #52]	; (80a01ac <_Z9onHandler6StringS_+0xb4>)
 80a0178:	f001 fa1e 	bl	80a15b8 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        
    }
        
    if(data == "off") {
       for(int i = 0; i < PIXEL_COUNT; i ++)
 80a017c:	3401      	adds	r4, #1
        {
            ring.setPixelColor(i, 220, 0, 0); 
            memoryState = "off";
 80a017e:	490a      	ldr	r1, [pc, #40]	; (80a01a8 <_Z9onHandler6StringS_+0xb0>)
 80a0180:	480b      	ldr	r0, [pc, #44]	; (80a01b0 <_Z9onHandler6StringS_+0xb8>)
 80a0182:	f002 f966 	bl	80a2452 <_ZN6StringaSEPKc>
        }
        
    }
        
    if(data == "off") {
       for(int i = 0; i < PIXEL_COUNT; i ++)
 80a0186:	2c0c      	cmp	r4, #12
 80a0188:	d1f1      	bne.n	80a016e <_Z9onHandler6StringS_+0x76>
            memoryState = "off";
        } 
    }

     // Update the NeoPixel
    if(overrideDisplay == false) {
 80a018a:	4b0a      	ldr	r3, [pc, #40]	; (80a01b4 <_Z9onHandler6StringS_+0xbc>)
 80a018c:	781b      	ldrb	r3, [r3, #0]
 80a018e:	b913      	cbnz	r3, 80a0196 <_Z9onHandler6StringS_+0x9e>
            ring.show();     
 80a0190:	4806      	ldr	r0, [pc, #24]	; (80a01ac <_Z9onHandler6StringS_+0xb4>)
 80a0192:	f000 f957 	bl	80a0444 <_ZN17Adafruit_NeoPixel4showEv>

    }
}  
 80a0196:	b005      	add	sp, #20
 80a0198:	bd30      	pop	{r4, r5, pc}
 80a019a:	bf00      	nop
 80a019c:	20000080 	.word	0x20000080
 80a01a0:	080a2e54 	.word	0x080a2e54
 80a01a4:	080a2e65 	.word	0x080a2e65
 80a01a8:	080a2e68 	.word	0x080a2e68
 80a01ac:	20000084 	.word	0x20000084
 80a01b0:	20000070 	.word	0x20000070
 80a01b4:	20000000 	.word	0x20000000

080a01b8 <_Z15onMasterHandler6StringS_>:

void onMasterHandler(String event, String data) 
{
 80a01b8:	b510      	push	{r4, lr}
 80a01ba:	460c      	mov	r4, r1
 80a01bc:	b088      	sub	sp, #32
 80a01be:	4915      	ldr	r1, [pc, #84]	; (80a0214 <_Z15onMasterHandler6StringS_+0x5c>)
 80a01c0:	4620      	mov	r0, r4
 80a01c2:	f002 f957 	bl	80a2474 <_ZNK6String6equalsEPKc>
    
    if(data == "MasterOn"){
 80a01c6:	b1a0      	cbz	r0, 80a01f2 <_Z15onMasterHandler6StringS_+0x3a>
        overrideDisplay = false;
 80a01c8:	4b13      	ldr	r3, [pc, #76]	; (80a0218 <_Z15onMasterHandler6StringS_+0x60>)
 80a01ca:	2200      	movs	r2, #0
        onHandler("callIt",memoryState);
 80a01cc:	4913      	ldr	r1, [pc, #76]	; (80a021c <_Z15onMasterHandler6StringS_+0x64>)
 80a01ce:	4668      	mov	r0, sp

void onMasterHandler(String event, String data) 
{
    
    if(data == "MasterOn"){
        overrideDisplay = false;
 80a01d0:	701a      	strb	r2, [r3, #0]
        onHandler("callIt",memoryState);
 80a01d2:	f002 f911 	bl	80a23f8 <_ZN6StringC1EPK19__FlashStringHelper>
 80a01d6:	4912      	ldr	r1, [pc, #72]	; (80a0220 <_Z15onMasterHandler6StringS_+0x68>)
 80a01d8:	a804      	add	r0, sp, #16
 80a01da:	f002 f92f 	bl	80a243c <_ZN6StringC1ERKS_>
 80a01de:	a904      	add	r1, sp, #16
 80a01e0:	4668      	mov	r0, sp
 80a01e2:	f7ff ff89 	bl	80a00f8 <_Z9onHandler6StringS_>
 80a01e6:	a804      	add	r0, sp, #16
 80a01e8:	f002 f8bf 	bl	80a236a <_ZN6StringD1Ev>
 80a01ec:	4668      	mov	r0, sp
 80a01ee:	f002 f8bc 	bl	80a236a <_ZN6StringD1Ev>
 80a01f2:	490c      	ldr	r1, [pc, #48]	; (80a0224 <_Z15onMasterHandler6StringS_+0x6c>)
 80a01f4:	4620      	mov	r0, r4
 80a01f6:	f002 f93d 	bl	80a2474 <_ZNK6String6equalsEPKc>

    }
    
    if(data == "MasterOff") {
 80a01fa:	b140      	cbz	r0, 80a020e <_Z15onMasterHandler6StringS_+0x56>
        ring.clear();
 80a01fc:	480a      	ldr	r0, [pc, #40]	; (80a0228 <_Z15onMasterHandler6StringS_+0x70>)
 80a01fe:	f001 fa30 	bl	80a1662 <_ZN17Adafruit_NeoPixel5clearEv>
        ring.show();   
 80a0202:	4809      	ldr	r0, [pc, #36]	; (80a0228 <_Z15onMasterHandler6StringS_+0x70>)
 80a0204:	f000 f91e 	bl	80a0444 <_ZN17Adafruit_NeoPixel4showEv>
        overrideDisplay = true;
 80a0208:	4b03      	ldr	r3, [pc, #12]	; (80a0218 <_Z15onMasterHandler6StringS_+0x60>)
 80a020a:	2201      	movs	r2, #1
 80a020c:	701a      	strb	r2, [r3, #0]

    }
}
 80a020e:	b008      	add	sp, #32
 80a0210:	bd10      	pop	{r4, pc}
 80a0212:	bf00      	nop
 80a0214:	080a2e6c 	.word	0x080a2e6c
 80a0218:	20000000 	.word	0x20000000
 80a021c:	080a2e75 	.word	0x080a2e75
 80a0220:	20000070 	.word	0x20000070
 80a0224:	080a2e7c 	.word	0x080a2e7c
 80a0228:	20000084 	.word	0x20000084

080a022c <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a022c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a022e:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0230:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0232:	b113      	cbz	r3, 80a023a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0234:	2203      	movs	r2, #3
 80a0236:	4601      	mov	r1, r0
 80a0238:	4798      	blx	r3
    }
 80a023a:	4620      	mov	r0, r4
 80a023c:	bd10      	pop	{r4, pc}

080a023e <loop>:

 
void loop() 
{
 80a023e:	4770      	bx	lr

080a0240 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0240:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0242:	2300      	movs	r3, #0
 80a0244:	6083      	str	r3, [r0, #8]
 80a0246:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0248:	4604      	mov	r4, r0
 80a024a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a024c:	b12b      	cbz	r3, 80a025a <_ZNSt8functionIFvPKcS1_EEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a024e:	2202      	movs	r2, #2
 80a0250:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0252:	68eb      	ldr	r3, [r5, #12]
 80a0254:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0256:	68ab      	ldr	r3, [r5, #8]
 80a0258:	60a3      	str	r3, [r4, #8]
	}
    }
 80a025a:	4620      	mov	r0, r4
 80a025c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0260 <_ZN10CloudClass9subscribeEPKcSt8functionIFvS1_S1_EE32Spark_Subscription_Scope_TypeDef.isra.4.constprop.18>:
    inline bool subscribe(const char *eventName, EventHandler handler, const char *deviceID)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, MY_DEVICES, deviceID, NULL), false);
    }

    bool subscribe(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope)
 80a0260:	b530      	push	{r4, r5, lr}
 80a0262:	b087      	sub	sp, #28
 80a0264:	4604      	mov	r4, r0
    {
        return subscribe_wiring(eventName, handler, scope);
 80a0266:	a802      	add	r0, sp, #8
 80a0268:	f7ff ffea 	bl	80a0240 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
    {
#ifdef SPARK_NO_CLOUD
        return false;
#else
        bool success = false;
        if (handler) // if the call-wrapper has wrapped a callable object
 80a026c:	9b04      	ldr	r3, [sp, #16]
 80a026e:	b90b      	cbnz	r3, 80a0274 <_ZN10CloudClass9subscribeEPKcSt8functionIFvS1_S1_EE32Spark_Subscription_Scope_TypeDef.isra.4.constprop.18+0x14>
    bool subscribe_wiring(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope, const char *deviceID = NULL)
    {
#ifdef SPARK_NO_CLOUD
        return false;
#else
        bool success = false;
 80a0270:	2400      	movs	r4, #0
 80a0272:	e011      	b.n	80a0298 <_ZN10CloudClass9subscribeEPKcSt8functionIFvS1_S1_EE32Spark_Subscription_Scope_TypeDef.isra.4.constprop.18+0x38>
        if (handler) // if the call-wrapper has wrapped a callable object
        {
            auto wrapper = new wiring_event_handler_t(handler);
 80a0274:	2010      	movs	r0, #16
 80a0276:	f7ff ff10 	bl	80a009a <_Znwj>
 80a027a:	4605      	mov	r5, r0
 80a027c:	2800      	cmp	r0, #0
 80a027e:	d0f7      	beq.n	80a0270 <_ZN10CloudClass9subscribeEPKcSt8functionIFvS1_S1_EE32Spark_Subscription_Scope_TypeDef.isra.4.constprop.18+0x10>
 80a0280:	a902      	add	r1, sp, #8
 80a0282:	f7ff ffdd 	bl	80a0240 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
            if (wrapper) {
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
 80a0286:	2300      	movs	r3, #0
 80a0288:	4620      	mov	r0, r4
 80a028a:	9301      	str	r3, [sp, #4]
 80a028c:	9300      	str	r3, [sp, #0]
 80a028e:	462a      	mov	r2, r5
 80a0290:	4904      	ldr	r1, [pc, #16]	; (80a02a4 <_ZN10CloudClass9subscribeEPKcSt8functionIFvS1_S1_EE32Spark_Subscription_Scope_TypeDef.isra.4.constprop.18+0x44>)
 80a0292:	f001 fb33 	bl	80a18fc <spark_subscribe>
 80a0296:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0298:	a802      	add	r0, sp, #8
 80a029a:	f7ff ffc7 	bl	80a022c <_ZNSt14_Function_baseD1Ev>
    }

    bool subscribe(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return subscribe_wiring(eventName, handler, scope);
    }
 80a029e:	4620      	mov	r0, r4
 80a02a0:	b007      	add	sp, #28
 80a02a2:	bd30      	pop	{r4, r5, pc}
 80a02a4:	080a1ac5 	.word	0x080a1ac5

080a02a8 <setup>:
String memoryState;
bool overrideDisplay = true;


void setup() 
{
 80a02a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    // Start the NeoPixel object
    ring.begin();       
 80a02aa:	4c16      	ldr	r4, [pc, #88]	; (80a0304 <setup+0x5c>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a02ac:	4d16      	ldr	r5, [pc, #88]	; (80a0308 <setup+0x60>)
 80a02ae:	4620      	mov	r0, r4
 80a02b0:	f000 f892 	bl	80a03d8 <_ZN17Adafruit_NeoPixel5beginEv>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80a02b4:	4e15      	ldr	r6, [pc, #84]	; (80a030c <setup+0x64>)
    ring.setBrightness(5);                      	// Turn the brightness way down!!!
 80a02b6:	4620      	mov	r0, r4
 80a02b8:	2105      	movs	r1, #5

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
 80a02ba:	4c15      	ldr	r4, [pc, #84]	; (80a0310 <setup+0x68>)
 80a02bc:	f001 f9ab 	bl	80a1616 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
    Particle.subscribe("LedOn", onHandler, MY_DEVICES);
 80a02c0:	4669      	mov	r1, sp
 80a02c2:	4814      	ldr	r0, [pc, #80]	; (80a0314 <setup+0x6c>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80a02c4:	9600      	str	r6, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a02c6:	9503      	str	r5, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a02c8:	9402      	str	r4, [sp, #8]
 80a02ca:	f7ff ffc9 	bl	80a0260 <_ZN10CloudClass9subscribeEPKcSt8functionIFvS1_S1_EE32Spark_Subscription_Scope_TypeDef.isra.4.constprop.18>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a02ce:	4668      	mov	r0, sp
 80a02d0:	f7ff ffac 	bl	80a022c <_ZNSt14_Function_baseD1Ev>
    Particle.subscribe("LedOff", onHandler, MY_DEVICES);
 80a02d4:	4669      	mov	r1, sp
 80a02d6:	4810      	ldr	r0, [pc, #64]	; (80a0318 <setup+0x70>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80a02d8:	9600      	str	r6, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a02da:	9503      	str	r5, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a02dc:	9402      	str	r4, [sp, #8]
 80a02de:	f7ff ffbf 	bl	80a0260 <_ZN10CloudClass9subscribeEPKcSt8functionIFvS1_S1_EE32Spark_Subscription_Scope_TypeDef.isra.4.constprop.18>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a02e2:	4668      	mov	r0, sp
 80a02e4:	f7ff ffa2 	bl	80a022c <_ZNSt14_Function_baseD1Ev>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80a02e8:	4b0c      	ldr	r3, [pc, #48]	; (80a031c <setup+0x74>)
    Particle.subscribe("MasterPower", onMasterHandler, MY_DEVICES);
 80a02ea:	4669      	mov	r1, sp
 80a02ec:	480c      	ldr	r0, [pc, #48]	; (80a0320 <setup+0x78>)
 80a02ee:	9300      	str	r3, [sp, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a02f0:	9503      	str	r5, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a02f2:	9402      	str	r4, [sp, #8]
 80a02f4:	f7ff ffb4 	bl	80a0260 <_ZN10CloudClass9subscribeEPKcSt8functionIFvS1_S1_EE32Spark_Subscription_Scope_TypeDef.isra.4.constprop.18>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a02f8:	4668      	mov	r0, sp
 80a02fa:	f7ff ff97 	bl	80a022c <_ZNSt14_Function_baseD1Ev>

}
 80a02fe:	b004      	add	sp, #16
 80a0300:	bd70      	pop	{r4, r5, r6, pc}
 80a0302:	bf00      	nop
 80a0304:	20000084 	.word	0x20000084
 80a0308:	080a00cb 	.word	0x080a00cb
 80a030c:	080a00f9 	.word	0x080a00f9
 80a0310:	080a00b3 	.word	0x080a00b3
 80a0314:	080a2e86 	.word	0x080a2e86
 80a0318:	080a2e8c 	.word	0x080a2e8c
 80a031c:	080a01b9 	.word	0x080a01b9
 80a0320:	080a2e93 	.word	0x080a2e93

080a0324 <_GLOBAL__sub_I_ring>:
{
    
    
    // Update the NeoPixel
    // ring.show();        
 80a0324:	b538      	push	{r3, r4, r5, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0326:	4b0f      	ldr	r3, [pc, #60]	; (80a0364 <_GLOBAL__sub_I_ring+0x40>)
 
#define PIXEL_COUNT 12// 24 Pixels on our ring
#define PIXEL_PIN D5						// Ring uses D6 as default pin
#define PIXEL_TYPE WS2812B					// Ring uses WS2812 Pixels
 
Adafruit_NeoPixel ring(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);	// Create out “ring” object	
 80a0328:	4c0f      	ldr	r4, [pc, #60]	; (80a0368 <_GLOBAL__sub_I_ring+0x44>)
 80a032a:	2201      	movs	r2, #1
 80a032c:	701a      	strb	r2, [r3, #0]
 80a032e:	4d0f      	ldr	r5, [pc, #60]	; (80a036c <_GLOBAL__sub_I_ring+0x48>)
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0330:	f001 f9c6 	bl	80a16c0 <HAL_Pin_Map>
 80a0334:	2302      	movs	r3, #2
 80a0336:	2205      	movs	r2, #5
 80a0338:	210c      	movs	r1, #12
 80a033a:	4620      	mov	r0, r4
 80a033c:	f000 f871 	bl	80a0422 <_ZN17Adafruit_NeoPixelC1Ethh>
 80a0340:	4620      	mov	r0, r4
 
int pixelCounter = 0;                       // Used for choosing a specific LED
int toggle = 0;
String memoryState;
 80a0342:	4c0b      	ldr	r4, [pc, #44]	; (80a0370 <_GLOBAL__sub_I_ring+0x4c>)
 
#define PIXEL_COUNT 12// 24 Pixels on our ring
#define PIXEL_PIN D5						// Ring uses D6 as default pin
#define PIXEL_TYPE WS2812B					// Ring uses WS2812 Pixels
 
Adafruit_NeoPixel ring(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);	// Create out “ring” object	
 80a0344:	462a      	mov	r2, r5
 80a0346:	490b      	ldr	r1, [pc, #44]	; (80a0374 <_GLOBAL__sub_I_ring+0x50>)
 80a0348:	f002 fbb0 	bl	80a2aac <__aeabi_atexit>
 
int pixelCounter = 0;                       // Used for choosing a specific LED
int toggle = 0;
String memoryState;
 80a034c:	490a      	ldr	r1, [pc, #40]	; (80a0378 <_GLOBAL__sub_I_ring+0x54>)
 80a034e:	4620      	mov	r0, r4
 80a0350:	f002 f852 	bl	80a23f8 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0354:	462a      	mov	r2, r5
 80a0356:	4620      	mov	r0, r4
{
    
    
    // Update the NeoPixel
    // ring.show();        
 80a0358:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 
Adafruit_NeoPixel ring(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);	// Create out “ring” object	
 
int pixelCounter = 0;                       // Used for choosing a specific LED
int toggle = 0;
String memoryState;
 80a035c:	4907      	ldr	r1, [pc, #28]	; (80a037c <_GLOBAL__sub_I_ring+0x58>)
 80a035e:	f002 bba5 	b.w	80a2aac <__aeabi_atexit>
 80a0362:	bf00      	nop
 80a0364:	20000080 	.word	0x20000080
 80a0368:	20000084 	.word	0x20000084
 80a036c:	2000006c 	.word	0x2000006c
 80a0370:	20000070 	.word	0x20000070
 80a0374:	080a0385 	.word	0x080a0385
 80a0378:	080a2fb6 	.word	0x080a2fb6
 80a037c:	080a236b 	.word	0x080a236b

080a0380 <micros>:

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0380:	f001 b98e 	b.w	80a16a0 <HAL_Timer_Get_Micro_Seconds>

080a0384 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a0384:	b510      	push	{r4, lr}
 80a0386:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a0388:	68c0      	ldr	r0, [r0, #12]
 80a038a:	b108      	cbz	r0, 80a0390 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a038c:	f001 fb1e 	bl	80a19cc <free>
  if (begun) pinMode(pin, INPUT);
 80a0390:	7823      	ldrb	r3, [r4, #0]
 80a0392:	b11b      	cbz	r3, 80a039c <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a0394:	2100      	movs	r1, #0
 80a0396:	79e0      	ldrb	r0, [r4, #7]
 80a0398:	f002 fb04 	bl	80a29a4 <pinMode>
}
 80a039c:	4620      	mov	r0, r4
 80a039e:	bd10      	pop	{r4, pc}

080a03a0 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a03a0:	b538      	push	{r3, r4, r5, lr}
 80a03a2:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a03a4:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a03a6:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a03a8:	b108      	cbz	r0, 80a03ae <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a03aa:	f001 fb0f 	bl	80a19cc <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a03ae:	79a3      	ldrb	r3, [r4, #6]
 80a03b0:	2b06      	cmp	r3, #6
 80a03b2:	bf0c      	ite	eq
 80a03b4:	2004      	moveq	r0, #4
 80a03b6:	2003      	movne	r0, #3
 80a03b8:	4368      	muls	r0, r5
 80a03ba:	b280      	uxth	r0, r0
 80a03bc:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a03be:	f001 fafd 	bl	80a19bc <malloc>
 80a03c2:	60e0      	str	r0, [r4, #12]
 80a03c4:	b128      	cbz	r0, 80a03d2 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a03c6:	88a2      	ldrh	r2, [r4, #4]
 80a03c8:	2100      	movs	r1, #0
 80a03ca:	f002 fcda 	bl	80a2d82 <memset>
    numLEDs = n;
 80a03ce:	8065      	strh	r5, [r4, #2]
 80a03d0:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
 80a03d2:	80a0      	strh	r0, [r4, #4]
 80a03d4:	8060      	strh	r0, [r4, #2]
 80a03d6:	bd38      	pop	{r3, r4, r5, pc}

080a03d8 <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
 80a03d8:	b510      	push	{r4, lr}
 80a03da:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a03dc:	2101      	movs	r1, #1
 80a03de:	79c0      	ldrb	r0, [r0, #7]
 80a03e0:	f002 fae0 	bl	80a29a4 <pinMode>
  digitalWrite(pin, LOW);
 80a03e4:	2100      	movs	r1, #0
 80a03e6:	79e0      	ldrb	r0, [r4, #7]
 80a03e8:	f002 faed 	bl	80a29c6 <digitalWrite>
  begun = true;
 80a03ec:	2301      	movs	r3, #1
 80a03ee:	7023      	strb	r3, [r4, #0]
 80a03f0:	bd10      	pop	{r4, pc}

080a03f2 <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a03f2:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a03f4:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a03f6:	4605      	mov	r5, r0
 80a03f8:	460c      	mov	r4, r1
    if (begun) {
 80a03fa:	b11b      	cbz	r3, 80a0404 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a03fc:	2100      	movs	r1, #0
 80a03fe:	79c0      	ldrb	r0, [r0, #7]
 80a0400:	f002 fad0 	bl	80a29a4 <pinMode>
    }
    pin = p;
    if (begun) {
 80a0404:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
 80a0406:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a0408:	b153      	cbz	r3, 80a0420 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a040a:	b2a4      	uxth	r4, r4
 80a040c:	4620      	mov	r0, r4
 80a040e:	2101      	movs	r1, #1
 80a0410:	f002 fac8 	bl	80a29a4 <pinMode>
        digitalWrite(p, LOW);
 80a0414:	4620      	mov	r0, r4
    }
}
 80a0416:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
 80a041a:	2100      	movs	r1, #0
 80a041c:	f002 bad3 	b.w	80a29c6 <digitalWrite>
 80a0420:	bd38      	pop	{r3, r4, r5, pc}

080a0422 <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a0422:	b570      	push	{r4, r5, r6, lr}
 80a0424:	4604      	mov	r4, r0
 80a0426:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a0428:	2500      	movs	r5, #0
 80a042a:	7183      	strb	r3, [r0, #6]
 80a042c:	7005      	strb	r5, [r0, #0]
 80a042e:	7205      	strb	r5, [r0, #8]
 80a0430:	60c5      	str	r5, [r0, #12]
 80a0432:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
 80a0434:	f7ff ffb4 	bl	80a03a0 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a0438:	4620      	mov	r0, r4
 80a043a:	4631      	mov	r1, r6
 80a043c:	f7ff ffd9 	bl	80a03f2 <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a0440:	4620      	mov	r0, r4
 80a0442:	bd70      	pop	{r4, r5, r6, pc}

080a0444 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a0444:	68c3      	ldr	r3, [r0, #12]
 80a0446:	2b00      	cmp	r3, #0
 80a0448:	f000 858e 	beq.w	80a0f68 <_ZN17Adafruit_NeoPixel4showEv+0xb24>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
 80a044c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0450:	4604      	mov	r4, r0
 80a0452:	7983      	ldrb	r3, [r0, #6]
 80a0454:	b086      	sub	sp, #24
 80a0456:	3b02      	subs	r3, #2
 80a0458:	b2db      	uxtb	r3, r3
 80a045a:	2b04      	cmp	r3, #4
 80a045c:	bf96      	itet	ls
 80a045e:	4a29      	ldrls	r2, [pc, #164]	; (80a0504 <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a0460:	2532      	movhi	r5, #50	; 0x32
 80a0462:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a0466:	f7ff ff8b 	bl	80a0380 <micros>
 80a046a:	6923      	ldr	r3, [r4, #16]
 80a046c:	1ac0      	subs	r0, r0, r3
 80a046e:	42a8      	cmp	r0, r5
 80a0470:	d3f9      	bcc.n	80a0466 <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a0472:	b672      	cpsid	i
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0474:	79a1      	ldrb	r1, [r4, #6]
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0476:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0478:	2902      	cmp	r1, #2
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a047a:	f8ad 300a 	strh.w	r3, [sp, #10]
  volatile uint8_t
    j,              // 8-bit inner loop counter
   *ptr = pixels,   // Pointer to next byte
 80a047e:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0482:	f000 8272 	beq.w	80a096a <_ZN17Adafruit_NeoPixel4showEv+0x526>
 80a0486:	2907      	cmp	r1, #7
 80a0488:	f000 826f 	beq.w	80a096a <_ZN17Adafruit_NeoPixel4showEv+0x526>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a048c:	2906      	cmp	r1, #6
 80a048e:	f000 8432 	beq.w	80a0cf6 <_ZN17Adafruit_NeoPixel4showEv+0x8b2>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a0492:	2905      	cmp	r1, #5
 80a0494:	f000 83ab 	beq.w	80a0bee <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
 80a0498:	2908      	cmp	r1, #8
 80a049a:	f000 83a8 	beq.w	80a0bee <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a049e:	2900      	cmp	r1, #0
 80a04a0:	f040 8563 	bne.w	80a0f6a <_ZN17Adafruit_NeoPixel4showEv+0xb26>
 80a04a4:	4a18      	ldr	r2, [pc, #96]	; (80a0508 <_ZN17Adafruit_NeoPixel4showEv+0xc4>)
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a04a6:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a04aa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a04ae:	b29b      	uxth	r3, r3
 80a04b0:	2b00      	cmp	r3, #0
 80a04b2:	f000 8395 	beq.w	80a0be0 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a04b6:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a04b8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a04bc:	f10e 0503 	add.w	r5, lr, #3
 80a04c0:	3b03      	subs	r3, #3
 80a04c2:	b29b      	uxth	r3, r3
 80a04c4:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a04c8:	f89e 3000 	ldrb.w	r3, [lr]
 80a04cc:	b2db      	uxtb	r3, r3
 80a04ce:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a04d2:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a04d6:	b2db      	uxtb	r3, r3
 80a04d8:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a04dc:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a04e0:	b2db      	uxtb	r3, r3
 80a04e2:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a04e6:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a04ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a04ee:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a04f2:	021b      	lsls	r3, r3, #8
 80a04f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a04f8:	4303      	orrs	r3, r0
 80a04fa:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a04fc:	f88d 1005 	strb.w	r1, [sp, #5]
 80a0500:	e11b      	b.n	80a073a <_ZN17Adafruit_NeoPixel4showEv+0x2f6>
 80a0502:	bf00      	nop
 80a0504:	080a2ea0 	.word	0x080a2ea0
 80a0508:	20000098 	.word	0x20000098
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a050c:	4600      	mov	r0, r0
 80a050e:	bf00      	nop
 80a0510:	bf00      	nop
 80a0512:	bf00      	nop
 80a0514:	bf00      	nop
 80a0516:	bf00      	nop
 80a0518:	bf00      	nop
 80a051a:	bf00      	nop
 80a051c:	bf00      	nop
 80a051e:	bf00      	nop
 80a0520:	bf00      	nop
 80a0522:	bf00      	nop
 80a0524:	bf00      	nop
 80a0526:	bf00      	nop
 80a0528:	bf00      	nop
 80a052a:	bf00      	nop
 80a052c:	bf00      	nop
 80a052e:	bf00      	nop
 80a0530:	bf00      	nop
 80a0532:	bf00      	nop
 80a0534:	bf00      	nop
 80a0536:	bf00      	nop
 80a0538:	bf00      	nop
 80a053a:	bf00      	nop
 80a053c:	bf00      	nop
 80a053e:	bf00      	nop
 80a0540:	bf00      	nop
 80a0542:	bf00      	nop
 80a0544:	bf00      	nop
 80a0546:	bf00      	nop
 80a0548:	bf00      	nop
 80a054a:	bf00      	nop
 80a054c:	bf00      	nop
 80a054e:	bf00      	nop
 80a0550:	bf00      	nop
 80a0552:	bf00      	nop
 80a0554:	bf00      	nop
 80a0556:	bf00      	nop
 80a0558:	bf00      	nop
 80a055a:	bf00      	nop
 80a055c:	bf00      	nop
 80a055e:	bf00      	nop
 80a0560:	bf00      	nop
 80a0562:	bf00      	nop
 80a0564:	bf00      	nop
 80a0566:	bf00      	nop
 80a0568:	bf00      	nop
 80a056a:	bf00      	nop
 80a056c:	bf00      	nop
 80a056e:	bf00      	nop
 80a0570:	bf00      	nop
 80a0572:	bf00      	nop
 80a0574:	bf00      	nop
 80a0576:	bf00      	nop
 80a0578:	bf00      	nop
 80a057a:	bf00      	nop
 80a057c:	bf00      	nop
 80a057e:	bf00      	nop
 80a0580:	bf00      	nop
 80a0582:	bf00      	nop
 80a0584:	bf00      	nop
 80a0586:	bf00      	nop
 80a0588:	bf00      	nop
 80a058a:	bf00      	nop
 80a058c:	bf00      	nop
 80a058e:	bf00      	nop
 80a0590:	bf00      	nop
 80a0592:	bf00      	nop
 80a0594:	bf00      	nop
 80a0596:	bf00      	nop
 80a0598:	bf00      	nop
 80a059a:	bf00      	nop
 80a059c:	bf00      	nop
 80a059e:	bf00      	nop
 80a05a0:	bf00      	nop
 80a05a2:	bf00      	nop
 80a05a4:	bf00      	nop
 80a05a6:	bf00      	nop
 80a05a8:	bf00      	nop
 80a05aa:	bf00      	nop
 80a05ac:	bf00      	nop
 80a05ae:	bf00      	nop
 80a05b0:	bf00      	nop
 80a05b2:	bf00      	nop
 80a05b4:	bf00      	nop
 80a05b6:	bf00      	nop
 80a05b8:	bf00      	nop
 80a05ba:	bf00      	nop
 80a05bc:	bf00      	nop
 80a05be:	bf00      	nop
 80a05c0:	bf00      	nop
 80a05c2:	bf00      	nop
 80a05c4:	bf00      	nop
 80a05c6:	bf00      	nop
 80a05c8:	bf00      	nop
 80a05ca:	bf00      	nop
 80a05cc:	bf00      	nop
 80a05ce:	bf00      	nop
 80a05d0:	bf00      	nop
 80a05d2:	bf00      	nop
 80a05d4:	bf00      	nop
 80a05d6:	bf00      	nop
 80a05d8:	bf00      	nop
 80a05da:	bf00      	nop
 80a05dc:	bf00      	nop
 80a05de:	bf00      	nop
 80a05e0:	bf00      	nop
 80a05e2:	bf00      	nop
 80a05e4:	bf00      	nop
 80a05e6:	bf00      	nop
 80a05e8:	bf00      	nop
 80a05ea:	bf00      	nop
 80a05ec:	bf00      	nop
 80a05ee:	bf00      	nop
 80a05f0:	bf00      	nop
 80a05f2:	bf00      	nop
 80a05f4:	bf00      	nop
 80a05f6:	bf00      	nop
 80a05f8:	bf00      	nop
 80a05fa:	bf00      	nop
 80a05fc:	bf00      	nop
 80a05fe:	bf00      	nop
 80a0600:	bf00      	nop
 80a0602:	bf00      	nop
 80a0604:	bf00      	nop
 80a0606:	bf00      	nop
 80a0608:	bf00      	nop
 80a060a:	bf00      	nop
 80a060c:	bf00      	nop
 80a060e:	bf00      	nop
 80a0610:	bf00      	nop
 80a0612:	bf00      	nop
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a0614:	79e3      	ldrb	r3, [r4, #7]
 80a0616:	6810      	ldr	r0, [r2, #0]
 80a0618:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a061c:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0620:	88bf      	ldrh	r7, [r7, #4]
 80a0622:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0626:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0628:	4600      	mov	r0, r0
 80a062a:	bf00      	nop
 80a062c:	bf00      	nop
 80a062e:	bf00      	nop
 80a0630:	bf00      	nop
 80a0632:	bf00      	nop
 80a0634:	bf00      	nop
 80a0636:	bf00      	nop
 80a0638:	bf00      	nop
 80a063a:	bf00      	nop
 80a063c:	bf00      	nop
 80a063e:	bf00      	nop
 80a0640:	bf00      	nop
 80a0642:	bf00      	nop
 80a0644:	bf00      	nop
 80a0646:	bf00      	nop
 80a0648:	bf00      	nop
 80a064a:	bf00      	nop
 80a064c:	bf00      	nop
 80a064e:	bf00      	nop
 80a0650:	bf00      	nop
 80a0652:	bf00      	nop
 80a0654:	bf00      	nop
 80a0656:	bf00      	nop
 80a0658:	bf00      	nop
 80a065a:	bf00      	nop
 80a065c:	bf00      	nop
 80a065e:	bf00      	nop
 80a0660:	bf00      	nop
 80a0662:	bf00      	nop
 80a0664:	bf00      	nop
 80a0666:	bf00      	nop
 80a0668:	bf00      	nop
 80a066a:	bf00      	nop
 80a066c:	bf00      	nop
 80a066e:	bf00      	nop
 80a0670:	bf00      	nop
 80a0672:	bf00      	nop
 80a0674:	bf00      	nop
 80a0676:	bf00      	nop
 80a0678:	bf00      	nop
 80a067a:	bf00      	nop
 80a067c:	bf00      	nop
 80a067e:	bf00      	nop
 80a0680:	bf00      	nop
 80a0682:	bf00      	nop
 80a0684:	bf00      	nop
 80a0686:	bf00      	nop
 80a0688:	bf00      	nop
 80a068a:	bf00      	nop
 80a068c:	bf00      	nop
 80a068e:	bf00      	nop
 80a0690:	bf00      	nop
 80a0692:	bf00      	nop
 80a0694:	bf00      	nop
 80a0696:	bf00      	nop
 80a0698:	bf00      	nop
 80a069a:	bf00      	nop
 80a069c:	bf00      	nop
 80a069e:	bf00      	nop
 80a06a0:	bf00      	nop
 80a06a2:	bf00      	nop
 80a06a4:	bf00      	nop
 80a06a6:	bf00      	nop
 80a06a8:	bf00      	nop
 80a06aa:	bf00      	nop
 80a06ac:	bf00      	nop
 80a06ae:	bf00      	nop
 80a06b0:	bf00      	nop
 80a06b2:	bf00      	nop
 80a06b4:	bf00      	nop
 80a06b6:	bf00      	nop
 80a06b8:	bf00      	nop
 80a06ba:	bf00      	nop
 80a06bc:	bf00      	nop
 80a06be:	bf00      	nop
 80a06c0:	bf00      	nop
 80a06c2:	bf00      	nop
 80a06c4:	bf00      	nop
 80a06c6:	bf00      	nop
 80a06c8:	bf00      	nop
 80a06ca:	bf00      	nop
 80a06cc:	bf00      	nop
 80a06ce:	bf00      	nop
 80a06d0:	bf00      	nop
 80a06d2:	bf00      	nop
 80a06d4:	bf00      	nop
 80a06d6:	bf00      	nop
 80a06d8:	bf00      	nop
 80a06da:	bf00      	nop
 80a06dc:	bf00      	nop
 80a06de:	bf00      	nop
 80a06e0:	bf00      	nop
 80a06e2:	bf00      	nop
 80a06e4:	bf00      	nop
 80a06e6:	bf00      	nop
 80a06e8:	bf00      	nop
 80a06ea:	bf00      	nop
 80a06ec:	bf00      	nop
 80a06ee:	bf00      	nop
 80a06f0:	bf00      	nop
 80a06f2:	bf00      	nop
 80a06f4:	bf00      	nop
 80a06f6:	bf00      	nop
 80a06f8:	bf00      	nop
 80a06fa:	bf00      	nop
 80a06fc:	bf00      	nop
 80a06fe:	bf00      	nop
 80a0700:	bf00      	nop
 80a0702:	bf00      	nop
 80a0704:	bf00      	nop
 80a0706:	bf00      	nop
 80a0708:	bf00      	nop
 80a070a:	bf00      	nop
 80a070c:	bf00      	nop
 80a070e:	bf00      	nop
 80a0710:	bf00      	nop
 80a0712:	bf00      	nop
 80a0714:	bf00      	nop
 80a0716:	bf00      	nop
 80a0718:	bf00      	nop
 80a071a:	bf00      	nop
 80a071c:	bf00      	nop
 80a071e:	bf00      	nop
 80a0720:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0722:	9b04      	ldr	r3, [sp, #16]
 80a0724:	085b      	lsrs	r3, r3, #1
 80a0726:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0728:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a072c:	3301      	adds	r3, #1
 80a072e:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0730:	2b17      	cmp	r3, #23
 80a0732:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0736:	f200 82db 	bhi.w	80a0cf0 <_ZN17Adafruit_NeoPixel4showEv+0x8ac>
        pinSet(pin, HIGH); // HIGH
 80a073a:	79e3      	ldrb	r3, [r4, #7]
 80a073c:	6810      	ldr	r0, [r2, #0]
 80a073e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0742:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0746:	88bf      	ldrh	r7, [r7, #4]
 80a0748:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a074c:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a074e:	9803      	ldr	r0, [sp, #12]
 80a0750:	9b04      	ldr	r3, [sp, #16]
 80a0752:	4218      	tst	r0, r3
 80a0754:	f47f aeda 	bne.w	80a050c <_ZN17Adafruit_NeoPixel4showEv+0xc8>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            "nop" "\n\t" "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a0758:	4600      	mov	r0, r0
 80a075a:	bf00      	nop
 80a075c:	bf00      	nop
 80a075e:	bf00      	nop
 80a0760:	bf00      	nop
 80a0762:	bf00      	nop
 80a0764:	bf00      	nop
 80a0766:	bf00      	nop
 80a0768:	bf00      	nop
 80a076a:	bf00      	nop
 80a076c:	bf00      	nop
 80a076e:	bf00      	nop
 80a0770:	bf00      	nop
 80a0772:	bf00      	nop
 80a0774:	bf00      	nop
 80a0776:	bf00      	nop
 80a0778:	bf00      	nop
 80a077a:	bf00      	nop
 80a077c:	bf00      	nop
 80a077e:	bf00      	nop
 80a0780:	bf00      	nop
 80a0782:	bf00      	nop
 80a0784:	bf00      	nop
 80a0786:	bf00      	nop
 80a0788:	bf00      	nop
 80a078a:	bf00      	nop
 80a078c:	bf00      	nop
 80a078e:	bf00      	nop
 80a0790:	bf00      	nop
 80a0792:	bf00      	nop
 80a0794:	bf00      	nop
 80a0796:	bf00      	nop
 80a0798:	bf00      	nop
 80a079a:	bf00      	nop
 80a079c:	bf00      	nop
 80a079e:	bf00      	nop
 80a07a0:	bf00      	nop
 80a07a2:	bf00      	nop
 80a07a4:	bf00      	nop
 80a07a6:	bf00      	nop
 80a07a8:	bf00      	nop
          // WS2811 spec             2.000us LOW
          // Adafruit on Arduino    (meas. 2.000us)
          // This lib on Spark Core (meas. 2.000us)
          // This lib on Photon     (meas. 2.000us)
          pinSet(pin, LOW); // LOW
 80a07aa:	79e3      	ldrb	r3, [r4, #7]
 80a07ac:	6810      	ldr	r0, [r2, #0]
 80a07ae:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a07b2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a07b6:	88bf      	ldrh	r7, [r7, #4]
 80a07b8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a07bc:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a07be:	4600      	mov	r0, r0
 80a07c0:	bf00      	nop
 80a07c2:	bf00      	nop
 80a07c4:	bf00      	nop
 80a07c6:	bf00      	nop
 80a07c8:	bf00      	nop
 80a07ca:	bf00      	nop
 80a07cc:	bf00      	nop
 80a07ce:	bf00      	nop
 80a07d0:	bf00      	nop
 80a07d2:	bf00      	nop
 80a07d4:	bf00      	nop
 80a07d6:	bf00      	nop
 80a07d8:	bf00      	nop
 80a07da:	bf00      	nop
 80a07dc:	bf00      	nop
 80a07de:	bf00      	nop
 80a07e0:	bf00      	nop
 80a07e2:	bf00      	nop
 80a07e4:	bf00      	nop
 80a07e6:	bf00      	nop
 80a07e8:	bf00      	nop
 80a07ea:	bf00      	nop
 80a07ec:	bf00      	nop
 80a07ee:	bf00      	nop
 80a07f0:	bf00      	nop
 80a07f2:	bf00      	nop
 80a07f4:	bf00      	nop
 80a07f6:	bf00      	nop
 80a07f8:	bf00      	nop
 80a07fa:	bf00      	nop
 80a07fc:	bf00      	nop
 80a07fe:	bf00      	nop
 80a0800:	bf00      	nop
 80a0802:	bf00      	nop
 80a0804:	bf00      	nop
 80a0806:	bf00      	nop
 80a0808:	bf00      	nop
 80a080a:	bf00      	nop
 80a080c:	bf00      	nop
 80a080e:	bf00      	nop
 80a0810:	bf00      	nop
 80a0812:	bf00      	nop
 80a0814:	bf00      	nop
 80a0816:	bf00      	nop
 80a0818:	bf00      	nop
 80a081a:	bf00      	nop
 80a081c:	bf00      	nop
 80a081e:	bf00      	nop
 80a0820:	bf00      	nop
 80a0822:	bf00      	nop
 80a0824:	bf00      	nop
 80a0826:	bf00      	nop
 80a0828:	bf00      	nop
 80a082a:	bf00      	nop
 80a082c:	bf00      	nop
 80a082e:	bf00      	nop
 80a0830:	bf00      	nop
 80a0832:	bf00      	nop
 80a0834:	bf00      	nop
 80a0836:	bf00      	nop
 80a0838:	bf00      	nop
 80a083a:	bf00      	nop
 80a083c:	bf00      	nop
 80a083e:	bf00      	nop
 80a0840:	bf00      	nop
 80a0842:	bf00      	nop
 80a0844:	bf00      	nop
 80a0846:	bf00      	nop
 80a0848:	bf00      	nop
 80a084a:	bf00      	nop
 80a084c:	bf00      	nop
 80a084e:	bf00      	nop
 80a0850:	bf00      	nop
 80a0852:	bf00      	nop
 80a0854:	bf00      	nop
 80a0856:	bf00      	nop
 80a0858:	bf00      	nop
 80a085a:	bf00      	nop
 80a085c:	bf00      	nop
 80a085e:	bf00      	nop
 80a0860:	bf00      	nop
 80a0862:	bf00      	nop
 80a0864:	bf00      	nop
 80a0866:	bf00      	nop
 80a0868:	bf00      	nop
 80a086a:	bf00      	nop
 80a086c:	bf00      	nop
 80a086e:	bf00      	nop
 80a0870:	bf00      	nop
 80a0872:	bf00      	nop
 80a0874:	bf00      	nop
 80a0876:	bf00      	nop
 80a0878:	bf00      	nop
 80a087a:	bf00      	nop
 80a087c:	bf00      	nop
 80a087e:	bf00      	nop
 80a0880:	bf00      	nop
 80a0882:	bf00      	nop
 80a0884:	bf00      	nop
 80a0886:	bf00      	nop
 80a0888:	bf00      	nop
 80a088a:	bf00      	nop
 80a088c:	bf00      	nop
 80a088e:	bf00      	nop
 80a0890:	bf00      	nop
 80a0892:	bf00      	nop
 80a0894:	bf00      	nop
 80a0896:	bf00      	nop
 80a0898:	bf00      	nop
 80a089a:	bf00      	nop
 80a089c:	bf00      	nop
 80a089e:	bf00      	nop
 80a08a0:	bf00      	nop
 80a08a2:	bf00      	nop
 80a08a4:	bf00      	nop
 80a08a6:	bf00      	nop
 80a08a8:	bf00      	nop
 80a08aa:	bf00      	nop
 80a08ac:	bf00      	nop
 80a08ae:	bf00      	nop
 80a08b0:	bf00      	nop
 80a08b2:	bf00      	nop
 80a08b4:	bf00      	nop
 80a08b6:	bf00      	nop
 80a08b8:	bf00      	nop
 80a08ba:	bf00      	nop
 80a08bc:	bf00      	nop
 80a08be:	bf00      	nop
 80a08c0:	bf00      	nop
 80a08c2:	bf00      	nop
 80a08c4:	bf00      	nop
 80a08c6:	bf00      	nop
 80a08c8:	bf00      	nop
 80a08ca:	bf00      	nop
 80a08cc:	bf00      	nop
 80a08ce:	bf00      	nop
 80a08d0:	bf00      	nop
 80a08d2:	bf00      	nop
 80a08d4:	bf00      	nop
 80a08d6:	bf00      	nop
 80a08d8:	bf00      	nop
 80a08da:	bf00      	nop
 80a08dc:	bf00      	nop
 80a08de:	bf00      	nop
 80a08e0:	bf00      	nop
 80a08e2:	bf00      	nop
 80a08e4:	bf00      	nop
 80a08e6:	bf00      	nop
 80a08e8:	bf00      	nop
 80a08ea:	bf00      	nop
 80a08ec:	bf00      	nop
 80a08ee:	bf00      	nop
 80a08f0:	bf00      	nop
 80a08f2:	bf00      	nop
 80a08f4:	bf00      	nop
 80a08f6:	bf00      	nop
 80a08f8:	bf00      	nop
 80a08fa:	bf00      	nop
 80a08fc:	bf00      	nop
 80a08fe:	bf00      	nop
 80a0900:	bf00      	nop
 80a0902:	bf00      	nop
 80a0904:	bf00      	nop
 80a0906:	bf00      	nop
 80a0908:	bf00      	nop
 80a090a:	bf00      	nop
 80a090c:	bf00      	nop
 80a090e:	bf00      	nop
 80a0910:	bf00      	nop
 80a0912:	bf00      	nop
 80a0914:	bf00      	nop
 80a0916:	bf00      	nop
 80a0918:	bf00      	nop
 80a091a:	bf00      	nop
 80a091c:	bf00      	nop
 80a091e:	bf00      	nop
 80a0920:	bf00      	nop
 80a0922:	bf00      	nop
 80a0924:	bf00      	nop
 80a0926:	bf00      	nop
 80a0928:	bf00      	nop
 80a092a:	bf00      	nop
 80a092c:	bf00      	nop
 80a092e:	bf00      	nop
 80a0930:	bf00      	nop
 80a0932:	bf00      	nop
 80a0934:	bf00      	nop
 80a0936:	bf00      	nop
 80a0938:	bf00      	nop
 80a093a:	bf00      	nop
 80a093c:	bf00      	nop
 80a093e:	bf00      	nop
 80a0940:	bf00      	nop
 80a0942:	bf00      	nop
 80a0944:	bf00      	nop
 80a0946:	bf00      	nop
 80a0948:	bf00      	nop
 80a094a:	bf00      	nop
 80a094c:	bf00      	nop
 80a094e:	bf00      	nop
 80a0950:	bf00      	nop
 80a0952:	bf00      	nop
 80a0954:	bf00      	nop
 80a0956:	bf00      	nop
 80a0958:	bf00      	nop
 80a095a:	bf00      	nop
 80a095c:	bf00      	nop
 80a095e:	bf00      	nop
 80a0960:	bf00      	nop
 80a0962:	bf00      	nop
 80a0964:	bf00      	nop
 80a0966:	bf00      	nop
 80a0968:	e6db      	b.n	80a0722 <_ZN17Adafruit_NeoPixel4showEv+0x2de>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a096a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a096e:	4a17      	ldr	r2, [pc, #92]	; (80a09cc <_ZN17Adafruit_NeoPixel4showEv+0x588>)
 80a0970:	b29b      	uxth	r3, r3
      mask = 0x800000; // reset the mask
 80a0972:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0976:	2600      	movs	r6, #0
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0978:	2b00      	cmp	r3, #0
 80a097a:	f000 8131 	beq.w	80a0be0 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a097e:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0980:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0984:	f10e 0103 	add.w	r1, lr, #3
 80a0988:	3b03      	subs	r3, #3
 80a098a:	b29b      	uxth	r3, r3
 80a098c:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0990:	f89e 3000 	ldrb.w	r3, [lr]
 80a0994:	b2db      	uxtb	r3, r3
 80a0996:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a099a:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a099e:	b2db      	uxtb	r3, r3
 80a09a0:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a09a4:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a09a8:	b2db      	uxtb	r3, r3
 80a09aa:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a09ae:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a09b2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a09b6:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a09ba:	0200      	lsls	r0, r0, #8
 80a09bc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80a09c0:	433b      	orrs	r3, r7
 80a09c2:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a09c4:	f88d 6005 	strb.w	r6, [sp, #5]
 80a09c8:	e080      	b.n	80a0acc <_ZN17Adafruit_NeoPixel4showEv+0x688>
 80a09ca:	bf00      	nop
 80a09cc:	20000098 	.word	0x20000098
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a09d0:	4600      	mov	r0, r0
 80a09d2:	bf00      	nop
 80a09d4:	bf00      	nop
 80a09d6:	bf00      	nop
 80a09d8:	bf00      	nop
 80a09da:	bf00      	nop
 80a09dc:	bf00      	nop
 80a09de:	bf00      	nop
 80a09e0:	bf00      	nop
 80a09e2:	bf00      	nop
 80a09e4:	bf00      	nop
 80a09e6:	bf00      	nop
 80a09e8:	bf00      	nop
 80a09ea:	bf00      	nop
 80a09ec:	bf00      	nop
 80a09ee:	bf00      	nop
 80a09f0:	bf00      	nop
 80a09f2:	bf00      	nop
 80a09f4:	bf00      	nop
 80a09f6:	bf00      	nop
 80a09f8:	bf00      	nop
 80a09fa:	bf00      	nop
 80a09fc:	bf00      	nop
 80a09fe:	bf00      	nop
 80a0a00:	bf00      	nop
 80a0a02:	bf00      	nop
 80a0a04:	bf00      	nop
 80a0a06:	bf00      	nop
 80a0a08:	bf00      	nop
 80a0a0a:	bf00      	nop
 80a0a0c:	bf00      	nop
 80a0a0e:	bf00      	nop
 80a0a10:	bf00      	nop
 80a0a12:	bf00      	nop
 80a0a14:	bf00      	nop
 80a0a16:	bf00      	nop
 80a0a18:	bf00      	nop
 80a0a1a:	bf00      	nop
 80a0a1c:	bf00      	nop
 80a0a1e:	bf00      	nop
 80a0a20:	bf00      	nop
 80a0a22:	bf00      	nop
 80a0a24:	bf00      	nop
 80a0a26:	bf00      	nop
 80a0a28:	bf00      	nop
 80a0a2a:	bf00      	nop
 80a0a2c:	bf00      	nop
 80a0a2e:	bf00      	nop
 80a0a30:	bf00      	nop
 80a0a32:	bf00      	nop
 80a0a34:	bf00      	nop
 80a0a36:	bf00      	nop
 80a0a38:	bf00      	nop
 80a0a3a:	bf00      	nop
 80a0a3c:	bf00      	nop
 80a0a3e:	bf00      	nop
 80a0a40:	bf00      	nop
 80a0a42:	bf00      	nop
 80a0a44:	bf00      	nop
 80a0a46:	bf00      	nop
 80a0a48:	bf00      	nop
 80a0a4a:	bf00      	nop
 80a0a4c:	bf00      	nop
 80a0a4e:	bf00      	nop
 80a0a50:	bf00      	nop
 80a0a52:	bf00      	nop
 80a0a54:	bf00      	nop
 80a0a56:	bf00      	nop
 80a0a58:	bf00      	nop
 80a0a5a:	bf00      	nop
 80a0a5c:	bf00      	nop
 80a0a5e:	bf00      	nop
 80a0a60:	bf00      	nop
 80a0a62:	bf00      	nop
 80a0a64:	bf00      	nop
 80a0a66:	bf00      	nop
 80a0a68:	bf00      	nop
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 446ns)
          // This lib on Photon     (meas. 434ns)
          pinSet(pin, LOW); // LOW
 80a0a6a:	79e3      	ldrb	r3, [r4, #7]
 80a0a6c:	6810      	ldr	r0, [r2, #0]
 80a0a6e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0a72:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0a76:	88bf      	ldrh	r7, [r7, #4]
 80a0a78:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0a7c:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0a7e:	4600      	mov	r0, r0
 80a0a80:	bf00      	nop
 80a0a82:	bf00      	nop
 80a0a84:	bf00      	nop
 80a0a86:	bf00      	nop
 80a0a88:	bf00      	nop
 80a0a8a:	bf00      	nop
 80a0a8c:	bf00      	nop
 80a0a8e:	bf00      	nop
 80a0a90:	bf00      	nop
 80a0a92:	bf00      	nop
 80a0a94:	bf00      	nop
 80a0a96:	bf00      	nop
 80a0a98:	bf00      	nop
 80a0a9a:	bf00      	nop
 80a0a9c:	bf00      	nop
 80a0a9e:	bf00      	nop
 80a0aa0:	bf00      	nop
 80a0aa2:	bf00      	nop
 80a0aa4:	bf00      	nop
 80a0aa6:	bf00      	nop
 80a0aa8:	bf00      	nop
 80a0aaa:	bf00      	nop
 80a0aac:	bf00      	nop
 80a0aae:	bf00      	nop
 80a0ab0:	bf00      	nop
 80a0ab2:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0ab4:	9b04      	ldr	r3, [sp, #16]
 80a0ab6:	085b      	lsrs	r3, r3, #1
 80a0ab8:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0aba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0abe:	3301      	adds	r3, #1
 80a0ac0:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0ac2:	2b17      	cmp	r3, #23
 80a0ac4:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0ac8:	f200 8083 	bhi.w	80a0bd2 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
        pinSet(pin, HIGH); // HIGH
 80a0acc:	79e3      	ldrb	r3, [r4, #7]
 80a0ace:	6810      	ldr	r0, [r2, #0]
 80a0ad0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0ad4:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0ad8:	88bf      	ldrh	r7, [r7, #4]
 80a0ada:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0ade:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0ae0:	9803      	ldr	r0, [sp, #12]
 80a0ae2:	9b04      	ldr	r3, [sp, #16]
 80a0ae4:	4218      	tst	r0, r3
 80a0ae6:	f47f af73 	bne.w	80a09d0 <_ZN17Adafruit_NeoPixel4showEv+0x58c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0aea:	4600      	mov	r0, r0
 80a0aec:	bf00      	nop
 80a0aee:	bf00      	nop
 80a0af0:	bf00      	nop
 80a0af2:	bf00      	nop
 80a0af4:	bf00      	nop
 80a0af6:	bf00      	nop
 80a0af8:	bf00      	nop
 80a0afa:	bf00      	nop
 80a0afc:	bf00      	nop
 80a0afe:	bf00      	nop
 80a0b00:	bf00      	nop
 80a0b02:	bf00      	nop
 80a0b04:	bf00      	nop
 80a0b06:	bf00      	nop
 80a0b08:	bf00      	nop
 80a0b0a:	bf00      	nop
 80a0b0c:	bf00      	nop
 80a0b0e:	bf00      	nop
 80a0b10:	bf00      	nop
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 944ns)
          // This lib on Photon     (meas. 936ns)
          pinSet(pin, LOW); // LOW
 80a0b12:	79e3      	ldrb	r3, [r4, #7]
 80a0b14:	6810      	ldr	r0, [r2, #0]
 80a0b16:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0b1a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0b1e:	88bf      	ldrh	r7, [r7, #4]
 80a0b20:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0b24:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0b26:	4600      	mov	r0, r0
 80a0b28:	bf00      	nop
 80a0b2a:	bf00      	nop
 80a0b2c:	bf00      	nop
 80a0b2e:	bf00      	nop
 80a0b30:	bf00      	nop
 80a0b32:	bf00      	nop
 80a0b34:	bf00      	nop
 80a0b36:	bf00      	nop
 80a0b38:	bf00      	nop
 80a0b3a:	bf00      	nop
 80a0b3c:	bf00      	nop
 80a0b3e:	bf00      	nop
 80a0b40:	bf00      	nop
 80a0b42:	bf00      	nop
 80a0b44:	bf00      	nop
 80a0b46:	bf00      	nop
 80a0b48:	bf00      	nop
 80a0b4a:	bf00      	nop
 80a0b4c:	bf00      	nop
 80a0b4e:	bf00      	nop
 80a0b50:	bf00      	nop
 80a0b52:	bf00      	nop
 80a0b54:	bf00      	nop
 80a0b56:	bf00      	nop
 80a0b58:	bf00      	nop
 80a0b5a:	bf00      	nop
 80a0b5c:	bf00      	nop
 80a0b5e:	bf00      	nop
 80a0b60:	bf00      	nop
 80a0b62:	bf00      	nop
 80a0b64:	bf00      	nop
 80a0b66:	bf00      	nop
 80a0b68:	bf00      	nop
 80a0b6a:	bf00      	nop
 80a0b6c:	bf00      	nop
 80a0b6e:	bf00      	nop
 80a0b70:	bf00      	nop
 80a0b72:	bf00      	nop
 80a0b74:	bf00      	nop
 80a0b76:	bf00      	nop
 80a0b78:	bf00      	nop
 80a0b7a:	bf00      	nop
 80a0b7c:	bf00      	nop
 80a0b7e:	bf00      	nop
 80a0b80:	bf00      	nop
 80a0b82:	bf00      	nop
 80a0b84:	bf00      	nop
 80a0b86:	bf00      	nop
 80a0b88:	bf00      	nop
 80a0b8a:	bf00      	nop
 80a0b8c:	bf00      	nop
 80a0b8e:	bf00      	nop
 80a0b90:	bf00      	nop
 80a0b92:	bf00      	nop
 80a0b94:	bf00      	nop
 80a0b96:	bf00      	nop
 80a0b98:	bf00      	nop
 80a0b9a:	bf00      	nop
 80a0b9c:	bf00      	nop
 80a0b9e:	bf00      	nop
 80a0ba0:	bf00      	nop
 80a0ba2:	bf00      	nop
 80a0ba4:	bf00      	nop
 80a0ba6:	bf00      	nop
 80a0ba8:	bf00      	nop
 80a0baa:	bf00      	nop
 80a0bac:	bf00      	nop
 80a0bae:	bf00      	nop
 80a0bb0:	bf00      	nop
 80a0bb2:	bf00      	nop
 80a0bb4:	bf00      	nop
 80a0bb6:	bf00      	nop
 80a0bb8:	bf00      	nop
 80a0bba:	bf00      	nop
 80a0bbc:	bf00      	nop
 80a0bbe:	bf00      	nop
 80a0bc0:	bf00      	nop
 80a0bc2:	bf00      	nop
 80a0bc4:	bf00      	nop
 80a0bc6:	bf00      	nop
 80a0bc8:	bf00      	nop
 80a0bca:	bf00      	nop
 80a0bcc:	bf00      	nop
 80a0bce:	bf00      	nop
 80a0bd0:	e770      	b.n	80a0ab4 <_ZN17Adafruit_NeoPixel4showEv+0x670>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0bd2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0bd6:	468e      	mov	lr, r1
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0bd8:	b29b      	uxth	r3, r3
 80a0bda:	2b00      	cmp	r3, #0
 80a0bdc:	f47f aecf 	bne.w	80a097e <_ZN17Adafruit_NeoPixel4showEv+0x53a>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80a0be0:	b662      	cpsie	i
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a0be2:	f7ff fbcd 	bl	80a0380 <micros>
 80a0be6:	6120      	str	r0, [r4, #16]
}
 80a0be8:	b006      	add	sp, #24
 80a0bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0bee:	4b5e      	ldr	r3, [pc, #376]	; (80a0d68 <_ZN17Adafruit_NeoPixel4showEv+0x924>)
 80a0bf0:	4a5e      	ldr	r2, [pc, #376]	; (80a0d6c <_ZN17Adafruit_NeoPixel4showEv+0x928>)
        pinSet(pin, HIGH); // HIGH
        if (c & mask) { // if masked bit is high
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a0bf2:	4618      	mov	r0, r3
 80a0bf4:	6811      	ldr	r1, [r2, #0]
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0bf6:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0bfa:	2700      	movs	r7, #0
    #define CYCLES_800_T1H  80 // 812ns (meas. 792ns)
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0bfc:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a0c00:	b292      	uxth	r2, r2
 80a0c02:	2a00      	cmp	r2, #0
 80a0c04:	d0ec      	beq.n	80a0be0 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0c06:	f8cd 8010 	str.w	r8, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0c0a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a0c0e:	f10e 0503 	add.w	r5, lr, #3
 80a0c12:	3a03      	subs	r2, #3
 80a0c14:	b292      	uxth	r2, r2
 80a0c16:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a0c1a:	f89e 2000 	ldrb.w	r2, [lr]
 80a0c1e:	b2d2      	uxtb	r2, r2
 80a0c20:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a0c24:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80a0c28:	b2d2      	uxtb	r2, r2
 80a0c2a:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0c2e:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80a0c32:	b2d2      	uxtb	r2, r2
 80a0c34:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0c38:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a0c3c:	f89d e007 	ldrb.w	lr, [sp, #7]
 80a0c40:	f89d c008 	ldrb.w	ip, [sp, #8]
 80a0c44:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 80a0c48:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 80a0c4c:	ea42 020c 	orr.w	r2, r2, ip
 80a0c50:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0c52:	f88d 7005 	strb.w	r7, [sp, #5]
      do {
        cyc = DWT->CYCCNT;
        pinSet(pin, HIGH); // HIGH
 80a0c56:	79e2      	ldrb	r2, [r4, #7]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0c58:	685e      	ldr	r6, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a0c5a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0c5e:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0c62:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0c66:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a0c6a:	9605      	str	r6, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a0c6c:	f8a2 e018 	strh.w	lr, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a0c70:	9e03      	ldr	r6, [sp, #12]
 80a0c72:	9a04      	ldr	r2, [sp, #16]
 80a0c74:	4216      	tst	r6, r2
 80a0c76:	d023      	beq.n	80a0cc0 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a0c78:	685a      	ldr	r2, [r3, #4]
 80a0c7a:	9e05      	ldr	r6, [sp, #20]
 80a0c7c:	1b92      	subs	r2, r2, r6
 80a0c7e:	2a4f      	cmp	r2, #79	; 0x4f
 80a0c80:	d9fa      	bls.n	80a0c78 <_ZN17Adafruit_NeoPixel4showEv+0x834>
          pinSet(pin, LOW);
 80a0c82:	79e2      	ldrb	r2, [r4, #7]
 80a0c84:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0c88:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0c8c:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0c90:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a0c94:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0c98:	6842      	ldr	r2, [r0, #4]
 80a0c9a:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a0c9c:	685a      	ldr	r2, [r3, #4]
 80a0c9e:	9e05      	ldr	r6, [sp, #20]
 80a0ca0:	1b92      	subs	r2, r2, r6
 80a0ca2:	2a07      	cmp	r2, #7
 80a0ca4:	d9fa      	bls.n	80a0c9c <_ZN17Adafruit_NeoPixel4showEv+0x858>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
        }
        mask >>= 1;
 80a0ca6:	9a04      	ldr	r2, [sp, #16]
 80a0ca8:	0852      	lsrs	r2, r2, #1
 80a0caa:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0cac:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a0cb0:	3201      	adds	r2, #1
 80a0cb2:	b2d2      	uxtb	r2, r2
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0cb4:	2a17      	cmp	r2, #23
 80a0cb6:	f88d 2005 	strb.w	r2, [sp, #5]
 80a0cba:	d9cc      	bls.n	80a0c56 <_ZN17Adafruit_NeoPixel4showEv+0x812>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0cbc:	46ae      	mov	lr, r5
 80a0cbe:	e79d      	b.n	80a0bfc <_ZN17Adafruit_NeoPixel4showEv+0x7b8>
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
        }
        else { // else masked bit is low
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a0cc0:	685a      	ldr	r2, [r3, #4]
 80a0cc2:	9e05      	ldr	r6, [sp, #20]
 80a0cc4:	1b92      	subs	r2, r2, r6
 80a0cc6:	2a18      	cmp	r2, #24
 80a0cc8:	d9fa      	bls.n	80a0cc0 <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          pinSet(pin, LOW);
 80a0cca:	79e2      	ldrb	r2, [r4, #7]
 80a0ccc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a0cd0:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a0cd4:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a0cd8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a0cdc:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a0ce0:	6842      	ldr	r2, [r0, #4]
 80a0ce2:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a0ce4:	685a      	ldr	r2, [r3, #4]
 80a0ce6:	9e05      	ldr	r6, [sp, #20]
 80a0ce8:	1b92      	subs	r2, r2, r6
 80a0cea:	2a45      	cmp	r2, #69	; 0x45
 80a0cec:	d9fa      	bls.n	80a0ce4 <_ZN17Adafruit_NeoPixel4showEv+0x8a0>
 80a0cee:	e7da      	b.n	80a0ca6 <_ZN17Adafruit_NeoPixel4showEv+0x862>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a0cf0:	46ae      	mov	lr, r5
 80a0cf2:	f7ff bbda 	b.w	80a04aa <_ZN17Adafruit_NeoPixel4showEv+0x66>
 80a0cf6:	4a1d      	ldr	r2, [pc, #116]	; (80a0d6c <_ZN17Adafruit_NeoPixel4showEv+0x928>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
      mask = 0x80000000; // reset the mask
 80a0cf8:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
 80a0cfc:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a0cfe:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0d02:	b29b      	uxth	r3, r3
 80a0d04:	2b00      	cmp	r3, #0
 80a0d06:	f43f af6b 	beq.w	80a0be0 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x80000000; // reset the mask
 80a0d0a:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a0d0c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0d10:	f10e 0104 	add.w	r1, lr, #4
 80a0d14:	3b04      	subs	r3, #4
 80a0d16:	b29b      	uxth	r3, r3
 80a0d18:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0d1c:	f89e 3000 	ldrb.w	r3, [lr]
 80a0d20:	b2db      	uxtb	r3, r3
 80a0d22:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a0d26:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0d2a:	b2db      	uxtb	r3, r3
 80a0d2c:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0d30:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0d34:	b2db      	uxtb	r3, r3
 80a0d36:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a0d3a:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80a0d3e:	b2db      	uxtb	r3, r3
 80a0d40:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a0d44:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a0d48:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80a0d4c:	f89d e008 	ldrb.w	lr, [sp, #8]
 80a0d50:	043f      	lsls	r7, r7, #16
 80a0d52:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a0d56:	ea47 6303 	orr.w	r3, r7, r3, lsl #24
 80a0d5a:	4303      	orrs	r3, r0
 80a0d5c:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80a0d60:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a0d62:	f88d 6005 	strb.w	r6, [sp, #5]
 80a0d66:	e07e      	b.n	80a0e66 <_ZN17Adafruit_NeoPixel4showEv+0xa22>
 80a0d68:	e0001000 	.word	0xe0001000
 80a0d6c:	20000098 	.word	0x20000098
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0d70:	4600      	mov	r0, r0
 80a0d72:	bf00      	nop
 80a0d74:	bf00      	nop
 80a0d76:	bf00      	nop
 80a0d78:	bf00      	nop
 80a0d7a:	bf00      	nop
 80a0d7c:	bf00      	nop
 80a0d7e:	bf00      	nop
 80a0d80:	bf00      	nop
 80a0d82:	bf00      	nop
 80a0d84:	bf00      	nop
 80a0d86:	bf00      	nop
 80a0d88:	bf00      	nop
 80a0d8a:	bf00      	nop
 80a0d8c:	bf00      	nop
 80a0d8e:	bf00      	nop
 80a0d90:	bf00      	nop
 80a0d92:	bf00      	nop
 80a0d94:	bf00      	nop
 80a0d96:	bf00      	nop
 80a0d98:	bf00      	nop
 80a0d9a:	bf00      	nop
 80a0d9c:	bf00      	nop
 80a0d9e:	bf00      	nop
 80a0da0:	bf00      	nop
 80a0da2:	bf00      	nop
 80a0da4:	bf00      	nop
 80a0da6:	bf00      	nop
 80a0da8:	bf00      	nop
 80a0daa:	bf00      	nop
 80a0dac:	bf00      	nop
 80a0dae:	bf00      	nop
 80a0db0:	bf00      	nop
 80a0db2:	bf00      	nop
 80a0db4:	bf00      	nop
 80a0db6:	bf00      	nop
 80a0db8:	bf00      	nop
 80a0dba:	bf00      	nop
 80a0dbc:	bf00      	nop
 80a0dbe:	bf00      	nop
 80a0dc0:	bf00      	nop
 80a0dc2:	bf00      	nop
 80a0dc4:	bf00      	nop
 80a0dc6:	bf00      	nop
 80a0dc8:	bf00      	nop
 80a0dca:	bf00      	nop
 80a0dcc:	bf00      	nop
 80a0dce:	bf00      	nop
 80a0dd0:	bf00      	nop
 80a0dd2:	bf00      	nop
 80a0dd4:	bf00      	nop
 80a0dd6:	bf00      	nop
 80a0dd8:	bf00      	nop
 80a0dda:	bf00      	nop
 80a0ddc:	bf00      	nop
          // SK6812RGBW spec         600ns LOW
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 598ns)
          // This lib on Photon     (meas. 600ns)
          pinSet(pin, LOW); // LOW
 80a0dde:	79e3      	ldrb	r3, [r4, #7]
 80a0de0:	6810      	ldr	r0, [r2, #0]
 80a0de2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0de6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0dea:	88bf      	ldrh	r7, [r7, #4]
 80a0dec:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0df0:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0df2:	4600      	mov	r0, r0
 80a0df4:	bf00      	nop
 80a0df6:	bf00      	nop
 80a0df8:	bf00      	nop
 80a0dfa:	bf00      	nop
 80a0dfc:	bf00      	nop
 80a0dfe:	bf00      	nop
 80a0e00:	bf00      	nop
 80a0e02:	bf00      	nop
 80a0e04:	bf00      	nop
 80a0e06:	bf00      	nop
 80a0e08:	bf00      	nop
 80a0e0a:	bf00      	nop
 80a0e0c:	bf00      	nop
 80a0e0e:	bf00      	nop
 80a0e10:	bf00      	nop
 80a0e12:	bf00      	nop
 80a0e14:	bf00      	nop
 80a0e16:	bf00      	nop
 80a0e18:	bf00      	nop
 80a0e1a:	bf00      	nop
 80a0e1c:	bf00      	nop
 80a0e1e:	bf00      	nop
 80a0e20:	bf00      	nop
 80a0e22:	bf00      	nop
 80a0e24:	bf00      	nop
 80a0e26:	bf00      	nop
 80a0e28:	bf00      	nop
 80a0e2a:	bf00      	nop
 80a0e2c:	bf00      	nop
 80a0e2e:	bf00      	nop
 80a0e30:	bf00      	nop
 80a0e32:	bf00      	nop
 80a0e34:	bf00      	nop
 80a0e36:	bf00      	nop
 80a0e38:	bf00      	nop
 80a0e3a:	bf00      	nop
 80a0e3c:	bf00      	nop
 80a0e3e:	bf00      	nop
 80a0e40:	bf00      	nop
 80a0e42:	bf00      	nop
 80a0e44:	bf00      	nop
 80a0e46:	bf00      	nop
 80a0e48:	bf00      	nop
 80a0e4a:	bf00      	nop
 80a0e4c:	bf00      	nop
 80a0e4e:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0e50:	9b04      	ldr	r3, [sp, #16]
 80a0e52:	085b      	lsrs	r3, r3, #1
 80a0e54:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a0e56:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0e5a:	3301      	adds	r3, #1
 80a0e5c:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
      do {
 80a0e5e:	2b1f      	cmp	r3, #31
 80a0e60:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0e64:	d87e      	bhi.n	80a0f64 <_ZN17Adafruit_NeoPixel4showEv+0xb20>
        pinSet(pin, HIGH); // HIGH
 80a0e66:	79e3      	ldrb	r3, [r4, #7]
 80a0e68:	6810      	ldr	r0, [r2, #0]
 80a0e6a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0e6e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0e72:	88bf      	ldrh	r7, [r7, #4]
 80a0e74:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0e78:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0e7a:	9803      	ldr	r0, [sp, #12]
 80a0e7c:	9b04      	ldr	r3, [sp, #16]
 80a0e7e:	4218      	tst	r0, r3
 80a0e80:	f47f af76 	bne.w	80a0d70 <_ZN17Adafruit_NeoPixel4showEv+0x92c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0e84:	4600      	mov	r0, r0
 80a0e86:	bf00      	nop
 80a0e88:	bf00      	nop
 80a0e8a:	bf00      	nop
 80a0e8c:	bf00      	nop
 80a0e8e:	bf00      	nop
 80a0e90:	bf00      	nop
 80a0e92:	bf00      	nop
 80a0e94:	bf00      	nop
 80a0e96:	bf00      	nop
 80a0e98:	bf00      	nop
 80a0e9a:	bf00      	nop
 80a0e9c:	bf00      	nop
 80a0e9e:	bf00      	nop
 80a0ea0:	bf00      	nop
 80a0ea2:	bf00      	nop
 80a0ea4:	bf00      	nop
 80a0ea6:	bf00      	nop
 80a0ea8:	bf00      	nop
 80a0eaa:	bf00      	nop
          // SK6812RGBW spec         900ns LOW
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 904ns)
          // This lib on Photon     (meas. 900ns)
          pinSet(pin, LOW); // LOW
 80a0eac:	79e3      	ldrb	r3, [r4, #7]
 80a0eae:	6810      	ldr	r0, [r2, #0]
 80a0eb0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0eb4:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0eb8:	88bf      	ldrh	r7, [r7, #4]
 80a0eba:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0ebe:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0ec0:	4600      	mov	r0, r0
 80a0ec2:	bf00      	nop
 80a0ec4:	bf00      	nop
 80a0ec6:	bf00      	nop
 80a0ec8:	bf00      	nop
 80a0eca:	bf00      	nop
 80a0ecc:	bf00      	nop
 80a0ece:	bf00      	nop
 80a0ed0:	bf00      	nop
 80a0ed2:	bf00      	nop
 80a0ed4:	bf00      	nop
 80a0ed6:	bf00      	nop
 80a0ed8:	bf00      	nop
 80a0eda:	bf00      	nop
 80a0edc:	bf00      	nop
 80a0ede:	bf00      	nop
 80a0ee0:	bf00      	nop
 80a0ee2:	bf00      	nop
 80a0ee4:	bf00      	nop
 80a0ee6:	bf00      	nop
 80a0ee8:	bf00      	nop
 80a0eea:	bf00      	nop
 80a0eec:	bf00      	nop
 80a0eee:	bf00      	nop
 80a0ef0:	bf00      	nop
 80a0ef2:	bf00      	nop
 80a0ef4:	bf00      	nop
 80a0ef6:	bf00      	nop
 80a0ef8:	bf00      	nop
 80a0efa:	bf00      	nop
 80a0efc:	bf00      	nop
 80a0efe:	bf00      	nop
 80a0f00:	bf00      	nop
 80a0f02:	bf00      	nop
 80a0f04:	bf00      	nop
 80a0f06:	bf00      	nop
 80a0f08:	bf00      	nop
 80a0f0a:	bf00      	nop
 80a0f0c:	bf00      	nop
 80a0f0e:	bf00      	nop
 80a0f10:	bf00      	nop
 80a0f12:	bf00      	nop
 80a0f14:	bf00      	nop
 80a0f16:	bf00      	nop
 80a0f18:	bf00      	nop
 80a0f1a:	bf00      	nop
 80a0f1c:	bf00      	nop
 80a0f1e:	bf00      	nop
 80a0f20:	bf00      	nop
 80a0f22:	bf00      	nop
 80a0f24:	bf00      	nop
 80a0f26:	bf00      	nop
 80a0f28:	bf00      	nop
 80a0f2a:	bf00      	nop
 80a0f2c:	bf00      	nop
 80a0f2e:	bf00      	nop
 80a0f30:	bf00      	nop
 80a0f32:	bf00      	nop
 80a0f34:	bf00      	nop
 80a0f36:	bf00      	nop
 80a0f38:	bf00      	nop
 80a0f3a:	bf00      	nop
 80a0f3c:	bf00      	nop
 80a0f3e:	bf00      	nop
 80a0f40:	bf00      	nop
 80a0f42:	bf00      	nop
 80a0f44:	bf00      	nop
 80a0f46:	bf00      	nop
 80a0f48:	bf00      	nop
 80a0f4a:	bf00      	nop
 80a0f4c:	bf00      	nop
 80a0f4e:	bf00      	nop
 80a0f50:	bf00      	nop
 80a0f52:	bf00      	nop
 80a0f54:	bf00      	nop
 80a0f56:	bf00      	nop
 80a0f58:	bf00      	nop
 80a0f5a:	bf00      	nop
 80a0f5c:	bf00      	nop
 80a0f5e:	bf00      	nop
 80a0f60:	bf00      	nop
 80a0f62:	e775      	b.n	80a0e50 <_ZN17Adafruit_NeoPixel4showEv+0xa0c>
      mask = 0x80000000; // reset the mask
      i = i-4;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
 80a0f64:	468e      	mov	lr, r1
 80a0f66:	e6ca      	b.n	80a0cfe <_ZN17Adafruit_NeoPixel4showEv+0x8ba>
 80a0f68:	4770      	bx	lr
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a0f6a:	2903      	cmp	r1, #3
 80a0f6c:	f000 812e 	beq.w	80a11cc <_ZN17Adafruit_NeoPixel4showEv+0xd88>
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0f70:	4a1e      	ldr	r2, [pc, #120]	; (80a0fec <_ZN17Adafruit_NeoPixel4showEv+0xba8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0f72:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a0f76:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0f78:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0f7c:	b29b      	uxth	r3, r3
 80a0f7e:	2b00      	cmp	r3, #0
 80a0f80:	f43f ae2e 	beq.w	80a0be0 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0f84:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0f86:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0f8a:	79e0      	ldrb	r0, [r4, #7]
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
 80a0f8c:	3b03      	subs	r3, #3
 80a0f8e:	b29b      	uxth	r3, r3
 80a0f90:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0f94:	f89e 3000 	ldrb.w	r3, [lr]
 80a0f98:	f10e 0103 	add.w	r1, lr, #3
 80a0f9c:	b2db      	uxtb	r3, r3
 80a0f9e:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a0fa2:	f89e 3001 	ldrb.w	r3, [lr, #1]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0fa6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a0faa:	b2db      	uxtb	r3, r3
 80a0fac:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a0fb0:	f89e 3002 	ldrb.w	r3, [lr, #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0fb4:	f8d2 e000 	ldr.w	lr, [r2]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
 80a0fb8:	b2db      	uxtb	r3, r3
 80a0fba:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0fbe:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a0fc2:	f89d 3008 	ldrb.w	r3, [sp, #8]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0fc6:	eb0e 0c80 	add.w	ip, lr, r0, lsl #2
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0fca:	021b      	lsls	r3, r3, #8
 80a0fcc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a0fd0:	f89d 7006 	ldrb.w	r7, [sp, #6]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a0fd4:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a0fd8:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a0fdc:	433b      	orrs	r3, r7
 80a0fde:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0fe0:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a0fe4:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a0fe8:	e07d      	b.n	80a10e6 <_ZN17Adafruit_NeoPixel4showEv+0xca2>
 80a0fea:	bf00      	nop
 80a0fec:	20000098 	.word	0x20000098
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
          // TM1829 spec             800ns LOW
          // This lib on Spark Core (meas. 806ns)
          // This lib on Photon     (meas. 792ns)
          mask >>= 1; // Do this task during the long delay of this bit
 80a0ff0:	9b04      	ldr	r3, [sp, #16]
 80a0ff2:	085b      	lsrs	r3, r3, #1
 80a0ff4:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0ff6:	4600      	mov	r0, r0
 80a0ff8:	bf00      	nop
 80a0ffa:	bf00      	nop
 80a0ffc:	bf00      	nop
 80a0ffe:	bf00      	nop
 80a1000:	bf00      	nop
 80a1002:	bf00      	nop
 80a1004:	bf00      	nop
 80a1006:	bf00      	nop
 80a1008:	bf00      	nop
 80a100a:	bf00      	nop
 80a100c:	bf00      	nop
 80a100e:	bf00      	nop
 80a1010:	bf00      	nop
 80a1012:	bf00      	nop
 80a1014:	bf00      	nop
 80a1016:	bf00      	nop
 80a1018:	bf00      	nop
 80a101a:	bf00      	nop
 80a101c:	bf00      	nop
 80a101e:	bf00      	nop
 80a1020:	bf00      	nop
 80a1022:	bf00      	nop
 80a1024:	bf00      	nop
 80a1026:	bf00      	nop
 80a1028:	bf00      	nop
 80a102a:	bf00      	nop
 80a102c:	bf00      	nop
 80a102e:	bf00      	nop
 80a1030:	bf00      	nop
 80a1032:	bf00      	nop
 80a1034:	bf00      	nop
 80a1036:	bf00      	nop
 80a1038:	bf00      	nop
 80a103a:	bf00      	nop
 80a103c:	bf00      	nop
 80a103e:	bf00      	nop
 80a1040:	bf00      	nop
 80a1042:	bf00      	nop
 80a1044:	bf00      	nop
 80a1046:	bf00      	nop
 80a1048:	bf00      	nop
 80a104a:	bf00      	nop
 80a104c:	bf00      	nop
 80a104e:	bf00      	nop
 80a1050:	bf00      	nop
 80a1052:	bf00      	nop
 80a1054:	bf00      	nop
 80a1056:	bf00      	nop
 80a1058:	bf00      	nop
 80a105a:	bf00      	nop
 80a105c:	bf00      	nop
 80a105e:	bf00      	nop
 80a1060:	bf00      	nop
 80a1062:	bf00      	nop
 80a1064:	bf00      	nop
 80a1066:	bf00      	nop
 80a1068:	bf00      	nop
 80a106a:	bf00      	nop
 80a106c:	bf00      	nop
 80a106e:	bf00      	nop
 80a1070:	bf00      	nop
 80a1072:	bf00      	nop
 80a1074:	bf00      	nop
 80a1076:	bf00      	nop
 80a1078:	bf00      	nop
 80a107a:	bf00      	nop
          j++;
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a107c:	79e0      	ldrb	r0, [r4, #7]
 80a107e:	6817      	ldr	r7, [r2, #0]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a1080:	f89d 3005 	ldrb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1084:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a1088:	eb07 0e80 	add.w	lr, r7, r0, lsl #2
 80a108c:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1090:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a1094:	3301      	adds	r3, #1
 80a1096:	b2db      	uxtb	r3, r3
 80a1098:	f88d 3005 	strb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a109c:	f8a0 e018 	strh.w	lr, [r0, #24]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a10a0:	4600      	mov	r0, r0
 80a10a2:	bf00      	nop
 80a10a4:	bf00      	nop
 80a10a6:	bf00      	nop
 80a10a8:	bf00      	nop
 80a10aa:	bf00      	nop
 80a10ac:	bf00      	nop
 80a10ae:	bf00      	nop
 80a10b0:	bf00      	nop
 80a10b2:	bf00      	nop
 80a10b4:	bf00      	nop
 80a10b6:	bf00      	nop
 80a10b8:	bf00      	nop
 80a10ba:	bf00      	nop
 80a10bc:	bf00      	nop
 80a10be:	bf00      	nop
 80a10c0:	bf00      	nop
 80a10c2:	bf00      	nop
 80a10c4:	bf00      	nop
 80a10c6:	bf00      	nop
 80a10c8:	bf00      	nop
          if(j==24) break;
 80a10ca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a10ce:	2b18      	cmp	r3, #24
 80a10d0:	d07a      	beq.n	80a11c8 <_ZN17Adafruit_NeoPixel4showEv+0xd84>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          if(j==24) break;
          pinSet(pin, LOW); // LOW
 80a10d2:	79e3      	ldrb	r3, [r4, #7]
 80a10d4:	6810      	ldr	r0, [r2, #0]
 80a10d6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a10da:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a10de:	88bf      	ldrh	r7, [r7, #4]
 80a10e0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a10e4:	835f      	strh	r7, [r3, #26]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
 80a10e6:	9803      	ldr	r0, [sp, #12]
 80a10e8:	9b04      	ldr	r3, [sp, #16]
 80a10ea:	4218      	tst	r0, r3
 80a10ec:	d180      	bne.n	80a0ff0 <_ZN17Adafruit_NeoPixel4showEv+0xbac>
            "mov r0, r0" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a10ee:	4600      	mov	r0, r0
 80a10f0:	bf00      	nop
 80a10f2:	bf00      	nop
 80a10f4:	bf00      	nop
 80a10f6:	bf00      	nop
 80a10f8:	bf00      	nop
 80a10fa:	bf00      	nop
 80a10fc:	bf00      	nop
 80a10fe:	bf00      	nop
 80a1100:	bf00      	nop
 80a1102:	bf00      	nop
 80a1104:	bf00      	nop
 80a1106:	bf00      	nop
 80a1108:	bf00      	nop
 80a110a:	bf00      	nop
 80a110c:	bf00      	nop
 80a110e:	bf00      	nop
#endif
          // TM1829 spec             800ns HIGH
          // This lib on Spark Core (meas. 792ns)
          // This lib on Photon     (meas. 800ns)
          pinSet(pin, HIGH); // HIGH
 80a1110:	79e3      	ldrb	r3, [r4, #7]
 80a1112:	6810      	ldr	r0, [r2, #0]
 80a1114:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1118:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a111c:	88bf      	ldrh	r7, [r7, #4]
 80a111e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1122:	831f      	strh	r7, [r3, #24]
          j++;
 80a1124:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1128:	3301      	adds	r3, #1
 80a112a:	b2db      	uxtb	r3, r3
 80a112c:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a1130:	9b04      	ldr	r3, [sp, #16]
 80a1132:	085b      	lsrs	r3, r3, #1
 80a1134:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1136:	4600      	mov	r0, r0
 80a1138:	bf00      	nop
 80a113a:	bf00      	nop
 80a113c:	bf00      	nop
 80a113e:	bf00      	nop
 80a1140:	bf00      	nop
 80a1142:	bf00      	nop
 80a1144:	bf00      	nop
 80a1146:	bf00      	nop
 80a1148:	bf00      	nop
 80a114a:	bf00      	nop
 80a114c:	bf00      	nop
 80a114e:	bf00      	nop
 80a1150:	bf00      	nop
 80a1152:	bf00      	nop
 80a1154:	bf00      	nop
 80a1156:	bf00      	nop
 80a1158:	bf00      	nop
 80a115a:	bf00      	nop
 80a115c:	bf00      	nop
 80a115e:	bf00      	nop
 80a1160:	bf00      	nop
 80a1162:	bf00      	nop
 80a1164:	bf00      	nop
 80a1166:	bf00      	nop
 80a1168:	bf00      	nop
 80a116a:	bf00      	nop
 80a116c:	bf00      	nop
 80a116e:	bf00      	nop
 80a1170:	bf00      	nop
 80a1172:	bf00      	nop
 80a1174:	bf00      	nop
 80a1176:	bf00      	nop
 80a1178:	bf00      	nop
 80a117a:	bf00      	nop
 80a117c:	bf00      	nop
 80a117e:	bf00      	nop
 80a1180:	bf00      	nop
 80a1182:	bf00      	nop
 80a1184:	bf00      	nop
 80a1186:	bf00      	nop
 80a1188:	bf00      	nop
 80a118a:	bf00      	nop
 80a118c:	bf00      	nop
 80a118e:	bf00      	nop
 80a1190:	bf00      	nop
 80a1192:	bf00      	nop
 80a1194:	bf00      	nop
 80a1196:	bf00      	nop
 80a1198:	bf00      	nop
 80a119a:	bf00      	nop
 80a119c:	bf00      	nop
 80a119e:	bf00      	nop
 80a11a0:	bf00      	nop
 80a11a2:	bf00      	nop
 80a11a4:	bf00      	nop
 80a11a6:	bf00      	nop
 80a11a8:	bf00      	nop
 80a11aa:	bf00      	nop
 80a11ac:	bf00      	nop
 80a11ae:	bf00      	nop
 80a11b0:	bf00      	nop
 80a11b2:	bf00      	nop
 80a11b4:	bf00      	nop
 80a11b6:	bf00      	nop
 80a11b8:	bf00      	nop
 80a11ba:	bf00      	nop
 80a11bc:	bf00      	nop
 80a11be:	bf00      	nop
          if(j==24) break;
 80a11c0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a11c4:	2b18      	cmp	r3, #24
 80a11c6:	d184      	bne.n	80a10d2 <_ZN17Adafruit_NeoPixel4showEv+0xc8e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a11c8:	468e      	mov	lr, r1
 80a11ca:	e6d5      	b.n	80a0f78 <_ZN17Adafruit_NeoPixel4showEv+0xb34>
 80a11cc:	4a17      	ldr	r2, [pc, #92]	; (80a122c <_ZN17Adafruit_NeoPixel4showEv+0xde8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a11ce:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a11d2:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a11d4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a11d8:	b29b      	uxth	r3, r3
 80a11da:	2b00      	cmp	r3, #0
 80a11dc:	f43f ad00 	beq.w	80a0be0 <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a11e0:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a11e2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a11e6:	f10e 0103 	add.w	r1, lr, #3
 80a11ea:	3b03      	subs	r3, #3
 80a11ec:	b29b      	uxth	r3, r3
 80a11ee:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a11f2:	f89e 3000 	ldrb.w	r3, [lr]
 80a11f6:	b2db      	uxtb	r3, r3
 80a11f8:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a11fc:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a1200:	b2db      	uxtb	r3, r3
 80a1202:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a1206:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a120a:	b2db      	uxtb	r3, r3
 80a120c:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1210:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a1214:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a1218:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a121c:	021b      	lsls	r3, r3, #8
 80a121e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a1222:	4303      	orrs	r3, r0
 80a1224:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1226:	f88d 6005 	strb.w	r6, [sp, #5]
 80a122a:	e0e0      	b.n	80a13ee <_ZN17Adafruit_NeoPixel4showEv+0xfaa>
 80a122c:	20000098 	.word	0x20000098
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1230:	4600      	mov	r0, r0
 80a1232:	bf00      	nop
 80a1234:	bf00      	nop
 80a1236:	bf00      	nop
 80a1238:	bf00      	nop
 80a123a:	bf00      	nop
 80a123c:	bf00      	nop
 80a123e:	bf00      	nop
 80a1240:	bf00      	nop
 80a1242:	bf00      	nop
 80a1244:	bf00      	nop
 80a1246:	bf00      	nop
 80a1248:	bf00      	nop
 80a124a:	bf00      	nop
 80a124c:	bf00      	nop
 80a124e:	bf00      	nop
 80a1250:	bf00      	nop
 80a1252:	bf00      	nop
 80a1254:	bf00      	nop
 80a1256:	bf00      	nop
 80a1258:	bf00      	nop
 80a125a:	bf00      	nop
 80a125c:	bf00      	nop
 80a125e:	bf00      	nop
 80a1260:	bf00      	nop
 80a1262:	bf00      	nop
 80a1264:	bf00      	nop
 80a1266:	bf00      	nop
 80a1268:	bf00      	nop
 80a126a:	bf00      	nop
 80a126c:	bf00      	nop
 80a126e:	bf00      	nop
 80a1270:	bf00      	nop
 80a1272:	bf00      	nop
 80a1274:	bf00      	nop
 80a1276:	bf00      	nop
 80a1278:	bf00      	nop
 80a127a:	bf00      	nop
 80a127c:	bf00      	nop
 80a127e:	bf00      	nop
 80a1280:	bf00      	nop
 80a1282:	bf00      	nop
 80a1284:	bf00      	nop
 80a1286:	bf00      	nop
 80a1288:	bf00      	nop
 80a128a:	bf00      	nop
 80a128c:	bf00      	nop
 80a128e:	bf00      	nop
 80a1290:	bf00      	nop
 80a1292:	bf00      	nop
 80a1294:	bf00      	nop
 80a1296:	bf00      	nop
 80a1298:	bf00      	nop
 80a129a:	bf00      	nop
 80a129c:	bf00      	nop
 80a129e:	bf00      	nop
 80a12a0:	bf00      	nop
 80a12a2:	bf00      	nop
 80a12a4:	bf00      	nop
 80a12a6:	bf00      	nop
 80a12a8:	bf00      	nop
 80a12aa:	bf00      	nop
 80a12ac:	bf00      	nop
 80a12ae:	bf00      	nop
 80a12b0:	bf00      	nop
 80a12b2:	bf00      	nop
 80a12b4:	bf00      	nop
 80a12b6:	bf00      	nop
 80a12b8:	bf00      	nop
 80a12ba:	bf00      	nop
 80a12bc:	bf00      	nop
 80a12be:	bf00      	nop
 80a12c0:	bf00      	nop
 80a12c2:	bf00      	nop
 80a12c4:	bf00      	nop
 80a12c6:	bf00      	nop
 80a12c8:	bf00      	nop
 80a12ca:	bf00      	nop
 80a12cc:	bf00      	nop
 80a12ce:	bf00      	nop
 80a12d0:	bf00      	nop
 80a12d2:	bf00      	nop
 80a12d4:	bf00      	nop
 80a12d6:	bf00      	nop
 80a12d8:	bf00      	nop
 80a12da:	bf00      	nop
 80a12dc:	bf00      	nop
 80a12de:	bf00      	nop
 80a12e0:	bf00      	nop
 80a12e2:	bf00      	nop
 80a12e4:	bf00      	nop
 80a12e6:	bf00      	nop
 80a12e8:	bf00      	nop
 80a12ea:	bf00      	nop
 80a12ec:	bf00      	nop
 80a12ee:	bf00      	nop
 80a12f0:	bf00      	nop
 80a12f2:	bf00      	nop
 80a12f4:	bf00      	nop
 80a12f6:	bf00      	nop
 80a12f8:	bf00      	nop
 80a12fa:	bf00      	nop
 80a12fc:	bf00      	nop
 80a12fe:	bf00      	nop
 80a1300:	bf00      	nop
 80a1302:	bf00      	nop
 80a1304:	bf00      	nop
 80a1306:	bf00      	nop
 80a1308:	bf00      	nop
 80a130a:	bf00      	nop
 80a130c:	bf00      	nop
 80a130e:	bf00      	nop
 80a1310:	bf00      	nop
 80a1312:	bf00      	nop
 80a1314:	bf00      	nop
 80a1316:	bf00      	nop
 80a1318:	bf00      	nop
 80a131a:	bf00      	nop
 80a131c:	bf00      	nop
 80a131e:	bf00      	nop
 80a1320:	bf00      	nop
 80a1322:	bf00      	nop
 80a1324:	bf00      	nop
 80a1326:	bf00      	nop
 80a1328:	bf00      	nop
 80a132a:	bf00      	nop
 80a132c:	bf00      	nop
 80a132e:	bf00      	nop
 80a1330:	bf00      	nop
 80a1332:	bf00      	nop
 80a1334:	bf00      	nop
 80a1336:	bf00      	nop
 80a1338:	bf00      	nop
 80a133a:	bf00      	nop
 80a133c:	bf00      	nop
 80a133e:	bf00      	nop
 80a1340:	bf00      	nop
 80a1342:	bf00      	nop
 80a1344:	bf00      	nop
 80a1346:	bf00      	nop
 80a1348:	bf00      	nop
 80a134a:	bf00      	nop
 80a134c:	bf00      	nop
 80a134e:	bf00      	nop
 80a1350:	bf00      	nop
          // TM1803 spec             680ns LOW
          // Pololu on Arduino      (meas. 1.024us)
          // This lib on Spark Core (meas. 680ns)
          // This lib on Photon     (meas. 684ns)
          pinSet(pin, LOW); // LOW
 80a1352:	79e3      	ldrb	r3, [r4, #7]
 80a1354:	6810      	ldr	r0, [r2, #0]
 80a1356:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a135a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a135e:	88bf      	ldrh	r7, [r7, #4]
 80a1360:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1364:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1366:	4600      	mov	r0, r0
 80a1368:	bf00      	nop
 80a136a:	bf00      	nop
 80a136c:	bf00      	nop
 80a136e:	bf00      	nop
 80a1370:	bf00      	nop
 80a1372:	bf00      	nop
 80a1374:	bf00      	nop
 80a1376:	bf00      	nop
 80a1378:	bf00      	nop
 80a137a:	bf00      	nop
 80a137c:	bf00      	nop
 80a137e:	bf00      	nop
 80a1380:	bf00      	nop
 80a1382:	bf00      	nop
 80a1384:	bf00      	nop
 80a1386:	bf00      	nop
 80a1388:	bf00      	nop
 80a138a:	bf00      	nop
 80a138c:	bf00      	nop
 80a138e:	bf00      	nop
 80a1390:	bf00      	nop
 80a1392:	bf00      	nop
 80a1394:	bf00      	nop
 80a1396:	bf00      	nop
 80a1398:	bf00      	nop
 80a139a:	bf00      	nop
 80a139c:	bf00      	nop
 80a139e:	bf00      	nop
 80a13a0:	bf00      	nop
 80a13a2:	bf00      	nop
 80a13a4:	bf00      	nop
 80a13a6:	bf00      	nop
 80a13a8:	bf00      	nop
 80a13aa:	bf00      	nop
 80a13ac:	bf00      	nop
 80a13ae:	bf00      	nop
 80a13b0:	bf00      	nop
 80a13b2:	bf00      	nop
 80a13b4:	bf00      	nop
 80a13b6:	bf00      	nop
 80a13b8:	bf00      	nop
 80a13ba:	bf00      	nop
 80a13bc:	bf00      	nop
 80a13be:	bf00      	nop
 80a13c0:	bf00      	nop
 80a13c2:	bf00      	nop
 80a13c4:	bf00      	nop
 80a13c6:	bf00      	nop
 80a13c8:	bf00      	nop
 80a13ca:	bf00      	nop
 80a13cc:	bf00      	nop
 80a13ce:	bf00      	nop
 80a13d0:	bf00      	nop
 80a13d2:	bf00      	nop
 80a13d4:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a13d6:	9b04      	ldr	r3, [sp, #16]
 80a13d8:	085b      	lsrs	r3, r3, #1
 80a13da:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a13dc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a13e0:	3301      	adds	r3, #1
 80a13e2:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a13e4:	2b17      	cmp	r3, #23
 80a13e6:	f88d 3005 	strb.w	r3, [sp, #5]
 80a13ea:	f200 80e3 	bhi.w	80a15b4 <_ZN17Adafruit_NeoPixel4showEv+0x1170>
        pinSet(pin, HIGH); // HIGH
 80a13ee:	79e3      	ldrb	r3, [r4, #7]
 80a13f0:	6810      	ldr	r0, [r2, #0]
 80a13f2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a13f6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a13fa:	88bf      	ldrh	r7, [r7, #4]
 80a13fc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1400:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1402:	9803      	ldr	r0, [sp, #12]
 80a1404:	9b04      	ldr	r3, [sp, #16]
 80a1406:	4218      	tst	r0, r3
 80a1408:	f47f af12 	bne.w	80a1230 <_ZN17Adafruit_NeoPixel4showEv+0xdec>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a140c:	4600      	mov	r0, r0
 80a140e:	bf00      	nop
 80a1410:	bf00      	nop
 80a1412:	bf00      	nop
 80a1414:	bf00      	nop
 80a1416:	bf00      	nop
 80a1418:	bf00      	nop
 80a141a:	bf00      	nop
 80a141c:	bf00      	nop
 80a141e:	bf00      	nop
 80a1420:	bf00      	nop
 80a1422:	bf00      	nop
 80a1424:	bf00      	nop
 80a1426:	bf00      	nop
 80a1428:	bf00      	nop
 80a142a:	bf00      	nop
 80a142c:	bf00      	nop
 80a142e:	bf00      	nop
 80a1430:	bf00      	nop
 80a1432:	bf00      	nop
 80a1434:	bf00      	nop
 80a1436:	bf00      	nop
 80a1438:	bf00      	nop
 80a143a:	bf00      	nop
 80a143c:	bf00      	nop
 80a143e:	bf00      	nop
 80a1440:	bf00      	nop
 80a1442:	bf00      	nop
 80a1444:	bf00      	nop
 80a1446:	bf00      	nop
 80a1448:	bf00      	nop
 80a144a:	bf00      	nop
 80a144c:	bf00      	nop
 80a144e:	bf00      	nop
 80a1450:	bf00      	nop
 80a1452:	bf00      	nop
 80a1454:	bf00      	nop
 80a1456:	bf00      	nop
 80a1458:	bf00      	nop
 80a145a:	bf00      	nop
 80a145c:	bf00      	nop
 80a145e:	bf00      	nop
 80a1460:	bf00      	nop
 80a1462:	bf00      	nop
 80a1464:	bf00      	nop
 80a1466:	bf00      	nop
 80a1468:	bf00      	nop
 80a146a:	bf00      	nop
 80a146c:	bf00      	nop
 80a146e:	bf00      	nop
 80a1470:	bf00      	nop
 80a1472:	bf00      	nop
 80a1474:	bf00      	nop
 80a1476:	bf00      	nop
 80a1478:	bf00      	nop
 80a147a:	bf00      	nop
 80a147c:	bf00      	nop
 80a147e:	bf00      	nop
 80a1480:	bf00      	nop
 80a1482:	bf00      	nop
 80a1484:	bf00      	nop
 80a1486:	bf00      	nop
 80a1488:	bf00      	nop
 80a148a:	bf00      	nop
 80a148c:	bf00      	nop
          // TM1803 spec             1.36us LOW
          // Pololu on Arduino      (meas. 2.00us)
          // This lib on Spark Core (meas. 1.36us)
          // This lib on Photon     (meas. 1.36us)
          pinSet(pin, LOW); // LOW
 80a148e:	79e3      	ldrb	r3, [r4, #7]
 80a1490:	6810      	ldr	r0, [r2, #0]
 80a1492:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1496:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a149a:	88bf      	ldrh	r7, [r7, #4]
 80a149c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a14a0:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a14a2:	4600      	mov	r0, r0
 80a14a4:	bf00      	nop
 80a14a6:	bf00      	nop
 80a14a8:	bf00      	nop
 80a14aa:	bf00      	nop
 80a14ac:	bf00      	nop
 80a14ae:	bf00      	nop
 80a14b0:	bf00      	nop
 80a14b2:	bf00      	nop
 80a14b4:	bf00      	nop
 80a14b6:	bf00      	nop
 80a14b8:	bf00      	nop
 80a14ba:	bf00      	nop
 80a14bc:	bf00      	nop
 80a14be:	bf00      	nop
 80a14c0:	bf00      	nop
 80a14c2:	bf00      	nop
 80a14c4:	bf00      	nop
 80a14c6:	bf00      	nop
 80a14c8:	bf00      	nop
 80a14ca:	bf00      	nop
 80a14cc:	bf00      	nop
 80a14ce:	bf00      	nop
 80a14d0:	bf00      	nop
 80a14d2:	bf00      	nop
 80a14d4:	bf00      	nop
 80a14d6:	bf00      	nop
 80a14d8:	bf00      	nop
 80a14da:	bf00      	nop
 80a14dc:	bf00      	nop
 80a14de:	bf00      	nop
 80a14e0:	bf00      	nop
 80a14e2:	bf00      	nop
 80a14e4:	bf00      	nop
 80a14e6:	bf00      	nop
 80a14e8:	bf00      	nop
 80a14ea:	bf00      	nop
 80a14ec:	bf00      	nop
 80a14ee:	bf00      	nop
 80a14f0:	bf00      	nop
 80a14f2:	bf00      	nop
 80a14f4:	bf00      	nop
 80a14f6:	bf00      	nop
 80a14f8:	bf00      	nop
 80a14fa:	bf00      	nop
 80a14fc:	bf00      	nop
 80a14fe:	bf00      	nop
 80a1500:	bf00      	nop
 80a1502:	bf00      	nop
 80a1504:	bf00      	nop
 80a1506:	bf00      	nop
 80a1508:	bf00      	nop
 80a150a:	bf00      	nop
 80a150c:	bf00      	nop
 80a150e:	bf00      	nop
 80a1510:	bf00      	nop
 80a1512:	bf00      	nop
 80a1514:	bf00      	nop
 80a1516:	bf00      	nop
 80a1518:	bf00      	nop
 80a151a:	bf00      	nop
 80a151c:	bf00      	nop
 80a151e:	bf00      	nop
 80a1520:	bf00      	nop
 80a1522:	bf00      	nop
 80a1524:	bf00      	nop
 80a1526:	bf00      	nop
 80a1528:	bf00      	nop
 80a152a:	bf00      	nop
 80a152c:	bf00      	nop
 80a152e:	bf00      	nop
 80a1530:	bf00      	nop
 80a1532:	bf00      	nop
 80a1534:	bf00      	nop
 80a1536:	bf00      	nop
 80a1538:	bf00      	nop
 80a153a:	bf00      	nop
 80a153c:	bf00      	nop
 80a153e:	bf00      	nop
 80a1540:	bf00      	nop
 80a1542:	bf00      	nop
 80a1544:	bf00      	nop
 80a1546:	bf00      	nop
 80a1548:	bf00      	nop
 80a154a:	bf00      	nop
 80a154c:	bf00      	nop
 80a154e:	bf00      	nop
 80a1550:	bf00      	nop
 80a1552:	bf00      	nop
 80a1554:	bf00      	nop
 80a1556:	bf00      	nop
 80a1558:	bf00      	nop
 80a155a:	bf00      	nop
 80a155c:	bf00      	nop
 80a155e:	bf00      	nop
 80a1560:	bf00      	nop
 80a1562:	bf00      	nop
 80a1564:	bf00      	nop
 80a1566:	bf00      	nop
 80a1568:	bf00      	nop
 80a156a:	bf00      	nop
 80a156c:	bf00      	nop
 80a156e:	bf00      	nop
 80a1570:	bf00      	nop
 80a1572:	bf00      	nop
 80a1574:	bf00      	nop
 80a1576:	bf00      	nop
 80a1578:	bf00      	nop
 80a157a:	bf00      	nop
 80a157c:	bf00      	nop
 80a157e:	bf00      	nop
 80a1580:	bf00      	nop
 80a1582:	bf00      	nop
 80a1584:	bf00      	nop
 80a1586:	bf00      	nop
 80a1588:	bf00      	nop
 80a158a:	bf00      	nop
 80a158c:	bf00      	nop
 80a158e:	bf00      	nop
 80a1590:	bf00      	nop
 80a1592:	bf00      	nop
 80a1594:	bf00      	nop
 80a1596:	bf00      	nop
 80a1598:	bf00      	nop
 80a159a:	bf00      	nop
 80a159c:	bf00      	nop
 80a159e:	bf00      	nop
 80a15a0:	bf00      	nop
 80a15a2:	bf00      	nop
 80a15a4:	bf00      	nop
 80a15a6:	bf00      	nop
 80a15a8:	bf00      	nop
 80a15aa:	bf00      	nop
 80a15ac:	bf00      	nop
 80a15ae:	bf00      	nop
 80a15b0:	bf00      	nop
 80a15b2:	e710      	b.n	80a13d6 <_ZN17Adafruit_NeoPixel4showEv+0xf92>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a15b4:	468e      	mov	lr, r1
 80a15b6:	e60d      	b.n	80a11d4 <_ZN17Adafruit_NeoPixel4showEv+0xd90>

080a15b8 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>:
  endTime = micros(); // Save EOD time for latch on next call
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
 80a15b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a15ba:	8844      	ldrh	r4, [r0, #2]
  endTime = micros(); // Save EOD time for latch on next call
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
 80a15bc:	f89d 5014 	ldrb.w	r5, [sp, #20]
  if(n < numLEDs) {
 80a15c0:	428c      	cmp	r4, r1
 80a15c2:	d927      	bls.n	80a1614 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x5c>
    if(brightness) { // See notes in setBrightness()
 80a15c4:	7a04      	ldrb	r4, [r0, #8]
 80a15c6:	b144      	cbz	r4, 80a15da <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x22>
      r = (r * brightness) >> 8;
 80a15c8:	4362      	muls	r2, r4
      g = (g * brightness) >> 8;
 80a15ca:	4363      	muls	r3, r4
      b = (b * brightness) >> 8;
 80a15cc:	436c      	muls	r4, r5
// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
  if(n < numLEDs) {
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
 80a15ce:	f3c2 2207 	ubfx	r2, r2, #8, #8
      g = (g * brightness) >> 8;
 80a15d2:	f3c3 2307 	ubfx	r3, r3, #8, #8
      b = (b * brightness) >> 8;
 80a15d6:	f3c4 2507 	ubfx	r5, r4, #8, #8
    }
    uint8_t *p = &pixels[n * 3];
    switch(type) {
 80a15da:	7987      	ldrb	r7, [r0, #6]
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    uint8_t *p = &pixels[n * 3];
 80a15dc:	68c6      	ldr	r6, [r0, #12]
 80a15de:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80a15e2:	2f08      	cmp	r7, #8
 80a15e4:	eb06 0401 	add.w	r4, r6, r1
 80a15e8:	d811      	bhi.n	80a160e <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x56>
 80a15ea:	2001      	movs	r0, #1
 80a15ec:	40b8      	lsls	r0, r7
 80a15ee:	f410 7fd2 	tst.w	r0, #420	; 0x1a4
 80a15f2:	d108      	bne.n	80a1606 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x4e>
 80a15f4:	06c0      	lsls	r0, r0, #27
 80a15f6:	d50a      	bpl.n	80a160e <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x56>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
 80a15f8:	2aff      	cmp	r2, #255	; 0xff
 80a15fa:	bf08      	it	eq
 80a15fc:	22fe      	moveq	r2, #254	; 0xfe
          *p++ = r;
 80a15fe:	5472      	strb	r2, [r6, r1]
          *p++ = b;
 80a1600:	7065      	strb	r5, [r4, #1]
          *p = g;
 80a1602:	70a3      	strb	r3, [r4, #2]
 80a1604:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a1606:	5473      	strb	r3, [r6, r1]
          *p++ = r;
 80a1608:	7062      	strb	r2, [r4, #1]
          *p = b;
 80a160a:	70a5      	strb	r5, [r4, #2]
 80a160c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p = g;
        } break;
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
 80a160e:	5472      	strb	r2, [r6, r1]
          *p++ = g;
 80a1610:	7063      	strb	r3, [r4, #1]
          *p = b;
 80a1612:	70a5      	strb	r5, [r4, #2]
 80a1614:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1616 <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a1616:	1c4a      	adds	r2, r1, #1
  if(newBrightness != brightness) { // Compare against prior value
 80a1618:	7a03      	ldrb	r3, [r0, #8]
  // This simplifies the actual scaling math later, allowing a fast
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
 80a161a:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
 80a161c:	429a      	cmp	r2, r3
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.  C'est la vie.
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
 80a161e:	b570      	push	{r4, r5, r6, lr}
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
 80a1620:	d01e      	beq.n	80a1660 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
 80a1622:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a1624:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a1628:	68c4      	ldr	r4, [r0, #12]
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a162a:	d00c      	beq.n	80a1646 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
 80a162c:	29ff      	cmp	r1, #255	; 0xff
 80a162e:	bf0f      	iteee	eq
 80a1630:	f64f 71ff 	movweq	r1, #65535	; 0xffff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a1634:	0211      	lslne	r1, r2, #8
 80a1636:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
 80a163a:	fb91 f3f3 	sdivne	r3, r1, r3
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
 80a163e:	bf0c      	ite	eq
 80a1640:	fb91 f3f3 	sdiveq	r3, r1, r3
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a1644:	b29b      	uxthne	r3, r3
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
 80a1646:	4625      	mov	r5, r4
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a1648:	1b29      	subs	r1, r5, r4
 80a164a:	8886      	ldrh	r6, [r0, #4]
 80a164c:	b289      	uxth	r1, r1
 80a164e:	428e      	cmp	r6, r1
 80a1650:	d905      	bls.n	80a165e <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x48>
      c      = *ptr;
 80a1652:	7829      	ldrb	r1, [r5, #0]
      *ptr++ = (c * scale) >> 8;
 80a1654:	4359      	muls	r1, r3
 80a1656:	1209      	asrs	r1, r1, #8
 80a1658:	f805 1b01 	strb.w	r1, [r5], #1
             oldBrightness = brightness - 1; // De-wrap old brightness value
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
    else if(b == 255) scale = 65535 / oldBrightness;
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
    for(uint16_t i=0; i<numBytes; i++) {
 80a165c:	e7f4      	b.n	80a1648 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
    }
    brightness = newBrightness;
 80a165e:	7202      	strb	r2, [r0, #8]
 80a1660:	bd70      	pop	{r4, r5, r6, pc}

080a1662 <_ZN17Adafruit_NeoPixel5clearEv>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
 80a1662:	8882      	ldrh	r2, [r0, #4]
 80a1664:	2100      	movs	r1, #0
 80a1666:	68c0      	ldr	r0, [r0, #12]
 80a1668:	f001 bb8b 	b.w	80a2d82 <memset>

080a166c <_GLOBAL__sub_I_PIN_MAP2>:
}
 80a166c:	b508      	push	{r3, lr}
 80a166e:	f000 f827 	bl	80a16c0 <HAL_Pin_Map>

#if PLATFORM_ID == 0 // Core (0)
  #define pinLO(_pin) (PIN_MAP[_pin].gpio_peripheral->BRR = PIN_MAP[_pin].gpio_pin)
  #define pinHI(_pin) (PIN_MAP[_pin].gpio_peripheral->BSRR = PIN_MAP[_pin].gpio_pin)
#elif (PLATFORM_ID == 6) || (PLATFORM_ID == 8) || (PLATFORM_ID == 10) || (PLATFORM_ID == 88) // Photon (6), P1 (8), Electron (10) or Redbear Duo (88)
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a1672:	f000 f825 	bl	80a16c0 <HAL_Pin_Map>
 80a1676:	4b01      	ldr	r3, [pc, #4]	; (80a167c <_GLOBAL__sub_I_PIN_MAP2+0x10>)
 80a1678:	6018      	str	r0, [r3, #0]
 80a167a:	bd08      	pop	{r3, pc}
 80a167c:	20000098 	.word	0x20000098

080a1680 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a1680:	b508      	push	{r3, lr}
 80a1682:	4b02      	ldr	r3, [pc, #8]	; (80a168c <os_mutex_create+0xc>)
 80a1684:	681b      	ldr	r3, [r3, #0]
 80a1686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1688:	9301      	str	r3, [sp, #4]
 80a168a:	bd08      	pop	{r3, pc}
 80a168c:	080601d0 	.word	0x080601d0

080a1690 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1690:	b508      	push	{r3, lr}
 80a1692:	4b02      	ldr	r3, [pc, #8]	; (80a169c <HAL_RNG_GetRandomNumber+0xc>)
 80a1694:	681b      	ldr	r3, [r3, #0]
 80a1696:	685b      	ldr	r3, [r3, #4]
 80a1698:	9301      	str	r3, [sp, #4]
 80a169a:	bd08      	pop	{r3, pc}
 80a169c:	0806019c 	.word	0x0806019c

080a16a0 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a16a0:	b508      	push	{r3, lr}
 80a16a2:	4b02      	ldr	r3, [pc, #8]	; (80a16ac <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a16a4:	681b      	ldr	r3, [r3, #0]
 80a16a6:	691b      	ldr	r3, [r3, #16]
 80a16a8:	9301      	str	r3, [sp, #4]
 80a16aa:	bd08      	pop	{r3, pc}
 80a16ac:	0806019c 	.word	0x0806019c

080a16b0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a16b0:	b508      	push	{r3, lr}
 80a16b2:	4b02      	ldr	r3, [pc, #8]	; (80a16bc <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a16b4:	681b      	ldr	r3, [r3, #0]
 80a16b6:	695b      	ldr	r3, [r3, #20]
 80a16b8:	9301      	str	r3, [sp, #4]
 80a16ba:	bd08      	pop	{r3, pc}
 80a16bc:	0806019c 	.word	0x0806019c

080a16c0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a16c0:	b508      	push	{r3, lr}
 80a16c2:	4b02      	ldr	r3, [pc, #8]	; (80a16cc <HAL_Pin_Map+0xc>)
 80a16c4:	681b      	ldr	r3, [r3, #0]
 80a16c6:	681b      	ldr	r3, [r3, #0]
 80a16c8:	9301      	str	r3, [sp, #4]
 80a16ca:	bd08      	pop	{r3, pc}
 80a16cc:	080601b0 	.word	0x080601b0

080a16d0 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a16d0:	b508      	push	{r3, lr}
 80a16d2:	4b02      	ldr	r3, [pc, #8]	; (80a16dc <HAL_Pin_Mode+0xc>)
 80a16d4:	681b      	ldr	r3, [r3, #0]
 80a16d6:	689b      	ldr	r3, [r3, #8]
 80a16d8:	9301      	str	r3, [sp, #4]
 80a16da:	bd08      	pop	{r3, pc}
 80a16dc:	080601b0 	.word	0x080601b0

080a16e0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a16e0:	b508      	push	{r3, lr}
 80a16e2:	4b02      	ldr	r3, [pc, #8]	; (80a16ec <HAL_Get_Pin_Mode+0xc>)
 80a16e4:	681b      	ldr	r3, [r3, #0]
 80a16e6:	68db      	ldr	r3, [r3, #12]
 80a16e8:	9301      	str	r3, [sp, #4]
 80a16ea:	bd08      	pop	{r3, pc}
 80a16ec:	080601b0 	.word	0x080601b0

080a16f0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a16f0:	b508      	push	{r3, lr}
 80a16f2:	4b02      	ldr	r3, [pc, #8]	; (80a16fc <HAL_GPIO_Write+0xc>)
 80a16f4:	681b      	ldr	r3, [r3, #0]
 80a16f6:	691b      	ldr	r3, [r3, #16]
 80a16f8:	9301      	str	r3, [sp, #4]
 80a16fa:	bd08      	pop	{r3, pc}
 80a16fc:	080601b0 	.word	0x080601b0

080a1700 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a1700:	b508      	push	{r3, lr}
 80a1702:	4b02      	ldr	r3, [pc, #8]	; (80a170c <HAL_I2C_Write_Data+0xc>)
 80a1704:	681b      	ldr	r3, [r3, #0]
 80a1706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1708:	9301      	str	r3, [sp, #4]
 80a170a:	bd08      	pop	{r3, pc}
 80a170c:	080601ac 	.word	0x080601ac

080a1710 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a1710:	b508      	push	{r3, lr}
 80a1712:	4b02      	ldr	r3, [pc, #8]	; (80a171c <HAL_I2C_Available_Data+0xc>)
 80a1714:	681b      	ldr	r3, [r3, #0]
 80a1716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1718:	9301      	str	r3, [sp, #4]
 80a171a:	bd08      	pop	{r3, pc}
 80a171c:	080601ac 	.word	0x080601ac

080a1720 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a1720:	b508      	push	{r3, lr}
 80a1722:	4b02      	ldr	r3, [pc, #8]	; (80a172c <HAL_I2C_Read_Data+0xc>)
 80a1724:	681b      	ldr	r3, [r3, #0]
 80a1726:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1728:	9301      	str	r3, [sp, #4]
 80a172a:	bd08      	pop	{r3, pc}
 80a172c:	080601ac 	.word	0x080601ac

080a1730 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a1730:	b508      	push	{r3, lr}
 80a1732:	4b02      	ldr	r3, [pc, #8]	; (80a173c <HAL_I2C_Peek_Data+0xc>)
 80a1734:	681b      	ldr	r3, [r3, #0]
 80a1736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1738:	9301      	str	r3, [sp, #4]
 80a173a:	bd08      	pop	{r3, pc}
 80a173c:	080601ac 	.word	0x080601ac

080a1740 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a1740:	b508      	push	{r3, lr}
 80a1742:	4b02      	ldr	r3, [pc, #8]	; (80a174c <HAL_I2C_Flush_Data+0xc>)
 80a1744:	681b      	ldr	r3, [r3, #0]
 80a1746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1748:	9301      	str	r3, [sp, #4]
 80a174a:	bd08      	pop	{r3, pc}
 80a174c:	080601ac 	.word	0x080601ac

080a1750 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a1750:	b508      	push	{r3, lr}
 80a1752:	4b02      	ldr	r3, [pc, #8]	; (80a175c <HAL_I2C_Is_Enabled+0xc>)
 80a1754:	681b      	ldr	r3, [r3, #0]
 80a1756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1758:	9301      	str	r3, [sp, #4]
 80a175a:	bd08      	pop	{r3, pc}
 80a175c:	080601ac 	.word	0x080601ac

080a1760 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a1760:	b508      	push	{r3, lr}
 80a1762:	4b03      	ldr	r3, [pc, #12]	; (80a1770 <HAL_I2C_Init+0x10>)
 80a1764:	681b      	ldr	r3, [r3, #0]
 80a1766:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a176a:	9301      	str	r3, [sp, #4]
 80a176c:	bd08      	pop	{r3, pc}
 80a176e:	0000      	.short	0x0000
 80a1770:	080601ac 	.word	0x080601ac

080a1774 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a1774:	b508      	push	{r3, lr}
 80a1776:	4b02      	ldr	r3, [pc, #8]	; (80a1780 <HAL_SPI_Init+0xc>)
 80a1778:	681b      	ldr	r3, [r3, #0]
 80a177a:	69db      	ldr	r3, [r3, #28]
 80a177c:	9301      	str	r3, [sp, #4]
 80a177e:	bd08      	pop	{r3, pc}
 80a1780:	080601b4 	.word	0x080601b4

080a1784 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a1784:	b508      	push	{r3, lr}
 80a1786:	4b02      	ldr	r3, [pc, #8]	; (80a1790 <HAL_SPI_Is_Enabled+0xc>)
 80a1788:	681b      	ldr	r3, [r3, #0]
 80a178a:	6a1b      	ldr	r3, [r3, #32]
 80a178c:	9301      	str	r3, [sp, #4]
 80a178e:	bd08      	pop	{r3, pc}
 80a1790:	080601b4 	.word	0x080601b4

080a1794 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1794:	b508      	push	{r3, lr}
 80a1796:	4b02      	ldr	r3, [pc, #8]	; (80a17a0 <HAL_USART_Init+0xc>)
 80a1798:	681b      	ldr	r3, [r3, #0]
 80a179a:	699b      	ldr	r3, [r3, #24]
 80a179c:	9301      	str	r3, [sp, #4]
 80a179e:	bd08      	pop	{r3, pc}
 80a17a0:	080601c4 	.word	0x080601c4

080a17a4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a17a4:	b508      	push	{r3, lr}
 80a17a6:	4b02      	ldr	r3, [pc, #8]	; (80a17b0 <HAL_USART_Write_Data+0xc>)
 80a17a8:	681b      	ldr	r3, [r3, #0]
 80a17aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a17ac:	9301      	str	r3, [sp, #4]
 80a17ae:	bd08      	pop	{r3, pc}
 80a17b0:	080601c4 	.word	0x080601c4

080a17b4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a17b4:	b508      	push	{r3, lr}
 80a17b6:	4b02      	ldr	r3, [pc, #8]	; (80a17c0 <HAL_USART_Available_Data+0xc>)
 80a17b8:	681b      	ldr	r3, [r3, #0]
 80a17ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a17bc:	9301      	str	r3, [sp, #4]
 80a17be:	bd08      	pop	{r3, pc}
 80a17c0:	080601c4 	.word	0x080601c4

080a17c4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a17c4:	b508      	push	{r3, lr}
 80a17c6:	4b02      	ldr	r3, [pc, #8]	; (80a17d0 <HAL_USART_Read_Data+0xc>)
 80a17c8:	681b      	ldr	r3, [r3, #0]
 80a17ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a17cc:	9301      	str	r3, [sp, #4]
 80a17ce:	bd08      	pop	{r3, pc}
 80a17d0:	080601c4 	.word	0x080601c4

080a17d4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a17d4:	b508      	push	{r3, lr}
 80a17d6:	4b02      	ldr	r3, [pc, #8]	; (80a17e0 <HAL_USART_Peek_Data+0xc>)
 80a17d8:	681b      	ldr	r3, [r3, #0]
 80a17da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a17dc:	9301      	str	r3, [sp, #4]
 80a17de:	bd08      	pop	{r3, pc}
 80a17e0:	080601c4 	.word	0x080601c4

080a17e4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a17e4:	b508      	push	{r3, lr}
 80a17e6:	4b02      	ldr	r3, [pc, #8]	; (80a17f0 <HAL_USART_Flush_Data+0xc>)
 80a17e8:	681b      	ldr	r3, [r3, #0]
 80a17ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a17ec:	9301      	str	r3, [sp, #4]
 80a17ee:	bd08      	pop	{r3, pc}
 80a17f0:	080601c4 	.word	0x080601c4

080a17f4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a17f4:	b508      	push	{r3, lr}
 80a17f6:	4b02      	ldr	r3, [pc, #8]	; (80a1800 <HAL_USART_Is_Enabled+0xc>)
 80a17f8:	681b      	ldr	r3, [r3, #0]
 80a17fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a17fc:	9301      	str	r3, [sp, #4]
 80a17fe:	bd08      	pop	{r3, pc}
 80a1800:	080601c4 	.word	0x080601c4

080a1804 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a1804:	b508      	push	{r3, lr}
 80a1806:	4b02      	ldr	r3, [pc, #8]	; (80a1810 <HAL_USART_Available_Data_For_Write+0xc>)
 80a1808:	681b      	ldr	r3, [r3, #0]
 80a180a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a180c:	9301      	str	r3, [sp, #4]
 80a180e:	bd08      	pop	{r3, pc}
 80a1810:	080601c4 	.word	0x080601c4

080a1814 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1814:	b508      	push	{r3, lr}
 80a1816:	4b02      	ldr	r3, [pc, #8]	; (80a1820 <HAL_USB_USART_Init+0xc>)
 80a1818:	681b      	ldr	r3, [r3, #0]
 80a181a:	681b      	ldr	r3, [r3, #0]
 80a181c:	9301      	str	r3, [sp, #4]
 80a181e:	bd08      	pop	{r3, pc}
 80a1820:	080601d8 	.word	0x080601d8

080a1824 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1824:	b508      	push	{r3, lr}
 80a1826:	4b02      	ldr	r3, [pc, #8]	; (80a1830 <HAL_USB_USART_Available_Data+0xc>)
 80a1828:	681b      	ldr	r3, [r3, #0]
 80a182a:	691b      	ldr	r3, [r3, #16]
 80a182c:	9301      	str	r3, [sp, #4]
 80a182e:	bd08      	pop	{r3, pc}
 80a1830:	080601d8 	.word	0x080601d8

080a1834 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1834:	b508      	push	{r3, lr}
 80a1836:	4b02      	ldr	r3, [pc, #8]	; (80a1840 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1838:	681b      	ldr	r3, [r3, #0]
 80a183a:	695b      	ldr	r3, [r3, #20]
 80a183c:	9301      	str	r3, [sp, #4]
 80a183e:	bd08      	pop	{r3, pc}
 80a1840:	080601d8 	.word	0x080601d8

080a1844 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1844:	b508      	push	{r3, lr}
 80a1846:	4b02      	ldr	r3, [pc, #8]	; (80a1850 <HAL_USB_USART_Receive_Data+0xc>)
 80a1848:	681b      	ldr	r3, [r3, #0]
 80a184a:	699b      	ldr	r3, [r3, #24]
 80a184c:	9301      	str	r3, [sp, #4]
 80a184e:	bd08      	pop	{r3, pc}
 80a1850:	080601d8 	.word	0x080601d8

080a1854 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1854:	b508      	push	{r3, lr}
 80a1856:	4b02      	ldr	r3, [pc, #8]	; (80a1860 <HAL_USB_USART_Send_Data+0xc>)
 80a1858:	681b      	ldr	r3, [r3, #0]
 80a185a:	69db      	ldr	r3, [r3, #28]
 80a185c:	9301      	str	r3, [sp, #4]
 80a185e:	bd08      	pop	{r3, pc}
 80a1860:	080601d8 	.word	0x080601d8

080a1864 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1864:	b508      	push	{r3, lr}
 80a1866:	4b02      	ldr	r3, [pc, #8]	; (80a1870 <HAL_USB_USART_Flush_Data+0xc>)
 80a1868:	681b      	ldr	r3, [r3, #0]
 80a186a:	6a1b      	ldr	r3, [r3, #32]
 80a186c:	9301      	str	r3, [sp, #4]
 80a186e:	bd08      	pop	{r3, pc}
 80a1870:	080601d8 	.word	0x080601d8

080a1874 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1874:	b508      	push	{r3, lr}
 80a1876:	4b02      	ldr	r3, [pc, #8]	; (80a1880 <inet_gethostbyname+0xc>)
 80a1878:	681b      	ldr	r3, [r3, #0]
 80a187a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a187c:	9301      	str	r3, [sp, #4]
 80a187e:	bd08      	pop	{r3, pc}
 80a1880:	080601c0 	.word	0x080601c0

080a1884 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1884:	b508      	push	{r3, lr}
 80a1886:	4b02      	ldr	r3, [pc, #8]	; (80a1890 <set_system_mode+0xc>)
 80a1888:	681b      	ldr	r3, [r3, #0]
 80a188a:	685b      	ldr	r3, [r3, #4]
 80a188c:	9301      	str	r3, [sp, #4]
 80a188e:	bd08      	pop	{r3, pc}
 80a1890:	080601a4 	.word	0x080601a4

080a1894 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a1894:	b508      	push	{r3, lr}
 80a1896:	4b02      	ldr	r3, [pc, #8]	; (80a18a0 <application_thread_current+0xc>)
 80a1898:	681b      	ldr	r3, [r3, #0]
 80a189a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a189c:	9301      	str	r3, [sp, #4]
 80a189e:	bd08      	pop	{r3, pc}
 80a18a0:	080601a4 	.word	0x080601a4

080a18a4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a18a4:	b508      	push	{r3, lr}
 80a18a6:	4b02      	ldr	r3, [pc, #8]	; (80a18b0 <application_thread_invoke+0xc>)
 80a18a8:	681b      	ldr	r3, [r3, #0]
 80a18aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a18ac:	9301      	str	r3, [sp, #4]
 80a18ae:	bd08      	pop	{r3, pc}
 80a18b0:	080601a4 	.word	0x080601a4

080a18b4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a18b4:	b508      	push	{r3, lr}
 80a18b6:	4b03      	ldr	r3, [pc, #12]	; (80a18c4 <system_ctrl_set_app_request_handler+0x10>)
 80a18b8:	681b      	ldr	r3, [r3, #0]
 80a18ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a18be:	9301      	str	r3, [sp, #4]
 80a18c0:	bd08      	pop	{r3, pc}
 80a18c2:	0000      	.short	0x0000
 80a18c4:	080601a4 	.word	0x080601a4

080a18c8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a18c8:	b508      	push	{r3, lr}
 80a18ca:	4b03      	ldr	r3, [pc, #12]	; (80a18d8 <system_ctrl_set_result+0x10>)
 80a18cc:	681b      	ldr	r3, [r3, #0]
 80a18ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a18d2:	9301      	str	r3, [sp, #4]
 80a18d4:	bd08      	pop	{r3, pc}
 80a18d6:	0000      	.short	0x0000
 80a18d8:	080601a4 	.word	0x080601a4

080a18dc <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a18dc:	b508      	push	{r3, lr}
 80a18de:	4b02      	ldr	r3, [pc, #8]	; (80a18e8 <spark_cloud_flag_connected+0xc>)
 80a18e0:	681b      	ldr	r3, [r3, #0]
 80a18e2:	695b      	ldr	r3, [r3, #20]
 80a18e4:	9301      	str	r3, [sp, #4]
 80a18e6:	bd08      	pop	{r3, pc}
 80a18e8:	080601cc 	.word	0x080601cc

080a18ec <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a18ec:	b508      	push	{r3, lr}
 80a18ee:	4b02      	ldr	r3, [pc, #8]	; (80a18f8 <spark_send_event+0xc>)
 80a18f0:	681b      	ldr	r3, [r3, #0]
 80a18f2:	6a1b      	ldr	r3, [r3, #32]
 80a18f4:	9301      	str	r3, [sp, #4]
 80a18f6:	bd08      	pop	{r3, pc}
 80a18f8:	080601cc 	.word	0x080601cc

080a18fc <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 80a18fc:	b508      	push	{r3, lr}
 80a18fe:	4b02      	ldr	r3, [pc, #8]	; (80a1908 <spark_subscribe+0xc>)
 80a1900:	681b      	ldr	r3, [r3, #0]
 80a1902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1904:	9301      	str	r3, [sp, #4]
 80a1906:	bd08      	pop	{r3, pc}
 80a1908:	080601cc 	.word	0x080601cc

080a190c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a190c:	b508      	push	{r3, lr}
 80a190e:	4b02      	ldr	r3, [pc, #8]	; (80a1918 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1910:	681b      	ldr	r3, [r3, #0]
 80a1912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1914:	9301      	str	r3, [sp, #4]
 80a1916:	bd08      	pop	{r3, pc}
 80a1918:	080601cc 	.word	0x080601cc

080a191c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a191c:	b508      	push	{r3, lr}
 80a191e:	4b02      	ldr	r3, [pc, #8]	; (80a1928 <network_connect+0xc>)
 80a1920:	681b      	ldr	r3, [r3, #0]
 80a1922:	685b      	ldr	r3, [r3, #4]
 80a1924:	9301      	str	r3, [sp, #4]
 80a1926:	bd08      	pop	{r3, pc}
 80a1928:	080601c8 	.word	0x080601c8

080a192c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a192c:	b508      	push	{r3, lr}
 80a192e:	4b02      	ldr	r3, [pc, #8]	; (80a1938 <network_connecting+0xc>)
 80a1930:	681b      	ldr	r3, [r3, #0]
 80a1932:	689b      	ldr	r3, [r3, #8]
 80a1934:	9301      	str	r3, [sp, #4]
 80a1936:	bd08      	pop	{r3, pc}
 80a1938:	080601c8 	.word	0x080601c8

080a193c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a193c:	b508      	push	{r3, lr}
 80a193e:	4b02      	ldr	r3, [pc, #8]	; (80a1948 <network_disconnect+0xc>)
 80a1940:	681b      	ldr	r3, [r3, #0]
 80a1942:	68db      	ldr	r3, [r3, #12]
 80a1944:	9301      	str	r3, [sp, #4]
 80a1946:	bd08      	pop	{r3, pc}
 80a1948:	080601c8 	.word	0x080601c8

080a194c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a194c:	b508      	push	{r3, lr}
 80a194e:	4b02      	ldr	r3, [pc, #8]	; (80a1958 <network_ready+0xc>)
 80a1950:	681b      	ldr	r3, [r3, #0]
 80a1952:	691b      	ldr	r3, [r3, #16]
 80a1954:	9301      	str	r3, [sp, #4]
 80a1956:	bd08      	pop	{r3, pc}
 80a1958:	080601c8 	.word	0x080601c8

080a195c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a195c:	b508      	push	{r3, lr}
 80a195e:	4b02      	ldr	r3, [pc, #8]	; (80a1968 <network_on+0xc>)
 80a1960:	681b      	ldr	r3, [r3, #0]
 80a1962:	695b      	ldr	r3, [r3, #20]
 80a1964:	9301      	str	r3, [sp, #4]
 80a1966:	bd08      	pop	{r3, pc}
 80a1968:	080601c8 	.word	0x080601c8

080a196c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a196c:	b508      	push	{r3, lr}
 80a196e:	4b02      	ldr	r3, [pc, #8]	; (80a1978 <network_off+0xc>)
 80a1970:	681b      	ldr	r3, [r3, #0]
 80a1972:	699b      	ldr	r3, [r3, #24]
 80a1974:	9301      	str	r3, [sp, #4]
 80a1976:	bd08      	pop	{r3, pc}
 80a1978:	080601c8 	.word	0x080601c8

080a197c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a197c:	b508      	push	{r3, lr}
 80a197e:	4b02      	ldr	r3, [pc, #8]	; (80a1988 <network_listen+0xc>)
 80a1980:	681b      	ldr	r3, [r3, #0]
 80a1982:	69db      	ldr	r3, [r3, #28]
 80a1984:	9301      	str	r3, [sp, #4]
 80a1986:	bd08      	pop	{r3, pc}
 80a1988:	080601c8 	.word	0x080601c8

080a198c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a198c:	b508      	push	{r3, lr}
 80a198e:	4b02      	ldr	r3, [pc, #8]	; (80a1998 <network_listening+0xc>)
 80a1990:	681b      	ldr	r3, [r3, #0]
 80a1992:	6a1b      	ldr	r3, [r3, #32]
 80a1994:	9301      	str	r3, [sp, #4]
 80a1996:	bd08      	pop	{r3, pc}
 80a1998:	080601c8 	.word	0x080601c8

080a199c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a199c:	b508      	push	{r3, lr}
 80a199e:	4b02      	ldr	r3, [pc, #8]	; (80a19a8 <network_set_listen_timeout+0xc>)
 80a19a0:	681b      	ldr	r3, [r3, #0]
 80a19a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a19a4:	9301      	str	r3, [sp, #4]
 80a19a6:	bd08      	pop	{r3, pc}
 80a19a8:	080601c8 	.word	0x080601c8

080a19ac <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a19ac:	b508      	push	{r3, lr}
 80a19ae:	4b02      	ldr	r3, [pc, #8]	; (80a19b8 <network_get_listen_timeout+0xc>)
 80a19b0:	681b      	ldr	r3, [r3, #0]
 80a19b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a19b4:	9301      	str	r3, [sp, #4]
 80a19b6:	bd08      	pop	{r3, pc}
 80a19b8:	080601c8 	.word	0x080601c8

080a19bc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a19bc:	b508      	push	{r3, lr}
 80a19be:	4b02      	ldr	r3, [pc, #8]	; (80a19c8 <malloc+0xc>)
 80a19c0:	681b      	ldr	r3, [r3, #0]
 80a19c2:	681b      	ldr	r3, [r3, #0]
 80a19c4:	9301      	str	r3, [sp, #4]
 80a19c6:	bd08      	pop	{r3, pc}
 80a19c8:	080601a0 	.word	0x080601a0

080a19cc <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a19cc:	b508      	push	{r3, lr}
 80a19ce:	4b02      	ldr	r3, [pc, #8]	; (80a19d8 <free+0xc>)
 80a19d0:	681b      	ldr	r3, [r3, #0]
 80a19d2:	685b      	ldr	r3, [r3, #4]
 80a19d4:	9301      	str	r3, [sp, #4]
 80a19d6:	bd08      	pop	{r3, pc}
 80a19d8:	080601a0 	.word	0x080601a0

080a19dc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a19dc:	b508      	push	{r3, lr}
 80a19de:	4b02      	ldr	r3, [pc, #8]	; (80a19e8 <realloc+0xc>)
 80a19e0:	681b      	ldr	r3, [r3, #0]
 80a19e2:	689b      	ldr	r3, [r3, #8]
 80a19e4:	9301      	str	r3, [sp, #4]
 80a19e6:	bd08      	pop	{r3, pc}
 80a19e8:	080601a0 	.word	0x080601a0

080a19ec <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a19ec:	b508      	push	{r3, lr}
 80a19ee:	4b02      	ldr	r3, [pc, #8]	; (80a19f8 <abort+0xc>)
 80a19f0:	681b      	ldr	r3, [r3, #0]
 80a19f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a19f4:	9301      	str	r3, [sp, #4]
 80a19f6:	bd08      	pop	{r3, pc}
 80a19f8:	080601a0 	.word	0x080601a0

080a19fc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a19fc:	b508      	push	{r3, lr}
 80a19fe:	4b02      	ldr	r3, [pc, #8]	; (80a1a08 <_malloc_r+0xc>)
 80a1a00:	681b      	ldr	r3, [r3, #0]
 80a1a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1a04:	9301      	str	r3, [sp, #4]
 80a1a06:	bd08      	pop	{r3, pc}
 80a1a08:	080601a0 	.word	0x080601a0

080a1a0c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a1a0c:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1a0e:	6883      	ldr	r3, [r0, #8]
 80a1a10:	4604      	mov	r4, r0
 80a1a12:	b90b      	cbnz	r3, 80a1a18 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a1a14:	f001 f851 	bl	80a2aba <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1a18:	68c3      	ldr	r3, [r0, #12]
 80a1a1a:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a1a1c:	68a3      	ldr	r3, [r4, #8]
 80a1a1e:	b11b      	cbz	r3, 80a1a28 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1a20:	2203      	movs	r2, #3
 80a1a22:	4621      	mov	r1, r4
 80a1a24:	4620      	mov	r0, r4
 80a1a26:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a1a28:	4620      	mov	r0, r4
}
 80a1a2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a1a2e:	2110      	movs	r1, #16
 80a1a30:	f001 b841 	b.w	80a2ab6 <_ZdlPvj>

080a1a34 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1a34:	4770      	bx	lr

080a1a36 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a1a36:	2000      	movs	r0, #0
 80a1a38:	4770      	bx	lr

080a1a3a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1a3a:	b510      	push	{r4, lr}
 80a1a3c:	4604      	mov	r4, r0
 80a1a3e:	2110      	movs	r1, #16
 80a1a40:	f001 f839 	bl	80a2ab6 <_ZdlPvj>
 80a1a44:	4620      	mov	r0, r4
 80a1a46:	bd10      	pop	{r4, pc}

080a1a48 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a1a48:	b508      	push	{r3, lr}
      { delete this; }
 80a1a4a:	b108      	cbz	r0, 80a1a50 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a1a4c:	f7ff fff5 	bl	80a1a3a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a1a50:	bd08      	pop	{r3, pc}

080a1a52 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a1a52:	2200      	movs	r2, #0
 80a1a54:	6002      	str	r2, [r0, #0]
 80a1a56:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80a1a5a:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a1a5c:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1a5e:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80a1a62:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1a64:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1a66:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a1a68:	680c      	ldr	r4, [r1, #0]
 80a1a6a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1a6c:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a1a6e:	bd10      	pop	{r4, pc}

080a1a70 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a1a70:	b510      	push	{r4, lr}
 80a1a72:	4604      	mov	r4, r0
    free((void*)msg_);
 80a1a74:	6800      	ldr	r0, [r0, #0]
 80a1a76:	f7ff ffa9 	bl	80a19cc <free>
}
 80a1a7a:	4620      	mov	r0, r4
 80a1a7c:	bd10      	pop	{r4, pc}

080a1a7e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a1a7e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a1a80:	68c4      	ldr	r4, [r0, #12]
 80a1a82:	b1f4      	cbz	r4, 80a1ac2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a1a84:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a1a86:	2b02      	cmp	r3, #2
 80a1a88:	d103      	bne.n	80a1a92 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a1a8a:	f104 000c 	add.w	r0, r4, #12
 80a1a8e:	f7ff ffef 	bl	80a1a70 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a1a92:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a1a94:	b135      	cbz	r5, 80a1aa4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1a96:	4628      	mov	r0, r5
 80a1a98:	f7fe fbc8 	bl	80a022c <_ZNSt14_Function_baseD1Ev>
 80a1a9c:	2110      	movs	r1, #16
 80a1a9e:	4628      	mov	r0, r5
 80a1aa0:	f001 f809 	bl	80a2ab6 <_ZdlPvj>
 80a1aa4:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a1aa6:	b135      	cbz	r5, 80a1ab6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a1aa8:	4628      	mov	r0, r5
 80a1aaa:	f7fe fbbf 	bl	80a022c <_ZNSt14_Function_baseD1Ev>
 80a1aae:	2110      	movs	r1, #16
 80a1ab0:	4628      	mov	r0, r5
 80a1ab2:	f001 f800 	bl	80a2ab6 <_ZdlPvj>
 80a1ab6:	4620      	mov	r0, r4
 80a1ab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a1abc:	2114      	movs	r1, #20
 80a1abe:	f000 bffa 	b.w	80a2ab6 <_ZdlPvj>
 80a1ac2:	bd38      	pop	{r3, r4, r5, pc}

080a1ac4 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_>:
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
}

void CloudClass::call_wiring_event_handler(const void* handler_data, const char *event_name, const char *data)
{
 80a1ac4:	b507      	push	{r0, r1, r2, lr}
 80a1ac6:	e88d 0006 	stmia.w	sp, {r1, r2}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1aca:	6882      	ldr	r2, [r0, #8]
 80a1acc:	b90a      	cbnz	r2, 80a1ad2 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_+0xe>
	__throw_bad_function_call();
 80a1ace:	f000 fff4 	bl	80a2aba <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1ad2:	68c3      	ldr	r3, [r0, #12]
 80a1ad4:	aa01      	add	r2, sp, #4
 80a1ad6:	4669      	mov	r1, sp
 80a1ad8:	4798      	blx	r3
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}
 80a1ada:	b003      	add	sp, #12
 80a1adc:	f85d fb04 	ldr.w	pc, [sp], #4

080a1ae0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a1ae0:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a1ae2:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a1ae4:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a1ae6:	b17c      	cbz	r4, 80a1b08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a1ae8:	6863      	ldr	r3, [r4, #4]
 80a1aea:	3b01      	subs	r3, #1
 80a1aec:	6063      	str	r3, [r4, #4]
 80a1aee:	b95b      	cbnz	r3, 80a1b08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a1af0:	6823      	ldr	r3, [r4, #0]
 80a1af2:	4620      	mov	r0, r4
 80a1af4:	689b      	ldr	r3, [r3, #8]
 80a1af6:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a1af8:	68a3      	ldr	r3, [r4, #8]
 80a1afa:	3b01      	subs	r3, #1
 80a1afc:	60a3      	str	r3, [r4, #8]
 80a1afe:	b91b      	cbnz	r3, 80a1b08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a1b00:	6823      	ldr	r3, [r4, #0]
 80a1b02:	4620      	mov	r0, r4
 80a1b04:	68db      	ldr	r3, [r3, #12]
 80a1b06:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a1b08:	4628      	mov	r0, r5
 80a1b0a:	bd38      	pop	{r3, r4, r5, pc}

080a1b0c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a1b0c:	b513      	push	{r0, r1, r4, lr}
 80a1b0e:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a1b10:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a1b14:	2300      	movs	r3, #0
 80a1b16:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a1b18:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a1b1a:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a1b1c:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1b1e:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a1b20:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a1b22:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1b24:	f7ff ffdc 	bl	80a1ae0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1b28:	4620      	mov	r0, r4
 80a1b2a:	b002      	add	sp, #8
 80a1b2c:	bd10      	pop	{r4, pc}

080a1b2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a1b2e:	680b      	ldr	r3, [r1, #0]
 80a1b30:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a1b32:	b113      	cbz	r3, 80a1b3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a1b34:	685a      	ldr	r2, [r3, #4]
 80a1b36:	3201      	adds	r2, #1
 80a1b38:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a1b3a:	4770      	bx	lr

080a1b3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a1b3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1b3e:	460c      	mov	r4, r1
 80a1b40:	4606      	mov	r6, r0
 80a1b42:	460f      	mov	r7, r1
 80a1b44:	f854 3b04 	ldr.w	r3, [r4], #4
 80a1b48:	ad02      	add	r5, sp, #8
 80a1b4a:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a1b4e:	4621      	mov	r1, r4
 80a1b50:	a801      	add	r0, sp, #4
 80a1b52:	f7ff ffec 	bl	80a1b2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a1b56:	4629      	mov	r1, r5
 80a1b58:	4630      	mov	r0, r6
 80a1b5a:	f7ff ffd7 	bl	80a1b0c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1b5e:	a801      	add	r0, sp, #4
 80a1b60:	f7ff ffbe 	bl	80a1ae0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1b64:	4620      	mov	r0, r4
 80a1b66:	f7ff ffbb 	bl	80a1ae0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a1b6a:	4638      	mov	r0, r7
 80a1b6c:	2108      	movs	r1, #8
 80a1b6e:	f000 ffa2 	bl	80a2ab6 <_ZdlPvj>
        return p;
    }
 80a1b72:	4630      	mov	r0, r6
 80a1b74:	b003      	add	sp, #12
 80a1b76:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1b78 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a1b78:	b513      	push	{r0, r1, r4, lr}
 80a1b7a:	460b      	mov	r3, r1
 80a1b7c:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1b7e:	c803      	ldmia	r0, {r0, r1}
 80a1b80:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a1b84:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a1b88:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a1b8c:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a1b90:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a1b94:	b002      	add	sp, #8
 80a1b96:	bd10      	pop	{r4, pc}

080a1b98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1b98:	b538      	push	{r3, r4, r5, lr}
 80a1b9a:	2300      	movs	r3, #0
 80a1b9c:	4604      	mov	r4, r0
 80a1b9e:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1ba0:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1ba2:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1ba4:	f7fe fa79 	bl	80a009a <_Znwj>
 80a1ba8:	b128      	cbz	r0, 80a1bb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a1baa:	2301      	movs	r3, #1
 80a1bac:	6043      	str	r3, [r0, #4]
 80a1bae:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a1bb0:	4b02      	ldr	r3, [pc, #8]	; (80a1bbc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a1bb2:	60c5      	str	r5, [r0, #12]
 80a1bb4:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1bb6:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80a1bb8:	4620      	mov	r0, r4
 80a1bba:	bd38      	pop	{r3, r4, r5, pc}
 80a1bbc:	080a2ebc 	.word	0x080a2ebc

080a1bc0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1bc0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a1bc2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1bc4:	b90a      	cbnz	r2, 80a1bca <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a1bc6:	f000 ff78 	bl	80a2aba <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1bca:	68c3      	ldr	r3, [r0, #12]
    }
 80a1bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1bd0:	4718      	bx	r3

080a1bd2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a1bd2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1bd4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a1bd6:	f100 0110 	add.w	r1, r0, #16
 80a1bda:	f7ff fff1 	bl	80a1bc0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a1bde:	bd08      	pop	{r3, pc}

080a1be0 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1be0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a1be2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1be4:	b90a      	cbnz	r2, 80a1bea <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a1be6:	f000 ff68 	bl	80a2aba <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1bea:	68c3      	ldr	r3, [r0, #12]
    }
 80a1bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1bf0:	4718      	bx	r3

080a1bf2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a1bf2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1bf4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a1bf6:	f100 0110 	add.w	r1, r0, #16
 80a1bfa:	f7ff fff1 	bl	80a1be0 <_ZNKSt8functionIFvRKbEEclES1_>
 80a1bfe:	bd08      	pop	{r3, pc}

080a1c00 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1c00:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1c02:	2300      	movs	r3, #0
 80a1c04:	6083      	str	r3, [r0, #8]
 80a1c06:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1c08:	4604      	mov	r4, r0
 80a1c0a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1c0c:	b12b      	cbz	r3, 80a1c1a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1c0e:	2202      	movs	r2, #2
 80a1c10:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1c12:	68eb      	ldr	r3, [r5, #12]
 80a1c14:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1c16:	68ab      	ldr	r3, [r5, #8]
 80a1c18:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1c1a:	4620      	mov	r0, r4
 80a1c1c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1c20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a1c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1c22:	b089      	sub	sp, #36	; 0x24
 80a1c24:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a1c26:	4668      	mov	r0, sp
 80a1c28:	f7ff ff13 	bl	80a1a52 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a1c2c:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a1c30:	2300      	movs	r3, #0
 80a1c32:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1c36:	e8d4 3f4f 	ldrexb	r3, [r4]
 80a1c3a:	2b00      	cmp	r3, #0
 80a1c3c:	d103      	bne.n	80a1c46 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80a1c3e:	e8c4 2f41 	strexb	r1, r2, [r4]
 80a1c42:	2900      	cmp	r1, #0
 80a1c44:	d1f7      	bne.n	80a1c36 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80a1c46:	d002      	beq.n	80a1c4e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80a1c48:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1c4c:	e063      	b.n	80a1d16 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a1c4e:	f114 050c 	adds.w	r5, r4, #12
 80a1c52:	d003      	beq.n	80a1c5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80a1c54:	4669      	mov	r1, sp
 80a1c56:	4628      	mov	r0, r5
 80a1c58:	f7ff fefb 	bl	80a1a52 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a1c5c:	f3bf 8f5f 	dmb	sy
 80a1c60:	2301      	movs	r3, #1
 80a1c62:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a1c64:	f3bf 8f5f 	dmb	sy
 80a1c68:	f104 0308 	add.w	r3, r4, #8
 80a1c6c:	2000      	movs	r0, #0
 80a1c6e:	e853 6f00 	ldrex	r6, [r3]
 80a1c72:	e843 0200 	strex	r2, r0, [r3]
 80a1c76:	2a00      	cmp	r2, #0
 80a1c78:	d1f9      	bne.n	80a1c6e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80a1c7a:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a1c7e:	2e00      	cmp	r6, #0
 80a1c80:	d049      	beq.n	80a1d16 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a1c82:	f7ff fe07 	bl	80a1894 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a1c86:	b120      	cbz	r0, 80a1c92 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1c88:	4629      	mov	r1, r5
 80a1c8a:	4630      	mov	r0, r6
 80a1c8c:	f7ff ff98 	bl	80a1bc0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a1c90:	e03a      	b.n	80a1d08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1c92:	4631      	mov	r1, r6
 80a1c94:	a802      	add	r0, sp, #8
 80a1c96:	f7ff ffb3 	bl	80a1c00 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a1c9a:	68e0      	ldr	r0, [r4, #12]
 80a1c9c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a1ca0:	b108      	cbz	r0, 80a1ca6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80a1ca2:	f001 f8a9 	bl	80a2df8 <strdup>
 80a1ca6:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a1ca8:	2010      	movs	r0, #16
 80a1caa:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a1cae:	f7fe f9f4 	bl	80a009a <_Znwj>
 80a1cb2:	4605      	mov	r5, r0
 80a1cb4:	b1e8      	cbz	r0, 80a1cf2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1cb6:	2700      	movs	r7, #0
 80a1cb8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1cba:	2018      	movs	r0, #24
 80a1cbc:	f7fe f9ed 	bl	80a009a <_Znwj>
 80a1cc0:	4604      	mov	r4, r0
 80a1cc2:	b188      	cbz	r0, 80a1ce8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a1cc4:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1cc6:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a1cc8:	a802      	add	r0, sp, #8
 80a1cca:	f7ff ff55 	bl	80a1b78 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1cce:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1cd0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1cd2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1cd4:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a1cd6:	9204      	str	r2, [sp, #16]
 80a1cd8:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1cda:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a1cdc:	60e3      	str	r3, [r4, #12]
 80a1cde:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1ce2:	9205      	str	r2, [sp, #20]
 80a1ce4:	f7ff feb5 	bl	80a1a52 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1ce8:	4b0d      	ldr	r3, [pc, #52]	; (80a1d20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1cea:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1cec:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1cee:	4b0d      	ldr	r3, [pc, #52]	; (80a1d24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80a1cf0:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80a1cf2:	a806      	add	r0, sp, #24
 80a1cf4:	f7ff febc 	bl	80a1a70 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1cf8:	a802      	add	r0, sp, #8
 80a1cfa:	f7fe fa97 	bl	80a022c <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1cfe:	2200      	movs	r2, #0
 80a1d00:	4629      	mov	r1, r5
 80a1d02:	4809      	ldr	r0, [pc, #36]	; (80a1d28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80a1d04:	f7ff fdce 	bl	80a18a4 <application_thread_invoke>
 80a1d08:	4630      	mov	r0, r6
 80a1d0a:	f7fe fa8f 	bl	80a022c <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a1d0e:	2110      	movs	r1, #16
 80a1d10:	4630      	mov	r0, r6
 80a1d12:	f000 fed0 	bl	80a2ab6 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a1d16:	4668      	mov	r0, sp
 80a1d18:	f7ff feaa 	bl	80a1a70 <_ZN8particle5ErrorD1Ev>
    }
 80a1d1c:	b009      	add	sp, #36	; 0x24
 80a1d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1d20:	080a1bd3 	.word	0x080a1bd3
 80a1d24:	080a1e49 	.word	0x080a1e49
 80a1d28:	080a1a0d 	.word	0x080a1a0d

080a1d2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a1d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1d30:	b08b      	sub	sp, #44	; 0x2c
 80a1d32:	4606      	mov	r6, r0
 80a1d34:	460f      	mov	r7, r1
 80a1d36:	4690      	mov	r8, r2
 80a1d38:	4699      	mov	r9, r3
 80a1d3a:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a1d3e:	f7ff fdcd 	bl	80a18dc <spark_cloud_flag_connected>
 80a1d42:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 80a1d44:	4683      	mov	fp, r0
 80a1d46:	bb30      	cbnz	r0, 80a1d96 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a1d48:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a1d4c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a1d4e:	a905      	add	r1, sp, #20
 80a1d50:	4628      	mov	r0, r5
 80a1d52:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a1d56:	f7ff fe7c 	bl	80a1a52 <_ZN8particle5ErrorC1EOS0_>
 80a1d5a:	2014      	movs	r0, #20
 80a1d5c:	f7fe f99d 	bl	80a009a <_Znwj>
 80a1d60:	4604      	mov	r4, r0
 80a1d62:	b158      	cbz	r0, 80a1d7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a1d64:	2302      	movs	r3, #2
 80a1d66:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a1d68:	2301      	movs	r3, #1
 80a1d6a:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a1d6c:	f8c0 b004 	str.w	fp, [r0, #4]
 80a1d70:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80a1d74:	4629      	mov	r1, r5
 80a1d76:	300c      	adds	r0, #12
 80a1d78:	f7ff fe6b 	bl	80a1a52 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a1d7c:	4630      	mov	r0, r6
 80a1d7e:	4621      	mov	r1, r4
 80a1d80:	f840 4b04 	str.w	r4, [r0], #4
 80a1d84:	f7ff ff08 	bl	80a1b98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a1d88:	4628      	mov	r0, r5
 80a1d8a:	f7ff fe71 	bl	80a1a70 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a1d8e:	a805      	add	r0, sp, #20
 80a1d90:	f7ff fe6e 	bl	80a1a70 <_ZN8particle5ErrorD1Ev>
 80a1d94:	e052      	b.n	80a1e3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a1d96:	2400      	movs	r4, #0
 80a1d98:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a1d9a:	2014      	movs	r0, #20
 80a1d9c:	606c      	str	r4, [r5, #4]
 80a1d9e:	60ac      	str	r4, [r5, #8]
 80a1da0:	9307      	str	r3, [sp, #28]
 80a1da2:	f7fe f97a 	bl	80a009a <_Znwj>
 80a1da6:	4601      	mov	r1, r0
 80a1da8:	b118      	cbz	r0, 80a1db2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80a1daa:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a1dac:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a1dae:	6044      	str	r4, [r0, #4]
 80a1db0:	6084      	str	r4, [r0, #8]
 80a1db2:	a804      	add	r0, sp, #16
 80a1db4:	9103      	str	r1, [sp, #12]
 80a1db6:	f7ff feef 	bl	80a1b98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a1dba:	4b22      	ldr	r3, [pc, #136]	; (80a1e44 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a1dbc:	2008      	movs	r0, #8
 80a1dbe:	9308      	str	r3, [sp, #32]
 80a1dc0:	f7fe f96b 	bl	80a009a <_Znwj>
 80a1dc4:	4604      	mov	r4, r0
 80a1dc6:	b128      	cbz	r0, 80a1dd4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1dc8:	9b03      	ldr	r3, [sp, #12]
 80a1dca:	a904      	add	r1, sp, #16
 80a1dcc:	f840 3b04 	str.w	r3, [r0], #4
 80a1dd0:	f7ff fead 	bl	80a1b2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1dd4:	9500      	str	r5, [sp, #0]
 80a1dd6:	fa5f f38a 	uxtb.w	r3, sl
 80a1dda:	464a      	mov	r2, r9
 80a1ddc:	4641      	mov	r1, r8
 80a1dde:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a1de0:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1de2:	f7ff fd83 	bl	80a18ec <spark_send_event>
 80a1de6:	b920      	cbnz	r0, 80a1df2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a1de8:	9b03      	ldr	r3, [sp, #12]
 80a1dea:	785b      	ldrb	r3, [r3, #1]
 80a1dec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a1df0:	b183      	cbz	r3, 80a1e14 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80a1df2:	9b03      	ldr	r3, [sp, #12]
 80a1df4:	a904      	add	r1, sp, #16
 80a1df6:	a806      	add	r0, sp, #24
 80a1df8:	9305      	str	r3, [sp, #20]
 80a1dfa:	f7ff fe98 	bl	80a1b2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a1dfe:	a905      	add	r1, sp, #20
 80a1e00:	4630      	mov	r0, r6
 80a1e02:	f7ff fe83 	bl	80a1b0c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1e06:	a806      	add	r0, sp, #24
 80a1e08:	f7ff fe6a 	bl	80a1ae0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1e0c:	a804      	add	r0, sp, #16
 80a1e0e:	f7ff fe67 	bl	80a1ae0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1e12:	e013      	b.n	80a1e3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80a1e14:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a1e18:	a905      	add	r1, sp, #20
 80a1e1a:	a803      	add	r0, sp, #12
 80a1e1c:	9205      	str	r2, [sp, #20]
 80a1e1e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a1e22:	f7ff fefd 	bl	80a1c20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a1e26:	a805      	add	r0, sp, #20
 80a1e28:	f7ff fe22 	bl	80a1a70 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a1e2c:	a805      	add	r0, sp, #20
 80a1e2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a1e30:	f7ff fe84 	bl	80a1b3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a1e34:	a806      	add	r0, sp, #24
 80a1e36:	f7ff fe53 	bl	80a1ae0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1e3a:	e7da      	b.n	80a1df2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a1e3c:	4630      	mov	r0, r6
 80a1e3e:	b00b      	add	sp, #44	; 0x2c
 80a1e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1e44:	080a1fb9 	.word	0x080a1fb9

080a1e48 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1e48:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1e4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1e4c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1e4e:	d006      	beq.n	80a1e5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a1e50:	2a03      	cmp	r2, #3
 80a1e52:	d017      	beq.n	80a1e84 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a1e54:	2a01      	cmp	r2, #1
 80a1e56:	d122      	bne.n	80a1e9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1e58:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1e5a:	6003      	str	r3, [r0, #0]
	      break;
 80a1e5c:	e01f      	b.n	80a1e9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1e5e:	2018      	movs	r0, #24
 80a1e60:	680e      	ldr	r6, [r1, #0]
 80a1e62:	f7fe f91a 	bl	80a009a <_Znwj>
 80a1e66:	4605      	mov	r5, r0
 80a1e68:	b150      	cbz	r0, 80a1e80 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a1e6a:	4631      	mov	r1, r6
 80a1e6c:	f7ff fec8 	bl	80a1c00 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a1e70:	6930      	ldr	r0, [r6, #16]
 80a1e72:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a1e76:	b108      	cbz	r0, 80a1e7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a1e78:	f000 ffbe 	bl	80a2df8 <strdup>
 80a1e7c:	6128      	str	r0, [r5, #16]
 80a1e7e:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1e80:	6025      	str	r5, [r4, #0]
 80a1e82:	e00c      	b.n	80a1e9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1e84:	6804      	ldr	r4, [r0, #0]
 80a1e86:	b154      	cbz	r4, 80a1e9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80a1e88:	f104 0010 	add.w	r0, r4, #16
 80a1e8c:	f7ff fdf0 	bl	80a1a70 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1e90:	4620      	mov	r0, r4
 80a1e92:	f7fe f9cb 	bl	80a022c <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1e96:	2118      	movs	r1, #24
 80a1e98:	4620      	mov	r0, r4
 80a1e9a:	f000 fe0c 	bl	80a2ab6 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1e9e:	2000      	movs	r0, #0
 80a1ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1ea2 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1ea2:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1ea4:	2300      	movs	r3, #0
 80a1ea6:	6083      	str	r3, [r0, #8]
 80a1ea8:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1eaa:	4604      	mov	r4, r0
 80a1eac:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1eae:	b12b      	cbz	r3, 80a1ebc <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1eb0:	2202      	movs	r2, #2
 80a1eb2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1eb4:	68eb      	ldr	r3, [r5, #12]
 80a1eb6:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1eb8:	68ab      	ldr	r3, [r5, #8]
 80a1eba:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1ebc:	4620      	mov	r0, r4
 80a1ebe:	bd38      	pop	{r3, r4, r5, pc}

080a1ec0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1ec0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1ec2:	b570      	push	{r4, r5, r6, lr}
 80a1ec4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1ec6:	d006      	beq.n	80a1ed6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a1ec8:	2a03      	cmp	r2, #3
 80a1eca:	d011      	beq.n	80a1ef0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a1ecc:	2a01      	cmp	r2, #1
 80a1ece:	d118      	bne.n	80a1f02 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1ed0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1ed2:	6003      	str	r3, [r0, #0]
	      break;
 80a1ed4:	e015      	b.n	80a1f02 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1ed6:	2014      	movs	r0, #20
 80a1ed8:	680e      	ldr	r6, [r1, #0]
 80a1eda:	f7fe f8de 	bl	80a009a <_Znwj>
 80a1ede:	4605      	mov	r5, r0
 80a1ee0:	b120      	cbz	r0, 80a1eec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a1ee2:	4631      	mov	r1, r6
 80a1ee4:	f7ff ffdd 	bl	80a1ea2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a1ee8:	7c33      	ldrb	r3, [r6, #16]
 80a1eea:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1eec:	6025      	str	r5, [r4, #0]
 80a1eee:	e008      	b.n	80a1f02 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1ef0:	6804      	ldr	r4, [r0, #0]
 80a1ef2:	b134      	cbz	r4, 80a1f02 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1ef4:	4620      	mov	r0, r4
 80a1ef6:	f7fe f999 	bl	80a022c <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1efa:	2114      	movs	r1, #20
 80a1efc:	4620      	mov	r0, r4
 80a1efe:	f000 fdda 	bl	80a2ab6 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1f02:	2000      	movs	r0, #0
 80a1f04:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1f08 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a1f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1f0a:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a1f0c:	f3bf 8f5f 	dmb	sy
 80a1f10:	b087      	sub	sp, #28
 80a1f12:	2300      	movs	r3, #0
 80a1f14:	e850 6f00 	ldrex	r6, [r0]
 80a1f18:	e840 3200 	strex	r2, r3, [r0]
 80a1f1c:	2a00      	cmp	r2, #0
 80a1f1e:	d1f9      	bne.n	80a1f14 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a1f20:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a1f24:	2e00      	cmp	r6, #0
 80a1f26:	d03f      	beq.n	80a1fa8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a1f28:	4618      	mov	r0, r3
 80a1f2a:	f7ff fcb3 	bl	80a1894 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a1f2e:	4607      	mov	r7, r0
 80a1f30:	b120      	cbz	r0, 80a1f3c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1f32:	4621      	mov	r1, r4
 80a1f34:	4630      	mov	r0, r6
 80a1f36:	f7ff fe53 	bl	80a1be0 <_ZNKSt8functionIFvRKbEEclES1_>
 80a1f3a:	e02e      	b.n	80a1f9a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1f3c:	4631      	mov	r1, r6
 80a1f3e:	a801      	add	r0, sp, #4
 80a1f40:	f7ff ffaf 	bl	80a1ea2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1f44:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a1f46:	2010      	movs	r0, #16
 80a1f48:	f88d 3014 	strb.w	r3, [sp, #20]
 80a1f4c:	f7fe f8a5 	bl	80a009a <_Znwj>
 80a1f50:	4605      	mov	r5, r0
 80a1f52:	b1d0      	cbz	r0, 80a1f8a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1f54:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1f56:	2014      	movs	r0, #20
 80a1f58:	f7fe f89f 	bl	80a009a <_Znwj>
 80a1f5c:	4604      	mov	r4, r0
 80a1f5e:	b178      	cbz	r0, 80a1f80 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1f60:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a1f62:	4601      	mov	r1, r0
 80a1f64:	a801      	add	r0, sp, #4
 80a1f66:	f7ff fe07 	bl	80a1b78 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1f6a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a1f6c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1f6e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1f70:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1f72:	9203      	str	r2, [sp, #12]
 80a1f74:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1f76:	60e3      	str	r3, [r4, #12]
 80a1f78:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1f7c:	9204      	str	r2, [sp, #16]
 80a1f7e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1f80:	4b0a      	ldr	r3, [pc, #40]	; (80a1fac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1f82:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1f84:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1f86:	4b0a      	ldr	r3, [pc, #40]	; (80a1fb0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a1f88:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1f8a:	a801      	add	r0, sp, #4
 80a1f8c:	f7fe f94e 	bl	80a022c <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1f90:	2200      	movs	r2, #0
 80a1f92:	4629      	mov	r1, r5
 80a1f94:	4807      	ldr	r0, [pc, #28]	; (80a1fb4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a1f96:	f7ff fc85 	bl	80a18a4 <application_thread_invoke>
 80a1f9a:	4630      	mov	r0, r6
 80a1f9c:	f7fe f946 	bl	80a022c <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a1fa0:	2110      	movs	r1, #16
 80a1fa2:	4630      	mov	r0, r6
 80a1fa4:	f000 fd87 	bl	80a2ab6 <_ZdlPvj>
        }
    }
 80a1fa8:	b007      	add	sp, #28
 80a1faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1fac:	080a1bf3 	.word	0x080a1bf3
 80a1fb0:	080a1ec1 	.word	0x080a1ec1
 80a1fb4:	080a1a0d 	.word	0x080a1a0d

080a1fb8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a1fb8:	b530      	push	{r4, r5, lr}
 80a1fba:	4604      	mov	r4, r0
 80a1fbc:	b085      	sub	sp, #20
 80a1fbe:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a1fc0:	4668      	mov	r0, sp
 80a1fc2:	4611      	mov	r1, r2
 80a1fc4:	f7ff fdba 	bl	80a1b3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a1fc8:	b17c      	cbz	r4, 80a1fea <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a1fca:	b224      	sxth	r4, r4
 80a1fcc:	4628      	mov	r0, r5
 80a1fce:	b10d      	cbz	r5, 80a1fd4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a1fd0:	f000 ff12 	bl	80a2df8 <strdup>
 80a1fd4:	9002      	str	r0, [sp, #8]
 80a1fd6:	a902      	add	r1, sp, #8
 80a1fd8:	4668      	mov	r0, sp
 80a1fda:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a1fde:	f7ff fe1f 	bl	80a1c20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a1fe2:	a802      	add	r0, sp, #8
 80a1fe4:	f7ff fd44 	bl	80a1a70 <_ZN8particle5ErrorD1Ev>
 80a1fe8:	e01d      	b.n	80a2026 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a1fea:	f04f 0201 	mov.w	r2, #1
 80a1fee:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a1ff0:	f88d 4008 	strb.w	r4, [sp, #8]
 80a1ff4:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a1ff8:	42a3      	cmp	r3, r4
 80a1ffa:	d103      	bne.n	80a2004 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a1ffc:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a2000:	2900      	cmp	r1, #0
 80a2002:	d1f7      	bne.n	80a1ff4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a2004:	d002      	beq.n	80a200c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a2006:	f88d 3008 	strb.w	r3, [sp, #8]
 80a200a:	e00c      	b.n	80a2026 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a200c:	f110 010c 	adds.w	r1, r0, #12
 80a2010:	f04f 0301 	mov.w	r3, #1
 80a2014:	bf18      	it	ne
 80a2016:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a2018:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a201c:	3004      	adds	r0, #4
 80a201e:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a2022:	f7ff ff71 	bl	80a1f08 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a2026:	a801      	add	r0, sp, #4
 80a2028:	f7ff fd5a 	bl	80a1ae0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a202c:	b005      	add	sp, #20
 80a202e:	bd30      	pop	{r4, r5, pc}

080a2030 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a2030:	4770      	bx	lr

080a2032 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a2032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2034:	4606      	mov	r6, r0
 80a2036:	4615      	mov	r5, r2
 80a2038:	460c      	mov	r4, r1
 80a203a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a203c:	42bc      	cmp	r4, r7
 80a203e:	d006      	beq.n	80a204e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a2040:	6833      	ldr	r3, [r6, #0]
 80a2042:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a2046:	689b      	ldr	r3, [r3, #8]
 80a2048:	4630      	mov	r0, r6
 80a204a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a204c:	e7f6      	b.n	80a203c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a204e:	4628      	mov	r0, r5
 80a2050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2052 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a2052:	2200      	movs	r2, #0
 80a2054:	7c00      	ldrb	r0, [r0, #16]
 80a2056:	f7ff bb53 	b.w	80a1700 <HAL_I2C_Write_Data>

080a205a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a205a:	2100      	movs	r1, #0
 80a205c:	7c00      	ldrb	r0, [r0, #16]
 80a205e:	f7ff bb57 	b.w	80a1710 <HAL_I2C_Available_Data>

080a2062 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a2062:	2100      	movs	r1, #0
 80a2064:	7c00      	ldrb	r0, [r0, #16]
 80a2066:	f7ff bb5b 	b.w	80a1720 <HAL_I2C_Read_Data>

080a206a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a206a:	2100      	movs	r1, #0
 80a206c:	7c00      	ldrb	r0, [r0, #16]
 80a206e:	f7ff bb5f 	b.w	80a1730 <HAL_I2C_Peek_Data>

080a2072 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a2072:	2100      	movs	r1, #0
 80a2074:	7c00      	ldrb	r0, [r0, #16]
 80a2076:	f7ff bb63 	b.w	80a1740 <HAL_I2C_Flush_Data>

080a207a <_ZN7TwoWireD0Ev>:
 80a207a:	b510      	push	{r4, lr}
 80a207c:	4604      	mov	r4, r0
 80a207e:	2114      	movs	r1, #20
 80a2080:	f000 fd19 	bl	80a2ab6 <_ZdlPvj>
 80a2084:	4620      	mov	r0, r4
 80a2086:	bd10      	pop	{r4, pc}

080a2088 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a2088:	b510      	push	{r4, lr}
 80a208a:	4604      	mov	r4, r0
 80a208c:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a208e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2092:	60a3      	str	r3, [r4, #8]
 80a2094:	4b04      	ldr	r3, [pc, #16]	; (80a20a8 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2096:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a2098:	7420      	strb	r0, [r4, #16]
 80a209a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a209c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a209e:	f7ff fb5f 	bl	80a1760 <HAL_I2C_Init>

}
 80a20a2:	4620      	mov	r0, r4
 80a20a4:	bd10      	pop	{r4, pc}
 80a20a6:	bf00      	nop
 80a20a8:	080a2ed8 	.word	0x080a2ed8

080a20ac <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a20ac:	2100      	movs	r1, #0
 80a20ae:	7c00      	ldrb	r0, [r0, #16]
 80a20b0:	f7ff bb4e 	b.w	80a1750 <HAL_I2C_Is_Enabled>

080a20b4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a20b4:	4770      	bx	lr

080a20b6 <_ZN9IPAddressD0Ev>:
 80a20b6:	b510      	push	{r4, lr}
 80a20b8:	4604      	mov	r4, r0
 80a20ba:	2118      	movs	r1, #24
 80a20bc:	f000 fcfb 	bl	80a2ab6 <_ZdlPvj>
 80a20c0:	4620      	mov	r0, r4
 80a20c2:	bd10      	pop	{r4, pc}

080a20c4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a20c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a20c6:	460f      	mov	r7, r1
 80a20c8:	f100 0608 	add.w	r6, r0, #8
 80a20cc:	1d05      	adds	r5, r0, #4
 80a20ce:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a20d0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a20d4:	220a      	movs	r2, #10
 80a20d6:	4638      	mov	r0, r7
 80a20d8:	f000 f911 	bl	80a22fe <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a20dc:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a20de:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a20e0:	d007      	beq.n	80a20f2 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a20e2:	2c00      	cmp	r4, #0
 80a20e4:	d0f4      	beq.n	80a20d0 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a20e6:	212e      	movs	r1, #46	; 0x2e
 80a20e8:	4638      	mov	r0, r7
 80a20ea:	f000 f8db 	bl	80a22a4 <_ZN5Print5printEc>
 80a20ee:	4404      	add	r4, r0
 80a20f0:	e7ee      	b.n	80a20d0 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a20f2:	4620      	mov	r0, r4
 80a20f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a20f8 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a20f8:	b510      	push	{r4, lr}
 80a20fa:	4604      	mov	r4, r0
 80a20fc:	4b04      	ldr	r3, [pc, #16]	; (80a2110 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a20fe:	2211      	movs	r2, #17
 80a2100:	f840 3b04 	str.w	r3, [r0], #4
 80a2104:	2100      	movs	r1, #0
 80a2106:	f000 fe3c 	bl	80a2d82 <memset>
{
    clear();
}
 80a210a:	4620      	mov	r0, r4
 80a210c:	bd10      	pop	{r4, pc}
 80a210e:	bf00      	nop
 80a2110:	080a2f00 	.word	0x080a2f00

080a2114 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a2114:	4603      	mov	r3, r0
 80a2116:	4a07      	ldr	r2, [pc, #28]	; (80a2134 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a2118:	b510      	push	{r4, lr}
 80a211a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a211e:	f101 0210 	add.w	r2, r1, #16
 80a2122:	f851 4b04 	ldr.w	r4, [r1], #4
 80a2126:	4291      	cmp	r1, r2
 80a2128:	f843 4b04 	str.w	r4, [r3], #4
 80a212c:	d1f9      	bne.n	80a2122 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a212e:	780a      	ldrb	r2, [r1, #0]
 80a2130:	701a      	strb	r2, [r3, #0]
}
 80a2132:	bd10      	pop	{r4, pc}
 80a2134:	080a2f00 	.word	0x080a2f00

080a2138 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2138:	4a02      	ldr	r2, [pc, #8]	; (80a2144 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a213a:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a213c:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a213e:	2204      	movs	r2, #4
 80a2140:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a2142:	4770      	bx	lr
 80a2144:	080a2f00 	.word	0x080a2f00

080a2148 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a2148:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a214a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a214e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a2152:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a2156:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a215a:	2304      	movs	r3, #4
 80a215c:	6041      	str	r1, [r0, #4]
 80a215e:	7503      	strb	r3, [r0, #20]
 80a2160:	bd10      	pop	{r4, pc}
	...

080a2164 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a2164:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2166:	4d04      	ldr	r5, [pc, #16]	; (80a2178 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a2168:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a216a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a216e:	9500      	str	r5, [sp, #0]
 80a2170:	f7ff ffea 	bl	80a2148 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a2174:	b003      	add	sp, #12
 80a2176:	bd30      	pop	{r4, r5, pc}
 80a2178:	080a2f00 	.word	0x080a2f00

080a217c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a217c:	4a01      	ldr	r2, [pc, #4]	; (80a2184 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a217e:	4b02      	ldr	r3, [pc, #8]	; (80a2188 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a2180:	601a      	str	r2, [r3, #0]
 80a2182:	4770      	bx	lr
 80a2184:	080a2f82 	.word	0x080a2f82
 80a2188:	2000009c 	.word	0x2000009c

080a218c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a218c:	2300      	movs	r3, #0
 80a218e:	461a      	mov	r2, r3
 80a2190:	6840      	ldr	r0, [r0, #4]
 80a2192:	f7ff bbc3 	b.w	80a191c <network_connect>

080a2196 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a2196:	2200      	movs	r2, #0
 80a2198:	2102      	movs	r1, #2
 80a219a:	6840      	ldr	r0, [r0, #4]
 80a219c:	f7ff bbce 	b.w	80a193c <network_disconnect>

080a21a0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a21a0:	2200      	movs	r2, #0
 80a21a2:	4611      	mov	r1, r2
 80a21a4:	6840      	ldr	r0, [r0, #4]
 80a21a6:	f7ff bbc1 	b.w	80a192c <network_connecting>

080a21aa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a21aa:	2200      	movs	r2, #0
 80a21ac:	4611      	mov	r1, r2
 80a21ae:	6840      	ldr	r0, [r0, #4]
 80a21b0:	f7ff bbcc 	b.w	80a194c <network_ready>

080a21b4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a21b4:	2300      	movs	r3, #0
 80a21b6:	461a      	mov	r2, r3
 80a21b8:	4619      	mov	r1, r3
 80a21ba:	6840      	ldr	r0, [r0, #4]
 80a21bc:	f7ff bbce 	b.w	80a195c <network_on>

080a21c0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a21c0:	2300      	movs	r3, #0
 80a21c2:	461a      	mov	r2, r3
 80a21c4:	4619      	mov	r1, r3
 80a21c6:	6840      	ldr	r0, [r0, #4]
 80a21c8:	f7ff bbd0 	b.w	80a196c <network_off>

080a21cc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a21cc:	2200      	movs	r2, #0
 80a21ce:	f081 0101 	eor.w	r1, r1, #1
 80a21d2:	6840      	ldr	r0, [r0, #4]
 80a21d4:	f7ff bbd2 	b.w	80a197c <network_listen>

080a21d8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a21d8:	2200      	movs	r2, #0
 80a21da:	6840      	ldr	r0, [r0, #4]
 80a21dc:	f7ff bbde 	b.w	80a199c <network_set_listen_timeout>

080a21e0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a21e0:	2200      	movs	r2, #0
 80a21e2:	4611      	mov	r1, r2
 80a21e4:	6840      	ldr	r0, [r0, #4]
 80a21e6:	f7ff bbe1 	b.w	80a19ac <network_get_listen_timeout>

080a21ea <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a21ea:	2200      	movs	r2, #0
 80a21ec:	4611      	mov	r1, r2
 80a21ee:	6840      	ldr	r0, [r0, #4]
 80a21f0:	f7ff bbcc 	b.w	80a198c <network_listening>

080a21f4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a21f4:	b570      	push	{r4, r5, r6, lr}
 80a21f6:	4616      	mov	r6, r2
 80a21f8:	b08e      	sub	sp, #56	; 0x38
 80a21fa:	4604      	mov	r4, r0
    IPAddress addr;
 80a21fc:	a808      	add	r0, sp, #32
 80a21fe:	f7ff ff7b 	bl	80a20f8 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a2202:	2211      	movs	r2, #17
 80a2204:	2100      	movs	r1, #0
 80a2206:	a803      	add	r0, sp, #12
 80a2208:	f000 fdbb 	bl	80a2d82 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a220c:	4630      	mov	r0, r6
 80a220e:	f000 fe0e 	bl	80a2e2e <strlen>
 80a2212:	2500      	movs	r5, #0
 80a2214:	4b0a      	ldr	r3, [pc, #40]	; (80a2240 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2216:	9500      	str	r5, [sp, #0]
 80a2218:	b281      	uxth	r1, r0
 80a221a:	685b      	ldr	r3, [r3, #4]
 80a221c:	aa03      	add	r2, sp, #12
 80a221e:	4630      	mov	r0, r6
 80a2220:	f7ff fb28 	bl	80a1874 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2224:	b120      	cbz	r0, 80a2230 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a2226:	4629      	mov	r1, r5
 80a2228:	4620      	mov	r0, r4
 80a222a:	f7ff ff85 	bl	80a2138 <_ZN9IPAddressC1Em>
 80a222e:	e003      	b.n	80a2238 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a2230:	a903      	add	r1, sp, #12
 80a2232:	4620      	mov	r0, r4
 80a2234:	f7ff ff6e 	bl	80a2114 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2238:	4620      	mov	r0, r4
 80a223a:	b00e      	add	sp, #56	; 0x38
 80a223c:	bd70      	pop	{r4, r5, r6, pc}
 80a223e:	bf00      	nop
 80a2240:	20000520 	.word	0x20000520

080a2244 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a2244:	4b02      	ldr	r3, [pc, #8]	; (80a2250 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a2246:	4a03      	ldr	r2, [pc, #12]	; (80a2254 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2248:	601a      	str	r2, [r3, #0]
 80a224a:	2200      	movs	r2, #0
 80a224c:	605a      	str	r2, [r3, #4]
 80a224e:	4770      	bx	lr
 80a2250:	200000a0 	.word	0x200000a0
 80a2254:	080a2ff8 	.word	0x080a2ff8

080a2258 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a2258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a225a:	4606      	mov	r6, r0
 80a225c:	460d      	mov	r5, r1
 80a225e:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a2260:	2400      	movs	r4, #0
  while (size--) {
 80a2262:	42bd      	cmp	r5, r7
 80a2264:	d00c      	beq.n	80a2280 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a2266:	6833      	ldr	r3, [r6, #0]
 80a2268:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a226c:	689b      	ldr	r3, [r3, #8]
 80a226e:	4630      	mov	r0, r6
 80a2270:	4798      	blx	r3
     if (chunk>=0)
 80a2272:	2800      	cmp	r0, #0
 80a2274:	db01      	blt.n	80a227a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a2276:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a2278:	e7f3      	b.n	80a2262 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a227a:	2c00      	cmp	r4, #0
 80a227c:	bf08      	it	eq
 80a227e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a2280:	4620      	mov	r0, r4
 80a2282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2284 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a2284:	b570      	push	{r4, r5, r6, lr}
 80a2286:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a2288:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a228a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a228c:	b149      	cbz	r1, 80a22a2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a228e:	f000 fdce 	bl	80a2e2e <strlen>
 80a2292:	682b      	ldr	r3, [r5, #0]
 80a2294:	4602      	mov	r2, r0
 80a2296:	4621      	mov	r1, r4
 80a2298:	4628      	mov	r0, r5
    }
 80a229a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a229e:	68db      	ldr	r3, [r3, #12]
 80a22a0:	4718      	bx	r3
    }
 80a22a2:	bd70      	pop	{r4, r5, r6, pc}

080a22a4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a22a4:	6803      	ldr	r3, [r0, #0]
 80a22a6:	689b      	ldr	r3, [r3, #8]
 80a22a8:	4718      	bx	r3

080a22aa <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a22aa:	2a01      	cmp	r2, #1
 80a22ac:	bf98      	it	ls
 80a22ae:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a22b0:	b530      	push	{r4, r5, lr}
 80a22b2:	460b      	mov	r3, r1
 80a22b4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a22b6:	2100      	movs	r1, #0
 80a22b8:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a22bc:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a22c0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a22c4:	fb05 3312 	mls	r3, r5, r2, r3
 80a22c8:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a22ca:	2b09      	cmp	r3, #9
 80a22cc:	bf94      	ite	ls
 80a22ce:	3330      	addls	r3, #48	; 0x30
 80a22d0:	3337      	addhi	r3, #55	; 0x37
 80a22d2:	b2db      	uxtb	r3, r3
 80a22d4:	4621      	mov	r1, r4
 80a22d6:	f804 3901 	strb.w	r3, [r4], #-1
 80a22da:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a22dc:	2d00      	cmp	r5, #0
 80a22de:	d1ef      	bne.n	80a22c0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a22e0:	f7ff ffd0 	bl	80a2284 <_ZN5Print5writeEPKc>
}
 80a22e4:	b00b      	add	sp, #44	; 0x2c
 80a22e6:	bd30      	pop	{r4, r5, pc}

080a22e8 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a22e8:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a22ea:	b922      	cbnz	r2, 80a22f6 <_ZN5Print5printEmi+0xe>
 80a22ec:	6803      	ldr	r3, [r0, #0]
 80a22ee:	b2c9      	uxtb	r1, r1
 80a22f0:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a22f2:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a22f4:	4718      	bx	r3
  else return printNumber(n, base);
 80a22f6:	b2d2      	uxtb	r2, r2
}
 80a22f8:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a22fa:	f7ff bfd6 	b.w	80a22aa <_ZN5Print11printNumberEmh>

080a22fe <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a22fe:	f7ff bff3 	b.w	80a22e8 <_ZN5Print5printEmi>

080a2302 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a2302:	b510      	push	{r4, lr}
 80a2304:	4604      	mov	r4, r0
 80a2306:	f7fd ff91 	bl	80a022c <_ZNSt14_Function_baseD1Ev>
 80a230a:	4620      	mov	r0, r4
 80a230c:	bd10      	pop	{r4, pc}
	...

080a2310 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2310:	4803      	ldr	r0, [pc, #12]	; (80a2320 <_GLOBAL__sub_I_RGB+0x10>)
 80a2312:	2300      	movs	r3, #0
 80a2314:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a2316:	4a03      	ldr	r2, [pc, #12]	; (80a2324 <_GLOBAL__sub_I_RGB+0x14>)
 80a2318:	4903      	ldr	r1, [pc, #12]	; (80a2328 <_GLOBAL__sub_I_RGB+0x18>)
 80a231a:	f000 bbc7 	b.w	80a2aac <__aeabi_atexit>
 80a231e:	bf00      	nop
 80a2320:	200000a8 	.word	0x200000a8
 80a2324:	2000006c 	.word	0x2000006c
 80a2328:	080a2303 	.word	0x080a2303

080a232c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a232c:	4770      	bx	lr

080a232e <_ZN8SPIClassD0Ev>:
 80a232e:	b510      	push	{r4, lr}
 80a2330:	4604      	mov	r4, r0
 80a2332:	2110      	movs	r1, #16
 80a2334:	f000 fbbf 	bl	80a2ab6 <_ZdlPvj>
 80a2338:	4620      	mov	r0, r4
 80a233a:	bd10      	pop	{r4, pc}

080a233c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a233c:	b570      	push	{r4, r5, r6, lr}
 80a233e:	4604      	mov	r4, r0
 80a2340:	460e      	mov	r6, r1
 80a2342:	4b07      	ldr	r3, [pc, #28]	; (80a2360 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a2344:	2500      	movs	r5, #0
 80a2346:	6003      	str	r3, [r0, #0]
 80a2348:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a234c:	f7ff f998 	bl	80a1680 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a2350:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a2352:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a2354:	f7ff fa0e 	bl	80a1774 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a2358:	60a5      	str	r5, [r4, #8]
}
 80a235a:	4620      	mov	r0, r4
 80a235c:	bd70      	pop	{r4, r5, r6, pc}
 80a235e:	bf00      	nop
 80a2360:	080a302c 	.word	0x080a302c

080a2364 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a2364:	7900      	ldrb	r0, [r0, #4]
 80a2366:	f7ff ba0d 	b.w	80a1784 <HAL_SPI_Is_Enabled>

080a236a <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a236a:	b510      	push	{r4, lr}
 80a236c:	4604      	mov	r4, r0
{
	free(buffer);
 80a236e:	6800      	ldr	r0, [r0, #0]
 80a2370:	f7ff fb2c 	bl	80a19cc <free>
}
 80a2374:	4620      	mov	r0, r4
 80a2376:	bd10      	pop	{r4, pc}

080a2378 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a2378:	b510      	push	{r4, lr}
 80a237a:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a237c:	6800      	ldr	r0, [r0, #0]
 80a237e:	b108      	cbz	r0, 80a2384 <_ZN6String10invalidateEv+0xc>
 80a2380:	f7ff fb24 	bl	80a19cc <free>
	buffer = NULL;
 80a2384:	2300      	movs	r3, #0
 80a2386:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a2388:	60a3      	str	r3, [r4, #8]
 80a238a:	6063      	str	r3, [r4, #4]
 80a238c:	bd10      	pop	{r4, pc}

080a238e <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a238e:	b538      	push	{r3, r4, r5, lr}
 80a2390:	4604      	mov	r4, r0
 80a2392:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a2394:	6800      	ldr	r0, [r0, #0]
 80a2396:	3101      	adds	r1, #1
 80a2398:	f7ff fb20 	bl	80a19dc <realloc>
	if (newbuffer) {
 80a239c:	b110      	cbz	r0, 80a23a4 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a239e:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a23a2:	2001      	movs	r0, #1
	}
	return 0;
}
 80a23a4:	bd38      	pop	{r3, r4, r5, pc}

080a23a6 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a23a6:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a23a8:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a23aa:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a23ac:	b113      	cbz	r3, 80a23b4 <_ZN6String7reserveEj+0xe>
 80a23ae:	6843      	ldr	r3, [r0, #4]
 80a23b0:	428b      	cmp	r3, r1
 80a23b2:	d207      	bcs.n	80a23c4 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a23b4:	4620      	mov	r0, r4
 80a23b6:	f7ff ffea 	bl	80a238e <_ZN6String12changeBufferEj>
 80a23ba:	b120      	cbz	r0, 80a23c6 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a23bc:	68a3      	ldr	r3, [r4, #8]
 80a23be:	b90b      	cbnz	r3, 80a23c4 <_ZN6String7reserveEj+0x1e>
 80a23c0:	6822      	ldr	r2, [r4, #0]
 80a23c2:	7013      	strb	r3, [r2, #0]
 80a23c4:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a23c6:	bd10      	pop	{r4, pc}

080a23c8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a23c8:	b570      	push	{r4, r5, r6, lr}
 80a23ca:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a23cc:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a23ce:	4604      	mov	r4, r0
 80a23d0:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a23d2:	f7ff ffe8 	bl	80a23a6 <_ZN6String7reserveEj>
 80a23d6:	b918      	cbnz	r0, 80a23e0 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a23d8:	4620      	mov	r0, r4
 80a23da:	f7ff ffcd 	bl	80a2378 <_ZN6String10invalidateEv>
		return *this;
 80a23de:	e009      	b.n	80a23f4 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a23e0:	462a      	mov	r2, r5
 80a23e2:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a23e4:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a23e6:	6820      	ldr	r0, [r4, #0]
 80a23e8:	f000 fcc0 	bl	80a2d6c <memcpy>
	buffer[len] = 0;
 80a23ec:	6822      	ldr	r2, [r4, #0]
 80a23ee:	68a3      	ldr	r3, [r4, #8]
 80a23f0:	2100      	movs	r1, #0
 80a23f2:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a23f4:	4620      	mov	r0, r4
 80a23f6:	bd70      	pop	{r4, r5, r6, pc}

080a23f8 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a23f8:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a23fa:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a23fc:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a23fe:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a2400:	6043      	str	r3, [r0, #4]
	len = 0;
 80a2402:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2404:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a2406:	460d      	mov	r5, r1
 80a2408:	b139      	cbz	r1, 80a241a <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a240a:	4608      	mov	r0, r1
 80a240c:	f000 fd0f 	bl	80a2e2e <strlen>
 80a2410:	4629      	mov	r1, r5
 80a2412:	4602      	mov	r2, r0
 80a2414:	4620      	mov	r0, r4
 80a2416:	f7ff ffd7 	bl	80a23c8 <_ZN6String4copyEPKcj>
}
 80a241a:	4620      	mov	r0, r4
 80a241c:	bd38      	pop	{r3, r4, r5, pc}

080a241e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a241e:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a2420:	b510      	push	{r4, lr}
 80a2422:	460b      	mov	r3, r1
 80a2424:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a2426:	d007      	beq.n	80a2438 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a2428:	6809      	ldr	r1, [r1, #0]
 80a242a:	b119      	cbz	r1, 80a2434 <_ZN6StringaSERKS_+0x16>
 80a242c:	689a      	ldr	r2, [r3, #8]
 80a242e:	f7ff ffcb 	bl	80a23c8 <_ZN6String4copyEPKcj>
 80a2432:	e001      	b.n	80a2438 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a2434:	f7ff ffa0 	bl	80a2378 <_ZN6String10invalidateEv>

	return *this;
}
 80a2438:	4620      	mov	r0, r4
 80a243a:	bd10      	pop	{r4, pc}

080a243c <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a243c:	b510      	push	{r4, lr}
 80a243e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a2440:	2300      	movs	r3, #0
 80a2442:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a2444:	6043      	str	r3, [r0, #4]
	len = 0;
 80a2446:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2448:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a244a:	f7ff ffe8 	bl	80a241e <_ZN6StringaSERKS_>
}
 80a244e:	4620      	mov	r0, r4
 80a2450:	bd10      	pop	{r4, pc}

080a2452 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a2452:	b538      	push	{r3, r4, r5, lr}
 80a2454:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a2456:	460c      	mov	r4, r1
 80a2458:	b141      	cbz	r1, 80a246c <_ZN6StringaSEPKc+0x1a>
 80a245a:	4608      	mov	r0, r1
 80a245c:	f000 fce7 	bl	80a2e2e <strlen>
 80a2460:	4621      	mov	r1, r4
 80a2462:	4602      	mov	r2, r0
 80a2464:	4628      	mov	r0, r5
 80a2466:	f7ff ffaf 	bl	80a23c8 <_ZN6String4copyEPKcj>
 80a246a:	e001      	b.n	80a2470 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a246c:	f7ff ff84 	bl	80a2378 <_ZN6String10invalidateEv>

	return *this;
}
 80a2470:	4628      	mov	r0, r5
 80a2472:	bd38      	pop	{r3, r4, r5, pc}

080a2474 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a2474:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a2476:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a2478:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a247a:	b912      	cbnz	r2, 80a2482 <_ZNK6String6equalsEPKc+0xe>
 80a247c:	b919      	cbnz	r1, 80a2486 <_ZNK6String6equalsEPKc+0x12>
 80a247e:	2001      	movs	r0, #1
 80a2480:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a2482:	b911      	cbnz	r1, 80a248a <_ZNK6String6equalsEPKc+0x16>
 80a2484:	6803      	ldr	r3, [r0, #0]
 80a2486:	7818      	ldrb	r0, [r3, #0]
 80a2488:	e002      	b.n	80a2490 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80a248a:	6800      	ldr	r0, [r0, #0]
 80a248c:	f000 fcaa 	bl	80a2de4 <strcmp>
 80a2490:	fab0 f080 	clz	r0, r0
 80a2494:	0940      	lsrs	r0, r0, #5
}
 80a2496:	bd08      	pop	{r3, pc}

080a2498 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a2498:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a249c:	4b03      	ldr	r3, [pc, #12]	; (80a24ac <_GLOBAL__sub_I_System+0x14>)
 80a249e:	2000      	movs	r0, #0
 80a24a0:	7018      	strb	r0, [r3, #0]
 80a24a2:	8058      	strh	r0, [r3, #2]
 80a24a4:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a24a6:	f7ff b9ed 	b.w	80a1884 <set_system_mode>
 80a24aa:	bf00      	nop
 80a24ac:	200000b8 	.word	0x200000b8

080a24b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a24b0:	4b02      	ldr	r3, [pc, #8]	; (80a24bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a24b2:	681a      	ldr	r2, [r3, #0]
 80a24b4:	4b02      	ldr	r3, [pc, #8]	; (80a24c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a24b6:	601a      	str	r2, [r3, #0]
 80a24b8:	4770      	bx	lr
 80a24ba:	bf00      	nop
 80a24bc:	20000004 	.word	0x20000004
 80a24c0:	200000c0 	.word	0x200000c0

080a24c4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a24c4:	4770      	bx	lr

080a24c6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a24c6:	7441      	strb	r1, [r0, #17]
 80a24c8:	4770      	bx	lr

080a24ca <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a24ca:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a24cc:	7c00      	ldrb	r0, [r0, #16]
 80a24ce:	f7ff f999 	bl	80a1804 <HAL_USART_Available_Data_For_Write>
}
 80a24d2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a24d6:	bd08      	pop	{r3, pc}

080a24d8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a24d8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a24da:	7c00      	ldrb	r0, [r0, #16]
 80a24dc:	f7ff f96a 	bl	80a17b4 <HAL_USART_Available_Data>
}
 80a24e0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a24e4:	bd08      	pop	{r3, pc}

080a24e6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a24e6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a24e8:	7c00      	ldrb	r0, [r0, #16]
 80a24ea:	f7ff f973 	bl	80a17d4 <HAL_USART_Peek_Data>
}
 80a24ee:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a24f2:	bf28      	it	cs
 80a24f4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a24f8:	bd08      	pop	{r3, pc}

080a24fa <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a24fa:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a24fc:	7c00      	ldrb	r0, [r0, #16]
 80a24fe:	f7ff f961 	bl	80a17c4 <HAL_USART_Read_Data>
}
 80a2502:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2506:	bf28      	it	cs
 80a2508:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a250c:	bd08      	pop	{r3, pc}

080a250e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a250e:	7c00      	ldrb	r0, [r0, #16]
 80a2510:	f7ff b968 	b.w	80a17e4 <HAL_USART_Flush_Data>

080a2514 <_ZN11USARTSerialD0Ev>:
 80a2514:	b510      	push	{r4, lr}
 80a2516:	4604      	mov	r4, r0
 80a2518:	2114      	movs	r1, #20
 80a251a:	f000 facc 	bl	80a2ab6 <_ZdlPvj>
 80a251e:	4620      	mov	r0, r4
 80a2520:	bd10      	pop	{r4, pc}

080a2522 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a2522:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2524:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a2526:	4604      	mov	r4, r0
 80a2528:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a252a:	b925      	cbnz	r5, 80a2536 <_ZN11USARTSerial5writeEh+0x14>
 80a252c:	7c00      	ldrb	r0, [r0, #16]
 80a252e:	f7ff f969 	bl	80a1804 <HAL_USART_Available_Data_For_Write>
 80a2532:	2800      	cmp	r0, #0
 80a2534:	dd05      	ble.n	80a2542 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2536:	4631      	mov	r1, r6
 80a2538:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a253a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a253e:	f7ff b931 	b.w	80a17a4 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a2542:	4628      	mov	r0, r5
 80a2544:	bd70      	pop	{r4, r5, r6, pc}
	...

080a2548 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2548:	b510      	push	{r4, lr}
 80a254a:	4604      	mov	r4, r0
 80a254c:	4608      	mov	r0, r1
 80a254e:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2550:	2200      	movs	r2, #0
 80a2552:	6062      	str	r2, [r4, #4]
 80a2554:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2558:	60a2      	str	r2, [r4, #8]
 80a255a:	4a05      	ldr	r2, [pc, #20]	; (80a2570 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a255c:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a255e:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a2560:	2201      	movs	r2, #1
 80a2562:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a2564:	461a      	mov	r2, r3
 80a2566:	f7ff f915 	bl	80a1794 <HAL_USART_Init>
}
 80a256a:	4620      	mov	r0, r4
 80a256c:	bd10      	pop	{r4, pc}
 80a256e:	bf00      	nop
 80a2570:	080a3068 	.word	0x080a3068

080a2574 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a2574:	7c00      	ldrb	r0, [r0, #16]
 80a2576:	f7ff b93d 	b.w	80a17f4 <HAL_USART_Is_Enabled>
	...

080a257c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a257c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a257e:	4d0c      	ldr	r5, [pc, #48]	; (80a25b0 <_Z22__fetch_global_Serial1v+0x34>)
 80a2580:	6829      	ldr	r1, [r5, #0]
 80a2582:	f011 0401 	ands.w	r4, r1, #1
 80a2586:	d111      	bne.n	80a25ac <_Z22__fetch_global_Serial1v+0x30>
 80a2588:	4628      	mov	r0, r5
 80a258a:	f7fd fd8a 	bl	80a00a2 <__cxa_guard_acquire>
 80a258e:	b168      	cbz	r0, 80a25ac <_Z22__fetch_global_Serial1v+0x30>
 80a2590:	4a08      	ldr	r2, [pc, #32]	; (80a25b4 <_Z22__fetch_global_Serial1v+0x38>)
 80a2592:	4621      	mov	r1, r4
 80a2594:	4b08      	ldr	r3, [pc, #32]	; (80a25b8 <_Z22__fetch_global_Serial1v+0x3c>)
 80a2596:	4809      	ldr	r0, [pc, #36]	; (80a25bc <_Z22__fetch_global_Serial1v+0x40>)
 80a2598:	f7ff ffd6 	bl	80a2548 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a259c:	4628      	mov	r0, r5
 80a259e:	f7fd fd85 	bl	80a00ac <__cxa_guard_release>
 80a25a2:	4a07      	ldr	r2, [pc, #28]	; (80a25c0 <_Z22__fetch_global_Serial1v+0x44>)
 80a25a4:	4907      	ldr	r1, [pc, #28]	; (80a25c4 <_Z22__fetch_global_Serial1v+0x48>)
 80a25a6:	4805      	ldr	r0, [pc, #20]	; (80a25bc <_Z22__fetch_global_Serial1v+0x40>)
 80a25a8:	f000 fa80 	bl	80a2aac <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a25ac:	4803      	ldr	r0, [pc, #12]	; (80a25bc <_Z22__fetch_global_Serial1v+0x40>)
 80a25ae:	bd38      	pop	{r3, r4, r5, pc}
 80a25b0:	2000015c 	.word	0x2000015c
 80a25b4:	20000160 	.word	0x20000160
 80a25b8:	200000d8 	.word	0x200000d8
 80a25bc:	200000c4 	.word	0x200000c4
 80a25c0:	2000006c 	.word	0x2000006c
 80a25c4:	080a24c5 	.word	0x080a24c5

080a25c8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a25c8:	7441      	strb	r1, [r0, #17]
 80a25ca:	4770      	bx	lr

080a25cc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a25cc:	4770      	bx	lr

080a25ce <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a25ce:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a25d0:	2100      	movs	r1, #0
 80a25d2:	7c00      	ldrb	r0, [r0, #16]
 80a25d4:	f7ff f936 	bl	80a1844 <HAL_USB_USART_Receive_Data>
}
 80a25d8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a25dc:	bf28      	it	cs
 80a25de:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a25e2:	bd08      	pop	{r3, pc}

080a25e4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a25e4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a25e6:	2101      	movs	r1, #1
 80a25e8:	7c00      	ldrb	r0, [r0, #16]
 80a25ea:	f7ff f92b 	bl	80a1844 <HAL_USB_USART_Receive_Data>
}
 80a25ee:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a25f2:	bf28      	it	cs
 80a25f4:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a25f8:	bd08      	pop	{r3, pc}

080a25fa <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a25fa:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a25fc:	7c00      	ldrb	r0, [r0, #16]
 80a25fe:	f7ff f919 	bl	80a1834 <HAL_USB_USART_Available_Data_For_Write>
}
 80a2602:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2606:	bd08      	pop	{r3, pc}

080a2608 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a2608:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a260a:	7c00      	ldrb	r0, [r0, #16]
 80a260c:	f7ff f90a 	bl	80a1824 <HAL_USB_USART_Available_Data>
}
 80a2610:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2614:	bd08      	pop	{r3, pc}

080a2616 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a2616:	7c00      	ldrb	r0, [r0, #16]
 80a2618:	f7ff b924 	b.w	80a1864 <HAL_USB_USART_Flush_Data>

080a261c <_ZN9USBSerialD0Ev>:
 80a261c:	b510      	push	{r4, lr}
 80a261e:	4604      	mov	r4, r0
 80a2620:	2114      	movs	r1, #20
 80a2622:	f000 fa48 	bl	80a2ab6 <_ZdlPvj>
 80a2626:	4620      	mov	r0, r4
 80a2628:	bd10      	pop	{r4, pc}

080a262a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a262a:	b538      	push	{r3, r4, r5, lr}
 80a262c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a262e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2630:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2632:	f7ff f8ff 	bl	80a1834 <HAL_USB_USART_Available_Data_For_Write>
 80a2636:	2800      	cmp	r0, #0
 80a2638:	dc01      	bgt.n	80a263e <_ZN9USBSerial5writeEh+0x14>
 80a263a:	7c60      	ldrb	r0, [r4, #17]
 80a263c:	b128      	cbz	r0, 80a264a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a263e:	4629      	mov	r1, r5
 80a2640:	7c20      	ldrb	r0, [r4, #16]
 80a2642:	f7ff f907 	bl	80a1854 <HAL_USB_USART_Send_Data>
 80a2646:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a264a:	bd38      	pop	{r3, r4, r5, pc}

080a264c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a264c:	b510      	push	{r4, lr}
 80a264e:	4604      	mov	r4, r0
 80a2650:	2300      	movs	r3, #0
 80a2652:	6063      	str	r3, [r4, #4]
 80a2654:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2658:	60a3      	str	r3, [r4, #8]
 80a265a:	4b05      	ldr	r3, [pc, #20]	; (80a2670 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a265c:	4608      	mov	r0, r1
 80a265e:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a2660:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a2662:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a2664:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a2666:	4611      	mov	r1, r2
 80a2668:	f7ff f8d4 	bl	80a1814 <HAL_USB_USART_Init>
}
 80a266c:	4620      	mov	r0, r4
 80a266e:	bd10      	pop	{r4, pc}
 80a2670:	080a3098 	.word	0x080a3098

080a2674 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a2674:	b510      	push	{r4, lr}
 80a2676:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2678:	2214      	movs	r2, #20
 80a267a:	2100      	movs	r1, #0
 80a267c:	f000 fb81 	bl	80a2d82 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2680:	4b05      	ldr	r3, [pc, #20]	; (80a2698 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2682:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2684:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a2686:	4b05      	ldr	r3, [pc, #20]	; (80a269c <_Z19acquireSerialBufferv+0x28>)
 80a2688:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a268a:	f240 1301 	movw	r3, #257	; 0x101
 80a268e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2690:	2381      	movs	r3, #129	; 0x81
 80a2692:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2694:	bd10      	pop	{r4, pc}
 80a2696:	bf00      	nop
 80a2698:	20000269 	.word	0x20000269
 80a269c:	200001e8 	.word	0x200001e8

080a26a0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a26a0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a26a2:	4d0e      	ldr	r5, [pc, #56]	; (80a26dc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a26a4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a26a6:	a801      	add	r0, sp, #4
 80a26a8:	f7ff ffe4 	bl	80a2674 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a26ac:	6829      	ldr	r1, [r5, #0]
 80a26ae:	f011 0401 	ands.w	r4, r1, #1
 80a26b2:	d110      	bne.n	80a26d6 <_Z16_fetch_usbserialv+0x36>
 80a26b4:	4628      	mov	r0, r5
 80a26b6:	f7fd fcf4 	bl	80a00a2 <__cxa_guard_acquire>
 80a26ba:	b160      	cbz	r0, 80a26d6 <_Z16_fetch_usbserialv+0x36>
 80a26bc:	aa01      	add	r2, sp, #4
 80a26be:	4621      	mov	r1, r4
 80a26c0:	4807      	ldr	r0, [pc, #28]	; (80a26e0 <_Z16_fetch_usbserialv+0x40>)
 80a26c2:	f7ff ffc3 	bl	80a264c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a26c6:	4628      	mov	r0, r5
 80a26c8:	f7fd fcf0 	bl	80a00ac <__cxa_guard_release>
 80a26cc:	4a05      	ldr	r2, [pc, #20]	; (80a26e4 <_Z16_fetch_usbserialv+0x44>)
 80a26ce:	4906      	ldr	r1, [pc, #24]	; (80a26e8 <_Z16_fetch_usbserialv+0x48>)
 80a26d0:	4803      	ldr	r0, [pc, #12]	; (80a26e0 <_Z16_fetch_usbserialv+0x40>)
 80a26d2:	f000 f9eb 	bl	80a2aac <__aeabi_atexit>
	return _usbserial;
}
 80a26d6:	4802      	ldr	r0, [pc, #8]	; (80a26e0 <_Z16_fetch_usbserialv+0x40>)
 80a26d8:	b007      	add	sp, #28
 80a26da:	bd30      	pop	{r4, r5, pc}
 80a26dc:	200001e4 	.word	0x200001e4
 80a26e0:	2000036c 	.word	0x2000036c
 80a26e4:	2000006c 	.word	0x2000006c
 80a26e8:	080a25cd 	.word	0x080a25cd

080a26ec <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a26ec:	b510      	push	{r4, lr}
 80a26ee:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a26f0:	2214      	movs	r2, #20
 80a26f2:	2100      	movs	r1, #0
 80a26f4:	f000 fb45 	bl	80a2d82 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a26f8:	4b05      	ldr	r3, [pc, #20]	; (80a2710 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a26fa:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a26fc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a26fe:	4b05      	ldr	r3, [pc, #20]	; (80a2714 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2700:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2702:	f240 1301 	movw	r3, #257	; 0x101
 80a2706:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2708:	2381      	movs	r3, #129	; 0x81
 80a270a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a270c:	bd10      	pop	{r4, pc}
 80a270e:	bf00      	nop
 80a2710:	2000041c 	.word	0x2000041c
 80a2714:	20000384 	.word	0x20000384

080a2718 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2718:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a271a:	4c0e      	ldr	r4, [pc, #56]	; (80a2754 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a271c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a271e:	a801      	add	r0, sp, #4
 80a2720:	f7ff ffe4 	bl	80a26ec <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2724:	6823      	ldr	r3, [r4, #0]
 80a2726:	07db      	lsls	r3, r3, #31
 80a2728:	d410      	bmi.n	80a274c <_Z17_fetch_usbserial1v+0x34>
 80a272a:	4620      	mov	r0, r4
 80a272c:	f7fd fcb9 	bl	80a00a2 <__cxa_guard_acquire>
 80a2730:	b160      	cbz	r0, 80a274c <_Z17_fetch_usbserial1v+0x34>
 80a2732:	aa01      	add	r2, sp, #4
 80a2734:	2101      	movs	r1, #1
 80a2736:	4808      	ldr	r0, [pc, #32]	; (80a2758 <_Z17_fetch_usbserial1v+0x40>)
 80a2738:	f7ff ff88 	bl	80a264c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a273c:	4620      	mov	r0, r4
 80a273e:	f7fd fcb5 	bl	80a00ac <__cxa_guard_release>
 80a2742:	4a06      	ldr	r2, [pc, #24]	; (80a275c <_Z17_fetch_usbserial1v+0x44>)
 80a2744:	4906      	ldr	r1, [pc, #24]	; (80a2760 <_Z17_fetch_usbserial1v+0x48>)
 80a2746:	4804      	ldr	r0, [pc, #16]	; (80a2758 <_Z17_fetch_usbserial1v+0x40>)
 80a2748:	f000 f9b0 	bl	80a2aac <__aeabi_atexit>
  return _usbserial1;
}
 80a274c:	4802      	ldr	r0, [pc, #8]	; (80a2758 <_Z17_fetch_usbserial1v+0x40>)
 80a274e:	b006      	add	sp, #24
 80a2750:	bd10      	pop	{r4, pc}
 80a2752:	bf00      	nop
 80a2754:	20000380 	.word	0x20000380
 80a2758:	20000408 	.word	0x20000408
 80a275c:	2000006c 	.word	0x2000006c
 80a2760:	080a25cd 	.word	0x080a25cd

080a2764 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2764:	2200      	movs	r2, #0
 80a2766:	4611      	mov	r1, r2
 80a2768:	6840      	ldr	r0, [r0, #4]
 80a276a:	f7ff b8ef 	b.w	80a194c <network_ready>

080a276e <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a276e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2770:	4616      	mov	r6, r2
 80a2772:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2774:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2776:	460f      	mov	r7, r1
 80a2778:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a277a:	2100      	movs	r1, #0
 80a277c:	a803      	add	r0, sp, #12
 80a277e:	f000 fb00 	bl	80a2d82 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2782:	4630      	mov	r0, r6
 80a2784:	f000 fb53 	bl	80a2e2e <strlen>
 80a2788:	2500      	movs	r5, #0
 80a278a:	9500      	str	r5, [sp, #0]
 80a278c:	b281      	uxth	r1, r0
 80a278e:	687b      	ldr	r3, [r7, #4]
 80a2790:	aa03      	add	r2, sp, #12
 80a2792:	4630      	mov	r0, r6
 80a2794:	f7ff f86e 	bl	80a1874 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2798:	b120      	cbz	r0, 80a27a4 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a279a:	4629      	mov	r1, r5
 80a279c:	4620      	mov	r0, r4
 80a279e:	f7ff fccb 	bl	80a2138 <_ZN9IPAddressC1Em>
 80a27a2:	e003      	b.n	80a27ac <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a27a4:	a903      	add	r1, sp, #12
 80a27a6:	4620      	mov	r0, r4
 80a27a8:	f7ff fcb4 	bl	80a2114 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a27ac:	4620      	mov	r0, r4
 80a27ae:	b009      	add	sp, #36	; 0x24
 80a27b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a27b2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a27b2:	2200      	movs	r2, #0
 80a27b4:	4611      	mov	r1, r2
 80a27b6:	6840      	ldr	r0, [r0, #4]
 80a27b8:	f7ff b8e8 	b.w	80a198c <network_listening>

080a27bc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a27bc:	2200      	movs	r2, #0
 80a27be:	4611      	mov	r1, r2
 80a27c0:	6840      	ldr	r0, [r0, #4]
 80a27c2:	f7ff b8f3 	b.w	80a19ac <network_get_listen_timeout>

080a27c6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a27c6:	2200      	movs	r2, #0
 80a27c8:	6840      	ldr	r0, [r0, #4]
 80a27ca:	f7ff b8e7 	b.w	80a199c <network_set_listen_timeout>

080a27ce <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a27ce:	2200      	movs	r2, #0
 80a27d0:	f081 0101 	eor.w	r1, r1, #1
 80a27d4:	6840      	ldr	r0, [r0, #4]
 80a27d6:	f7ff b8d1 	b.w	80a197c <network_listen>

080a27da <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a27da:	2300      	movs	r3, #0
 80a27dc:	461a      	mov	r2, r3
 80a27de:	4619      	mov	r1, r3
 80a27e0:	6840      	ldr	r0, [r0, #4]
 80a27e2:	f7ff b8c3 	b.w	80a196c <network_off>

080a27e6 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a27e6:	2300      	movs	r3, #0
 80a27e8:	461a      	mov	r2, r3
 80a27ea:	4619      	mov	r1, r3
 80a27ec:	6840      	ldr	r0, [r0, #4]
 80a27ee:	f7ff b8b5 	b.w	80a195c <network_on>

080a27f2 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a27f2:	2200      	movs	r2, #0
 80a27f4:	4611      	mov	r1, r2
 80a27f6:	6840      	ldr	r0, [r0, #4]
 80a27f8:	f7ff b898 	b.w	80a192c <network_connecting>

080a27fc <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a27fc:	2200      	movs	r2, #0
 80a27fe:	2102      	movs	r1, #2
 80a2800:	6840      	ldr	r0, [r0, #4]
 80a2802:	f7ff b89b 	b.w	80a193c <network_disconnect>

080a2806 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a2806:	2300      	movs	r3, #0
 80a2808:	461a      	mov	r2, r3
 80a280a:	6840      	ldr	r0, [r0, #4]
 80a280c:	f7ff b886 	b.w	80a191c <network_connect>

080a2810 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a2810:	4b02      	ldr	r3, [pc, #8]	; (80a281c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2812:	2204      	movs	r2, #4
 80a2814:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a2816:	4a02      	ldr	r2, [pc, #8]	; (80a2820 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2818:	601a      	str	r2, [r3, #0]
 80a281a:	4770      	bx	lr
 80a281c:	20000520 	.word	0x20000520
 80a2820:	080a30c8 	.word	0x080a30c8

080a2824 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a2824:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2826:	4b14      	ldr	r3, [pc, #80]	; (80a2878 <serialEventRun+0x54>)
 80a2828:	b133      	cbz	r3, 80a2838 <serialEventRun+0x14>
 80a282a:	f7ff ff39 	bl	80a26a0 <_Z16_fetch_usbserialv>
 80a282e:	6803      	ldr	r3, [r0, #0]
 80a2830:	691b      	ldr	r3, [r3, #16]
 80a2832:	4798      	blx	r3
 80a2834:	2800      	cmp	r0, #0
 80a2836:	dc16      	bgt.n	80a2866 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a2838:	4b10      	ldr	r3, [pc, #64]	; (80a287c <serialEventRun+0x58>)
 80a283a:	b133      	cbz	r3, 80a284a <serialEventRun+0x26>
 80a283c:	f7ff fe9e 	bl	80a257c <_Z22__fetch_global_Serial1v>
 80a2840:	6803      	ldr	r3, [r0, #0]
 80a2842:	691b      	ldr	r3, [r3, #16]
 80a2844:	4798      	blx	r3
 80a2846:	2800      	cmp	r0, #0
 80a2848:	dc10      	bgt.n	80a286c <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a284a:	4b0d      	ldr	r3, [pc, #52]	; (80a2880 <serialEventRun+0x5c>)
 80a284c:	b10b      	cbz	r3, 80a2852 <serialEventRun+0x2e>
 80a284e:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2852:	4b0c      	ldr	r3, [pc, #48]	; (80a2884 <serialEventRun+0x60>)
 80a2854:	b17b      	cbz	r3, 80a2876 <serialEventRun+0x52>
 80a2856:	f7ff ff5f 	bl	80a2718 <_Z17_fetch_usbserial1v>
 80a285a:	6803      	ldr	r3, [r0, #0]
 80a285c:	691b      	ldr	r3, [r3, #16]
 80a285e:	4798      	blx	r3
 80a2860:	2800      	cmp	r0, #0
 80a2862:	dc06      	bgt.n	80a2872 <serialEventRun+0x4e>
 80a2864:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a2866:	f3af 8000 	nop.w
 80a286a:	e7e5      	b.n	80a2838 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a286c:	f3af 8000 	nop.w
 80a2870:	e7eb      	b.n	80a284a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a2872:	f3af 8000 	nop.w
 80a2876:	bd08      	pop	{r3, pc}
	...

080a2888 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a2888:	b508      	push	{r3, lr}
	serialEventRun();
 80a288a:	f7ff ffcb 	bl	80a2824 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a288e:	f7fe ff0f 	bl	80a16b0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a2892:	4b01      	ldr	r3, [pc, #4]	; (80a2898 <_post_loop+0x10>)
 80a2894:	6018      	str	r0, [r3, #0]
 80a2896:	bd08      	pop	{r3, pc}
 80a2898:	20000530 	.word	0x20000530

080a289c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a289c:	4802      	ldr	r0, [pc, #8]	; (80a28a8 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a289e:	4a03      	ldr	r2, [pc, #12]	; (80a28ac <_Z33system_initialize_user_backup_ramv+0x10>)
 80a28a0:	4903      	ldr	r1, [pc, #12]	; (80a28b0 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a28a2:	1a12      	subs	r2, r2, r0
 80a28a4:	f000 ba62 	b.w	80a2d6c <memcpy>
 80a28a8:	40024000 	.word	0x40024000
 80a28ac:	40024004 	.word	0x40024004
 80a28b0:	080a3190 	.word	0x080a3190

080a28b4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a28b4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a28b6:	2300      	movs	r3, #0
 80a28b8:	9300      	str	r3, [sp, #0]
 80a28ba:	461a      	mov	r2, r3
 80a28bc:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a28c0:	f7ff f802 	bl	80a18c8 <system_ctrl_set_result>
}
 80a28c4:	b003      	add	sp, #12
 80a28c6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a28cc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a28cc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a28ce:	8843      	ldrh	r3, [r0, #2]
 80a28d0:	2b0a      	cmp	r3, #10
 80a28d2:	d008      	beq.n	80a28e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a28d4:	2b50      	cmp	r3, #80	; 0x50
 80a28d6:	d109      	bne.n	80a28ec <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a28d8:	4b09      	ldr	r3, [pc, #36]	; (80a2900 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a28da:	681b      	ldr	r3, [r3, #0]
 80a28dc:	b13b      	cbz	r3, 80a28ee <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a28de:	b003      	add	sp, #12
 80a28e0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a28e4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a28e6:	f7ff ffe5 	bl	80a28b4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a28ea:	e006      	b.n	80a28fa <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a28ec:	2300      	movs	r3, #0
 80a28ee:	9300      	str	r3, [sp, #0]
 80a28f0:	461a      	mov	r2, r3
 80a28f2:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a28f6:	f7fe ffe7 	bl	80a18c8 <system_ctrl_set_result>
        break;
    }
}
 80a28fa:	b003      	add	sp, #12
 80a28fc:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2900:	20000528 	.word	0x20000528

080a2904 <module_user_init_hook>:

void module_user_init_hook()
{
 80a2904:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2906:	4c10      	ldr	r4, [pc, #64]	; (80a2948 <module_user_init_hook+0x44>)
 80a2908:	4d10      	ldr	r5, [pc, #64]	; (80a294c <module_user_init_hook+0x48>)
 80a290a:	6823      	ldr	r3, [r4, #0]
 80a290c:	42ab      	cmp	r3, r5
 80a290e:	4b10      	ldr	r3, [pc, #64]	; (80a2950 <module_user_init_hook+0x4c>)
 80a2910:	bf0c      	ite	eq
 80a2912:	2201      	moveq	r2, #1
 80a2914:	2200      	movne	r2, #0
 80a2916:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2918:	d002      	beq.n	80a2920 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a291a:	f7ff ffbf 	bl	80a289c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a291e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2920:	f7fe feb6 	bl	80a1690 <HAL_RNG_GetRandomNumber>
 80a2924:	4604      	mov	r4, r0
    srand(seed);
 80a2926:	f000 fa35 	bl	80a2d94 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a292a:	4b0a      	ldr	r3, [pc, #40]	; (80a2954 <module_user_init_hook+0x50>)
 80a292c:	b113      	cbz	r3, 80a2934 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a292e:	4620      	mov	r0, r4
 80a2930:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2934:	2100      	movs	r1, #0
 80a2936:	4807      	ldr	r0, [pc, #28]	; (80a2954 <module_user_init_hook+0x50>)
 80a2938:	f7fe ffe8 	bl	80a190c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a293c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2940:	2100      	movs	r1, #0
 80a2942:	4805      	ldr	r0, [pc, #20]	; (80a2958 <module_user_init_hook+0x54>)
 80a2944:	f7fe bfb6 	b.w	80a18b4 <system_ctrl_set_app_request_handler>
 80a2948:	40024000 	.word	0x40024000
 80a294c:	9a271c1e 	.word	0x9a271c1e
 80a2950:	2000052c 	.word	0x2000052c
 80a2954:	00000000 	.word	0x00000000
 80a2958:	080a28cd 	.word	0x080a28cd

080a295c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a295c:	b510      	push	{r4, lr}
 80a295e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a2960:	480f      	ldr	r0, [pc, #60]	; (80a29a0 <pinAvailable+0x44>)
 80a2962:	f7ff fcff 	bl	80a2364 <_ZN8SPIClass9isEnabledEv>
 80a2966:	b128      	cbz	r0, 80a2974 <pinAvailable+0x18>
 80a2968:	f1a4 030d 	sub.w	r3, r4, #13
 80a296c:	2b02      	cmp	r3, #2
 80a296e:	d801      	bhi.n	80a2974 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a2970:	2000      	movs	r0, #0
 80a2972:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a2974:	f000 f840 	bl	80a29f8 <_Z19__fetch_global_Wirev>
 80a2978:	f7ff fb98 	bl	80a20ac <_ZN7TwoWire9isEnabledEv>
 80a297c:	b108      	cbz	r0, 80a2982 <pinAvailable+0x26>
 80a297e:	2c01      	cmp	r4, #1
 80a2980:	d9f6      	bls.n	80a2970 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a2982:	f7ff fdfb 	bl	80a257c <_Z22__fetch_global_Serial1v>
 80a2986:	f7ff fdf5 	bl	80a2574 <_ZN11USARTSerial9isEnabledEv>
 80a298a:	b118      	cbz	r0, 80a2994 <pinAvailable+0x38>
 80a298c:	f1a4 0312 	sub.w	r3, r4, #18
 80a2990:	2b01      	cmp	r3, #1
 80a2992:	d9ed      	bls.n	80a2970 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a2994:	2c17      	cmp	r4, #23
 80a2996:	bf8c      	ite	hi
 80a2998:	2000      	movhi	r0, #0
 80a299a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a299c:	bd10      	pop	{r4, pc}
 80a299e:	bf00      	nop
 80a29a0:	20000564 	.word	0x20000564

080a29a4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a29a4:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a29a6:	b538      	push	{r3, r4, r5, lr}
 80a29a8:	4604      	mov	r4, r0
 80a29aa:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a29ac:	d80a      	bhi.n	80a29c4 <pinMode+0x20>
 80a29ae:	29ff      	cmp	r1, #255	; 0xff
 80a29b0:	d008      	beq.n	80a29c4 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a29b2:	f7ff ffd3 	bl	80a295c <pinAvailable>
 80a29b6:	b128      	cbz	r0, 80a29c4 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a29b8:	4629      	mov	r1, r5
 80a29ba:	4620      	mov	r0, r4
}
 80a29bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a29c0:	f7fe be86 	b.w	80a16d0 <HAL_Pin_Mode>
 80a29c4:	bd38      	pop	{r3, r4, r5, pc}

080a29c6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a29c6:	b538      	push	{r3, r4, r5, lr}
 80a29c8:	4604      	mov	r4, r0
 80a29ca:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a29cc:	f7fe fe88 	bl	80a16e0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a29d0:	28ff      	cmp	r0, #255	; 0xff
 80a29d2:	d010      	beq.n	80a29f6 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a29d4:	2806      	cmp	r0, #6
 80a29d6:	d804      	bhi.n	80a29e2 <digitalWrite+0x1c>
 80a29d8:	234d      	movs	r3, #77	; 0x4d
 80a29da:	fa23 f000 	lsr.w	r0, r3, r0
 80a29de:	07c3      	lsls	r3, r0, #31
 80a29e0:	d409      	bmi.n	80a29f6 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a29e2:	4620      	mov	r0, r4
 80a29e4:	f7ff ffba 	bl	80a295c <pinAvailable>
 80a29e8:	b128      	cbz	r0, 80a29f6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a29ea:	4629      	mov	r1, r5
 80a29ec:	4620      	mov	r0, r4
}
 80a29ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a29f2:	f7fe be7d 	b.w	80a16f0 <HAL_GPIO_Write>
 80a29f6:	bd38      	pop	{r3, r4, r5, pc}

080a29f8 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a29f8:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a29fa:	4d0b      	ldr	r5, [pc, #44]	; (80a2a28 <_Z19__fetch_global_Wirev+0x30>)
 80a29fc:	6829      	ldr	r1, [r5, #0]
 80a29fe:	f011 0401 	ands.w	r4, r1, #1
 80a2a02:	d10f      	bne.n	80a2a24 <_Z19__fetch_global_Wirev+0x2c>
 80a2a04:	4628      	mov	r0, r5
 80a2a06:	f7fd fb4c 	bl	80a00a2 <__cxa_guard_acquire>
 80a2a0a:	b158      	cbz	r0, 80a2a24 <_Z19__fetch_global_Wirev+0x2c>
 80a2a0c:	4621      	mov	r1, r4
 80a2a0e:	4807      	ldr	r0, [pc, #28]	; (80a2a2c <_Z19__fetch_global_Wirev+0x34>)
 80a2a10:	f7ff fb3a 	bl	80a2088 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a2a14:	4628      	mov	r0, r5
 80a2a16:	f7fd fb49 	bl	80a00ac <__cxa_guard_release>
 80a2a1a:	4a05      	ldr	r2, [pc, #20]	; (80a2a30 <_Z19__fetch_global_Wirev+0x38>)
 80a2a1c:	4905      	ldr	r1, [pc, #20]	; (80a2a34 <_Z19__fetch_global_Wirev+0x3c>)
 80a2a1e:	4803      	ldr	r0, [pc, #12]	; (80a2a2c <_Z19__fetch_global_Wirev+0x34>)
 80a2a20:	f000 f844 	bl	80a2aac <__aeabi_atexit>
	return wire;
}
 80a2a24:	4801      	ldr	r0, [pc, #4]	; (80a2a2c <_Z19__fetch_global_Wirev+0x34>)
 80a2a26:	bd38      	pop	{r3, r4, r5, pc}
 80a2a28:	20000534 	.word	0x20000534
 80a2a2c:	20000538 	.word	0x20000538
 80a2a30:	2000006c 	.word	0x2000006c
 80a2a34:	080a2031 	.word	0x080a2031

080a2a38 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2a38:	b513      	push	{r0, r1, r4, lr}
 80a2a3a:	4c08      	ldr	r4, [pc, #32]	; (80a2a5c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2a3c:	2300      	movs	r3, #0
 80a2a3e:	461a      	mov	r2, r3
 80a2a40:	4619      	mov	r1, r3
 80a2a42:	9300      	str	r3, [sp, #0]
 80a2a44:	4620      	mov	r0, r4
 80a2a46:	f7ff fb8d 	bl	80a2164 <_ZN9IPAddressC1Ehhhh>
 80a2a4a:	4620      	mov	r0, r4
 80a2a4c:	4a04      	ldr	r2, [pc, #16]	; (80a2a60 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a2a4e:	4905      	ldr	r1, [pc, #20]	; (80a2a64 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2a50:	b002      	add	sp, #8
 80a2a52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a2a56:	f000 b829 	b.w	80a2aac <__aeabi_atexit>
 80a2a5a:	bf00      	nop
 80a2a5c:	2000054c 	.word	0x2000054c
 80a2a60:	2000006c 	.word	0x2000006c
 80a2a64:	080a20b5 	.word	0x080a20b5

080a2a68 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2a68:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2a6a:	4c0c      	ldr	r4, [pc, #48]	; (80a2a9c <_GLOBAL__sub_I_SPI+0x34>)
 80a2a6c:	4e0c      	ldr	r6, [pc, #48]	; (80a2aa0 <_GLOBAL__sub_I_SPI+0x38>)
 80a2a6e:	4d0d      	ldr	r5, [pc, #52]	; (80a2aa4 <_GLOBAL__sub_I_SPI+0x3c>)
 80a2a70:	2100      	movs	r1, #0
 80a2a72:	4620      	mov	r0, r4
 80a2a74:	f7ff fc62 	bl	80a233c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2a78:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2a7a:	4c0b      	ldr	r4, [pc, #44]	; (80a2aa8 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2a7c:	4632      	mov	r2, r6
 80a2a7e:	4629      	mov	r1, r5
 80a2a80:	f000 f814 	bl	80a2aac <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2a84:	2101      	movs	r1, #1
 80a2a86:	4620      	mov	r0, r4
 80a2a88:	f7ff fc58 	bl	80a233c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2a8c:	4632      	mov	r2, r6
 80a2a8e:	4629      	mov	r1, r5
 80a2a90:	4620      	mov	r0, r4
 80a2a92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a2a96:	f000 b809 	b.w	80a2aac <__aeabi_atexit>
 80a2a9a:	bf00      	nop
 80a2a9c:	20000564 	.word	0x20000564
 80a2aa0:	2000006c 	.word	0x2000006c
 80a2aa4:	080a232d 	.word	0x080a232d
 80a2aa8:	20000574 	.word	0x20000574

080a2aac <__aeabi_atexit>:
 80a2aac:	460b      	mov	r3, r1
 80a2aae:	4601      	mov	r1, r0
 80a2ab0:	4618      	mov	r0, r3
 80a2ab2:	f000 b94d 	b.w	80a2d50 <__cxa_atexit>

080a2ab6 <_ZdlPvj>:
 80a2ab6:	f7fd baf2 	b.w	80a009e <_ZdlPv>

080a2aba <_ZSt25__throw_bad_function_callv>:
 80a2aba:	b508      	push	{r3, lr}
 80a2abc:	f7fe ff96 	bl	80a19ec <abort>

080a2ac0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a2ac0:	4b24      	ldr	r3, [pc, #144]	; (80a2b54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a2ac2:	681a      	ldr	r2, [r3, #0]
 80a2ac4:	07d0      	lsls	r0, r2, #31
 80a2ac6:	bf5c      	itt	pl
 80a2ac8:	2201      	movpl	r2, #1
 80a2aca:	601a      	strpl	r2, [r3, #0]
 80a2acc:	4b22      	ldr	r3, [pc, #136]	; (80a2b58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a2ace:	681a      	ldr	r2, [r3, #0]
 80a2ad0:	07d1      	lsls	r1, r2, #31
 80a2ad2:	bf5c      	itt	pl
 80a2ad4:	2201      	movpl	r2, #1
 80a2ad6:	601a      	strpl	r2, [r3, #0]
 80a2ad8:	4b20      	ldr	r3, [pc, #128]	; (80a2b5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a2ada:	681a      	ldr	r2, [r3, #0]
 80a2adc:	07d2      	lsls	r2, r2, #31
 80a2ade:	bf5c      	itt	pl
 80a2ae0:	2201      	movpl	r2, #1
 80a2ae2:	601a      	strpl	r2, [r3, #0]
 80a2ae4:	4b1e      	ldr	r3, [pc, #120]	; (80a2b60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2ae6:	681a      	ldr	r2, [r3, #0]
 80a2ae8:	07d0      	lsls	r0, r2, #31
 80a2aea:	bf5c      	itt	pl
 80a2aec:	2201      	movpl	r2, #1
 80a2aee:	601a      	strpl	r2, [r3, #0]
 80a2af0:	4b1c      	ldr	r3, [pc, #112]	; (80a2b64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a2af2:	681a      	ldr	r2, [r3, #0]
 80a2af4:	07d1      	lsls	r1, r2, #31
 80a2af6:	bf5c      	itt	pl
 80a2af8:	2201      	movpl	r2, #1
 80a2afa:	601a      	strpl	r2, [r3, #0]
 80a2afc:	4b1a      	ldr	r3, [pc, #104]	; (80a2b68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a2afe:	681a      	ldr	r2, [r3, #0]
 80a2b00:	07d2      	lsls	r2, r2, #31
 80a2b02:	bf5c      	itt	pl
 80a2b04:	2201      	movpl	r2, #1
 80a2b06:	601a      	strpl	r2, [r3, #0]
 80a2b08:	4b18      	ldr	r3, [pc, #96]	; (80a2b6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a2b0a:	681a      	ldr	r2, [r3, #0]
 80a2b0c:	07d0      	lsls	r0, r2, #31
 80a2b0e:	bf5c      	itt	pl
 80a2b10:	2201      	movpl	r2, #1
 80a2b12:	601a      	strpl	r2, [r3, #0]
 80a2b14:	4b16      	ldr	r3, [pc, #88]	; (80a2b70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a2b16:	681a      	ldr	r2, [r3, #0]
 80a2b18:	07d1      	lsls	r1, r2, #31
 80a2b1a:	bf5c      	itt	pl
 80a2b1c:	2201      	movpl	r2, #1
 80a2b1e:	601a      	strpl	r2, [r3, #0]
 80a2b20:	4b14      	ldr	r3, [pc, #80]	; (80a2b74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a2b22:	681a      	ldr	r2, [r3, #0]
 80a2b24:	07d2      	lsls	r2, r2, #31
 80a2b26:	bf5c      	itt	pl
 80a2b28:	2201      	movpl	r2, #1
 80a2b2a:	601a      	strpl	r2, [r3, #0]
 80a2b2c:	4b12      	ldr	r3, [pc, #72]	; (80a2b78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a2b2e:	681a      	ldr	r2, [r3, #0]
 80a2b30:	07d0      	lsls	r0, r2, #31
 80a2b32:	bf5c      	itt	pl
 80a2b34:	2201      	movpl	r2, #1
 80a2b36:	601a      	strpl	r2, [r3, #0]
 80a2b38:	4b10      	ldr	r3, [pc, #64]	; (80a2b7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a2b3a:	681a      	ldr	r2, [r3, #0]
 80a2b3c:	07d1      	lsls	r1, r2, #31
 80a2b3e:	bf5c      	itt	pl
 80a2b40:	2201      	movpl	r2, #1
 80a2b42:	601a      	strpl	r2, [r3, #0]
 80a2b44:	4b0e      	ldr	r3, [pc, #56]	; (80a2b80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a2b46:	681a      	ldr	r2, [r3, #0]
 80a2b48:	07d2      	lsls	r2, r2, #31
 80a2b4a:	bf5c      	itt	pl
 80a2b4c:	2201      	movpl	r2, #1
 80a2b4e:	601a      	strpl	r2, [r3, #0]
 80a2b50:	4770      	bx	lr
 80a2b52:	bf00      	nop
 80a2b54:	200005b0 	.word	0x200005b0
 80a2b58:	200005ac 	.word	0x200005ac
 80a2b5c:	200005a8 	.word	0x200005a8
 80a2b60:	200005a4 	.word	0x200005a4
 80a2b64:	200005a0 	.word	0x200005a0
 80a2b68:	2000059c 	.word	0x2000059c
 80a2b6c:	20000598 	.word	0x20000598
 80a2b70:	20000594 	.word	0x20000594
 80a2b74:	20000590 	.word	0x20000590
 80a2b78:	2000058c 	.word	0x2000058c
 80a2b7c:	20000588 	.word	0x20000588
 80a2b80:	20000584 	.word	0x20000584

080a2b84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2b84:	4b18      	ldr	r3, [pc, #96]	; (80a2be8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2b86:	681a      	ldr	r2, [r3, #0]
 80a2b88:	07d1      	lsls	r1, r2, #31
 80a2b8a:	bf5c      	itt	pl
 80a2b8c:	2201      	movpl	r2, #1
 80a2b8e:	601a      	strpl	r2, [r3, #0]
 80a2b90:	4b16      	ldr	r3, [pc, #88]	; (80a2bec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2b92:	681a      	ldr	r2, [r3, #0]
 80a2b94:	07d2      	lsls	r2, r2, #31
 80a2b96:	bf5c      	itt	pl
 80a2b98:	2201      	movpl	r2, #1
 80a2b9a:	601a      	strpl	r2, [r3, #0]
 80a2b9c:	4b14      	ldr	r3, [pc, #80]	; (80a2bf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2b9e:	681a      	ldr	r2, [r3, #0]
 80a2ba0:	07d0      	lsls	r0, r2, #31
 80a2ba2:	bf5c      	itt	pl
 80a2ba4:	2201      	movpl	r2, #1
 80a2ba6:	601a      	strpl	r2, [r3, #0]
 80a2ba8:	4b12      	ldr	r3, [pc, #72]	; (80a2bf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2baa:	681a      	ldr	r2, [r3, #0]
 80a2bac:	07d1      	lsls	r1, r2, #31
 80a2bae:	bf5c      	itt	pl
 80a2bb0:	2201      	movpl	r2, #1
 80a2bb2:	601a      	strpl	r2, [r3, #0]
 80a2bb4:	4b10      	ldr	r3, [pc, #64]	; (80a2bf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2bb6:	681a      	ldr	r2, [r3, #0]
 80a2bb8:	07d2      	lsls	r2, r2, #31
 80a2bba:	bf5c      	itt	pl
 80a2bbc:	2201      	movpl	r2, #1
 80a2bbe:	601a      	strpl	r2, [r3, #0]
 80a2bc0:	4b0e      	ldr	r3, [pc, #56]	; (80a2bfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2bc2:	681a      	ldr	r2, [r3, #0]
 80a2bc4:	07d0      	lsls	r0, r2, #31
 80a2bc6:	bf5c      	itt	pl
 80a2bc8:	2201      	movpl	r2, #1
 80a2bca:	601a      	strpl	r2, [r3, #0]
 80a2bcc:	4b0c      	ldr	r3, [pc, #48]	; (80a2c00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2bce:	681a      	ldr	r2, [r3, #0]
 80a2bd0:	07d1      	lsls	r1, r2, #31
 80a2bd2:	bf5c      	itt	pl
 80a2bd4:	2201      	movpl	r2, #1
 80a2bd6:	601a      	strpl	r2, [r3, #0]
 80a2bd8:	4b0a      	ldr	r3, [pc, #40]	; (80a2c04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2bda:	681a      	ldr	r2, [r3, #0]
 80a2bdc:	07d2      	lsls	r2, r2, #31
 80a2bde:	bf5c      	itt	pl
 80a2be0:	2201      	movpl	r2, #1
 80a2be2:	601a      	strpl	r2, [r3, #0]
 80a2be4:	4770      	bx	lr
 80a2be6:	bf00      	nop
 80a2be8:	200005d0 	.word	0x200005d0
 80a2bec:	200005cc 	.word	0x200005cc
 80a2bf0:	200005c8 	.word	0x200005c8
 80a2bf4:	200005c4 	.word	0x200005c4
 80a2bf8:	200005c0 	.word	0x200005c0
 80a2bfc:	200005bc 	.word	0x200005bc
 80a2c00:	200005b8 	.word	0x200005b8
 80a2c04:	200005b4 	.word	0x200005b4

080a2c08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2c08:	4b18      	ldr	r3, [pc, #96]	; (80a2c6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2c0a:	681a      	ldr	r2, [r3, #0]
 80a2c0c:	07d1      	lsls	r1, r2, #31
 80a2c0e:	bf5c      	itt	pl
 80a2c10:	2201      	movpl	r2, #1
 80a2c12:	601a      	strpl	r2, [r3, #0]
 80a2c14:	4b16      	ldr	r3, [pc, #88]	; (80a2c70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2c16:	681a      	ldr	r2, [r3, #0]
 80a2c18:	07d2      	lsls	r2, r2, #31
 80a2c1a:	bf5c      	itt	pl
 80a2c1c:	2201      	movpl	r2, #1
 80a2c1e:	601a      	strpl	r2, [r3, #0]
 80a2c20:	4b14      	ldr	r3, [pc, #80]	; (80a2c74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2c22:	681a      	ldr	r2, [r3, #0]
 80a2c24:	07d0      	lsls	r0, r2, #31
 80a2c26:	bf5c      	itt	pl
 80a2c28:	2201      	movpl	r2, #1
 80a2c2a:	601a      	strpl	r2, [r3, #0]
 80a2c2c:	4b12      	ldr	r3, [pc, #72]	; (80a2c78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2c2e:	681a      	ldr	r2, [r3, #0]
 80a2c30:	07d1      	lsls	r1, r2, #31
 80a2c32:	bf5c      	itt	pl
 80a2c34:	2201      	movpl	r2, #1
 80a2c36:	601a      	strpl	r2, [r3, #0]
 80a2c38:	4b10      	ldr	r3, [pc, #64]	; (80a2c7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2c3a:	681a      	ldr	r2, [r3, #0]
 80a2c3c:	07d2      	lsls	r2, r2, #31
 80a2c3e:	bf5c      	itt	pl
 80a2c40:	2201      	movpl	r2, #1
 80a2c42:	601a      	strpl	r2, [r3, #0]
 80a2c44:	4b0e      	ldr	r3, [pc, #56]	; (80a2c80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2c46:	681a      	ldr	r2, [r3, #0]
 80a2c48:	07d0      	lsls	r0, r2, #31
 80a2c4a:	bf5c      	itt	pl
 80a2c4c:	2201      	movpl	r2, #1
 80a2c4e:	601a      	strpl	r2, [r3, #0]
 80a2c50:	4b0c      	ldr	r3, [pc, #48]	; (80a2c84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2c52:	681a      	ldr	r2, [r3, #0]
 80a2c54:	07d1      	lsls	r1, r2, #31
 80a2c56:	bf5c      	itt	pl
 80a2c58:	2201      	movpl	r2, #1
 80a2c5a:	601a      	strpl	r2, [r3, #0]
 80a2c5c:	4b0a      	ldr	r3, [pc, #40]	; (80a2c88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2c5e:	681a      	ldr	r2, [r3, #0]
 80a2c60:	07d2      	lsls	r2, r2, #31
 80a2c62:	bf5c      	itt	pl
 80a2c64:	2201      	movpl	r2, #1
 80a2c66:	601a      	strpl	r2, [r3, #0]
 80a2c68:	4770      	bx	lr
 80a2c6a:	bf00      	nop
 80a2c6c:	200005f0 	.word	0x200005f0
 80a2c70:	200005ec 	.word	0x200005ec
 80a2c74:	200005e8 	.word	0x200005e8
 80a2c78:	200005e4 	.word	0x200005e4
 80a2c7c:	200005e0 	.word	0x200005e0
 80a2c80:	200005dc 	.word	0x200005dc
 80a2c84:	200005d8 	.word	0x200005d8
 80a2c88:	200005d4 	.word	0x200005d4

080a2c8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2c8c:	4b24      	ldr	r3, [pc, #144]	; (80a2d20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a2c8e:	681a      	ldr	r2, [r3, #0]
 80a2c90:	07d0      	lsls	r0, r2, #31
 80a2c92:	bf5c      	itt	pl
 80a2c94:	2201      	movpl	r2, #1
 80a2c96:	601a      	strpl	r2, [r3, #0]
 80a2c98:	4b22      	ldr	r3, [pc, #136]	; (80a2d24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a2c9a:	681a      	ldr	r2, [r3, #0]
 80a2c9c:	07d1      	lsls	r1, r2, #31
 80a2c9e:	bf5c      	itt	pl
 80a2ca0:	2201      	movpl	r2, #1
 80a2ca2:	601a      	strpl	r2, [r3, #0]
 80a2ca4:	4b20      	ldr	r3, [pc, #128]	; (80a2d28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a2ca6:	681a      	ldr	r2, [r3, #0]
 80a2ca8:	07d2      	lsls	r2, r2, #31
 80a2caa:	bf5c      	itt	pl
 80a2cac:	2201      	movpl	r2, #1
 80a2cae:	601a      	strpl	r2, [r3, #0]
 80a2cb0:	4b1e      	ldr	r3, [pc, #120]	; (80a2d2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a2cb2:	681a      	ldr	r2, [r3, #0]
 80a2cb4:	07d0      	lsls	r0, r2, #31
 80a2cb6:	bf5c      	itt	pl
 80a2cb8:	2201      	movpl	r2, #1
 80a2cba:	601a      	strpl	r2, [r3, #0]
 80a2cbc:	4b1c      	ldr	r3, [pc, #112]	; (80a2d30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a2cbe:	681a      	ldr	r2, [r3, #0]
 80a2cc0:	07d1      	lsls	r1, r2, #31
 80a2cc2:	bf5c      	itt	pl
 80a2cc4:	2201      	movpl	r2, #1
 80a2cc6:	601a      	strpl	r2, [r3, #0]
 80a2cc8:	4b1a      	ldr	r3, [pc, #104]	; (80a2d34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a2cca:	681a      	ldr	r2, [r3, #0]
 80a2ccc:	07d2      	lsls	r2, r2, #31
 80a2cce:	bf5c      	itt	pl
 80a2cd0:	2201      	movpl	r2, #1
 80a2cd2:	601a      	strpl	r2, [r3, #0]
 80a2cd4:	4b18      	ldr	r3, [pc, #96]	; (80a2d38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2cd6:	681a      	ldr	r2, [r3, #0]
 80a2cd8:	07d0      	lsls	r0, r2, #31
 80a2cda:	bf5c      	itt	pl
 80a2cdc:	2201      	movpl	r2, #1
 80a2cde:	601a      	strpl	r2, [r3, #0]
 80a2ce0:	4b16      	ldr	r3, [pc, #88]	; (80a2d3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a2ce2:	681a      	ldr	r2, [r3, #0]
 80a2ce4:	07d1      	lsls	r1, r2, #31
 80a2ce6:	bf5c      	itt	pl
 80a2ce8:	2201      	movpl	r2, #1
 80a2cea:	601a      	strpl	r2, [r3, #0]
 80a2cec:	4b14      	ldr	r3, [pc, #80]	; (80a2d40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a2cee:	681a      	ldr	r2, [r3, #0]
 80a2cf0:	07d2      	lsls	r2, r2, #31
 80a2cf2:	bf5c      	itt	pl
 80a2cf4:	2201      	movpl	r2, #1
 80a2cf6:	601a      	strpl	r2, [r3, #0]
 80a2cf8:	4b12      	ldr	r3, [pc, #72]	; (80a2d44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a2cfa:	681a      	ldr	r2, [r3, #0]
 80a2cfc:	07d0      	lsls	r0, r2, #31
 80a2cfe:	bf5c      	itt	pl
 80a2d00:	2201      	movpl	r2, #1
 80a2d02:	601a      	strpl	r2, [r3, #0]
 80a2d04:	4b10      	ldr	r3, [pc, #64]	; (80a2d48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a2d06:	681a      	ldr	r2, [r3, #0]
 80a2d08:	07d1      	lsls	r1, r2, #31
 80a2d0a:	bf5c      	itt	pl
 80a2d0c:	2201      	movpl	r2, #1
 80a2d0e:	601a      	strpl	r2, [r3, #0]
 80a2d10:	4b0e      	ldr	r3, [pc, #56]	; (80a2d4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a2d12:	681a      	ldr	r2, [r3, #0]
 80a2d14:	07d2      	lsls	r2, r2, #31
 80a2d16:	bf5c      	itt	pl
 80a2d18:	2201      	movpl	r2, #1
 80a2d1a:	601a      	strpl	r2, [r3, #0]
 80a2d1c:	4770      	bx	lr
 80a2d1e:	bf00      	nop
 80a2d20:	20000620 	.word	0x20000620
 80a2d24:	2000061c 	.word	0x2000061c
 80a2d28:	20000618 	.word	0x20000618
 80a2d2c:	20000614 	.word	0x20000614
 80a2d30:	20000610 	.word	0x20000610
 80a2d34:	2000060c 	.word	0x2000060c
 80a2d38:	20000608 	.word	0x20000608
 80a2d3c:	20000604 	.word	0x20000604
 80a2d40:	20000600 	.word	0x20000600
 80a2d44:	200005fc 	.word	0x200005fc
 80a2d48:	200005f8 	.word	0x200005f8
 80a2d4c:	200005f4 	.word	0x200005f4

080a2d50 <__cxa_atexit>:
 80a2d50:	b510      	push	{r4, lr}
 80a2d52:	4c05      	ldr	r4, [pc, #20]	; (80a2d68 <__cxa_atexit+0x18>)
 80a2d54:	4613      	mov	r3, r2
 80a2d56:	b12c      	cbz	r4, 80a2d64 <__cxa_atexit+0x14>
 80a2d58:	460a      	mov	r2, r1
 80a2d5a:	4601      	mov	r1, r0
 80a2d5c:	2002      	movs	r0, #2
 80a2d5e:	f3af 8000 	nop.w
 80a2d62:	bd10      	pop	{r4, pc}
 80a2d64:	4620      	mov	r0, r4
 80a2d66:	bd10      	pop	{r4, pc}
 80a2d68:	00000000 	.word	0x00000000

080a2d6c <memcpy>:
 80a2d6c:	b510      	push	{r4, lr}
 80a2d6e:	1e43      	subs	r3, r0, #1
 80a2d70:	440a      	add	r2, r1
 80a2d72:	4291      	cmp	r1, r2
 80a2d74:	d004      	beq.n	80a2d80 <memcpy+0x14>
 80a2d76:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2d7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2d7e:	e7f8      	b.n	80a2d72 <memcpy+0x6>
 80a2d80:	bd10      	pop	{r4, pc}

080a2d82 <memset>:
 80a2d82:	4603      	mov	r3, r0
 80a2d84:	4402      	add	r2, r0
 80a2d86:	4293      	cmp	r3, r2
 80a2d88:	d002      	beq.n	80a2d90 <memset+0xe>
 80a2d8a:	f803 1b01 	strb.w	r1, [r3], #1
 80a2d8e:	e7fa      	b.n	80a2d86 <memset+0x4>
 80a2d90:	4770      	bx	lr
	...

080a2d94 <srand>:
 80a2d94:	b538      	push	{r3, r4, r5, lr}
 80a2d96:	4b12      	ldr	r3, [pc, #72]	; (80a2de0 <srand+0x4c>)
 80a2d98:	4605      	mov	r5, r0
 80a2d9a:	681c      	ldr	r4, [r3, #0]
 80a2d9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2d9e:	b9d3      	cbnz	r3, 80a2dd6 <srand+0x42>
 80a2da0:	2018      	movs	r0, #24
 80a2da2:	f7fe fe0b 	bl	80a19bc <malloc>
 80a2da6:	f243 330e 	movw	r3, #13070	; 0x330e
 80a2daa:	63a0      	str	r0, [r4, #56]	; 0x38
 80a2dac:	8003      	strh	r3, [r0, #0]
 80a2dae:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a2db2:	8043      	strh	r3, [r0, #2]
 80a2db4:	f241 2334 	movw	r3, #4660	; 0x1234
 80a2db8:	8083      	strh	r3, [r0, #4]
 80a2dba:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a2dbe:	80c3      	strh	r3, [r0, #6]
 80a2dc0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a2dc4:	8103      	strh	r3, [r0, #8]
 80a2dc6:	2305      	movs	r3, #5
 80a2dc8:	8143      	strh	r3, [r0, #10]
 80a2dca:	230b      	movs	r3, #11
 80a2dcc:	8183      	strh	r3, [r0, #12]
 80a2dce:	2201      	movs	r2, #1
 80a2dd0:	2300      	movs	r3, #0
 80a2dd2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2dd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2dd8:	2200      	movs	r2, #0
 80a2dda:	611d      	str	r5, [r3, #16]
 80a2ddc:	615a      	str	r2, [r3, #20]
 80a2dde:	bd38      	pop	{r3, r4, r5, pc}
 80a2de0:	20000068 	.word	0x20000068

080a2de4 <strcmp>:
 80a2de4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a2de8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a2dec:	2a01      	cmp	r2, #1
 80a2dee:	bf28      	it	cs
 80a2df0:	429a      	cmpcs	r2, r3
 80a2df2:	d0f7      	beq.n	80a2de4 <strcmp>
 80a2df4:	1ad0      	subs	r0, r2, r3
 80a2df6:	4770      	bx	lr

080a2df8 <strdup>:
 80a2df8:	4b02      	ldr	r3, [pc, #8]	; (80a2e04 <strdup+0xc>)
 80a2dfa:	4601      	mov	r1, r0
 80a2dfc:	6818      	ldr	r0, [r3, #0]
 80a2dfe:	f000 b803 	b.w	80a2e08 <_strdup_r>
 80a2e02:	bf00      	nop
 80a2e04:	20000068 	.word	0x20000068

080a2e08 <_strdup_r>:
 80a2e08:	b570      	push	{r4, r5, r6, lr}
 80a2e0a:	4606      	mov	r6, r0
 80a2e0c:	4608      	mov	r0, r1
 80a2e0e:	460c      	mov	r4, r1
 80a2e10:	f000 f80d 	bl	80a2e2e <strlen>
 80a2e14:	1c45      	adds	r5, r0, #1
 80a2e16:	4629      	mov	r1, r5
 80a2e18:	4630      	mov	r0, r6
 80a2e1a:	f7fe fdef 	bl	80a19fc <_malloc_r>
 80a2e1e:	4606      	mov	r6, r0
 80a2e20:	b118      	cbz	r0, 80a2e2a <_strdup_r+0x22>
 80a2e22:	462a      	mov	r2, r5
 80a2e24:	4621      	mov	r1, r4
 80a2e26:	f7ff ffa1 	bl	80a2d6c <memcpy>
 80a2e2a:	4630      	mov	r0, r6
 80a2e2c:	bd70      	pop	{r4, r5, r6, pc}

080a2e2e <strlen>:
 80a2e2e:	4603      	mov	r3, r0
 80a2e30:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2e34:	2a00      	cmp	r2, #0
 80a2e36:	d1fb      	bne.n	80a2e30 <strlen+0x2>
 80a2e38:	1a18      	subs	r0, r3, r0
 80a2e3a:	3801      	subs	r0, #1
 80a2e3c:	4770      	bx	lr

080a2e3e <link_code_end>:
	...

080a2e40 <dynalib_user>:
 80a2e40:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a2e50:	0000 0000 6e49 6973 6564 6f20 486e 6e61     ....Inside onHan
 80a2e60:	6c64 7265 6f00 006e 666f 0066 614d 7473     dler.on.off.Mast
 80a2e70:	7265 6e4f 6300 6c61 496c 0074 614d 7473     erOn.callIt.Mast
 80a2e80:	7265 664f 0066 654c 4f64 006e 654c 4f64     erOff.LedOn.LedO
 80a2e90:	6666 4d00 7361 6574 5072 776f 7265 0000     ff.MasterPower..

080a2ea0 <CSWTCH.215>:
 80a2ea0:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a2eb0:	0050 0000                                   P...

080a2eb4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a2ebc:	1a35 080a 1a3b 080a 1a7f 080a 1a49 080a     5...;.......I...
 80a2ecc:	1a37 080a                                   7...

080a2ed0 <_ZTV7TwoWire>:
	...
 80a2ed8:	2031 080a 207b 080a 2053 080a 2033 080a     1 ..{ ..S ..3 ..
 80a2ee8:	205b 080a 2063 080a 206b 080a 2073 080a     [ ..c ..k ..s ..

080a2ef8 <_ZTV9IPAddress>:
	...
 80a2f00:	20c5 080a 20b5 080a 20b7 080a 6162 6475     . ... ... ..baud
 80a2f10:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a2f20:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a2f30:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a2f40:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a2f50:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a2f60:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a2f70:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a2f80:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a2f90:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a2fa0:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a2fb0:	3d20 0020 0a0d 6c00 006e 6e66 6300 646f      = ....ln.fn.cod
 80a2fc0:	0065 6564 6174 6c69 6e00 6e6f 0065 7274     e.detail.none.tr
 80a2fd0:	6361 0065 6e69 6f66 7700 7261 006e 7265     ace.info.warn.er
 80a2fe0:	6f72 0072 6170 696e 0063 6c61 006c 0000     ror.panic.all...

080a2ff0 <_ZTVN5spark12NetworkClassE>:
	...
 80a2ff8:	218d 080a 2197 080a 21a1 080a 21ab 080a     .!...!...!...!..
 80a3008:	21b5 080a 21c1 080a 21cd 080a 21d9 080a     .!...!...!...!..
 80a3018:	21e1 080a 21eb 080a 21f5 080a               .!...!...!..

080a3024 <_ZTV8SPIClass>:
	...
 80a302c:	232d 080a 232f 080a 005a 2b25 3330 3a64     -#../#..Z.%+03d:
 80a303c:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a304c:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a305c:	0000 0000                                   ....

080a3060 <_ZTV11USARTSerial>:
	...
 80a3068:	24c5 080a 2515 080a 2523 080a 2259 080a     .$...%..#%..Y"..
 80a3078:	24d9 080a 24fb 080a 24e7 080a 250f 080a     .$...$...$...%..
 80a3088:	24c7 080a 24cb 080a                         .$...$..

080a3090 <_ZTV9USBSerial>:
	...
 80a3098:	25cd 080a 261d 080a 262b 080a 2259 080a     .%...&..+&..Y"..
 80a30a8:	2609 080a 25cf 080a 25e5 080a 2617 080a     .&...%...%...&..
 80a30b8:	25fb 080a 25c9 080a                         .%...%..

080a30c0 <_ZTVN5spark9WiFiClassE>:
	...
 80a30c8:	2807 080a 27fd 080a 27f3 080a 2765 080a     .(...'...'..e'..
 80a30d8:	27e7 080a 27db 080a 27cf 080a 27c7 080a     .'...'...'...'..
 80a30e8:	27bd 080a 27b3 080a 276f 080a               .'...'..o'..

080a30f4 <__sf_fake_stdin>:
	...

080a3114 <__sf_fake_stdout>:
	...

080a3134 <__sf_fake_stderr>:
	...
 80a3154:	0043                                        C.

080a3156 <link_const_variable_data_end>:
	...

080a3158 <link_constructors_location>:
 80a3158:	080a0325 	.word	0x080a0325
 80a315c:	080a166d 	.word	0x080a166d
 80a3160:	080a217d 	.word	0x080a217d
 80a3164:	080a2245 	.word	0x080a2245
 80a3168:	080a2311 	.word	0x080a2311
 80a316c:	080a2499 	.word	0x080a2499
 80a3170:	080a24b1 	.word	0x080a24b1
 80a3174:	080a2811 	.word	0x080a2811
 80a3178:	080a2a39 	.word	0x080a2a39
 80a317c:	080a2a69 	.word	0x080a2a69
 80a3180:	080a2ac1 	.word	0x080a2ac1
 80a3184:	080a2b85 	.word	0x080a2b85
 80a3188:	080a2c09 	.word	0x080a2c09
 80a318c:	080a2c8d 	.word	0x080a2c8d
